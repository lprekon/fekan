<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="10089"><g><title>fekan`__rdl_alloc (2 samples, 0.02%)</title><rect x="0.0099%" y="245" width="0.0198%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2599%" y="255.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (78 samples, 0.77%)</title><rect x="0.0991%" y="85" width="0.7731%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="78"/><text x="0.3491%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.77%)</title><rect x="0.0991%" y="69" width="0.7731%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="78"/><text x="0.3491%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (78 samples, 0.77%)</title><rect x="0.0991%" y="53" width="0.7731%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="78"/><text x="0.3491%" y="63.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (5 samples, 0.05%)</title><rect x="0.9416%" y="37" width="0.0496%" height="15" fill="rgb(208,68,35)" fg:x="95" fg:w="5"/><text x="1.1916%" y="47.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.02%)</title><rect x="0.9912%" y="37" width="0.0198%" height="15" fill="rgb(232,128,0)" fg:x="100" fg:w="2"/><text x="1.2412%" y="47.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,417 samples, 14.04%)</title><rect x="0.0892%" y="101" width="14.0450%" height="15" fill="rgb(207,160,47)" fg:x="9" fg:w="1417"/><text x="0.3392%" y="111.50">fekan`&lt;core::marker::..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,338 samples, 13.26%)</title><rect x="0.8722%" y="85" width="13.2620%" height="15" fill="rgb(228,23,34)" fg:x="88" fg:w="1338"/><text x="1.1222%" y="95.50">fekan`serde_json::de..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,337 samples, 13.25%)</title><rect x="0.8821%" y="69" width="13.2521%" height="15" fill="rgb(218,30,26)" fg:x="89" fg:w="1337"/><text x="1.1321%" y="79.50">fekan`serde_json::de..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,333 samples, 13.21%)</title><rect x="0.9218%" y="53" width="13.2124%" height="15" fill="rgb(220,122,19)" fg:x="93" fg:w="1333"/><text x="1.1718%" y="63.50">fekan`&lt;std::io::Byte..</text></g><g><title>libsystem_kernel.dylib`read (1,324 samples, 13.12%)</title><rect x="1.0110%" y="37" width="13.1232%" height="15" fill="rgb(250,228,42)" fg:x="102" fg:w="1324"/><text x="1.2610%" y="47.50">libsystem_kernel.dyl..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 1.36%)</title><rect x="14.1342%" y="101" width="1.3579%" height="15" fill="rgb(240,193,28)" fg:x="1426" fg:w="137"/><text x="14.3842%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (135 samples, 1.34%)</title><rect x="14.1540%" y="85" width="1.3381%" height="15" fill="rgb(216,20,37)" fg:x="1428" fg:w="135"/><text x="14.4040%" y="95.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,556 samples, 15.42%)</title><rect x="0.0793%" y="117" width="15.4227%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1556"/><text x="0.3293%" y="127.50">fekan`&lt;serde_json::de::S..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,558 samples, 15.44%)</title><rect x="0.0694%" y="133" width="15.4426%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="1558"/><text x="0.3194%" y="143.50">fekan`&lt;serde::de::impls:..</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,639 samples, 16.25%)</title><rect x="0.0694%" y="149" width="16.2454%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="1639"/><text x="0.3194%" y="159.50">fekan`&lt;&amp;mut serde_json::d..</text></g><g><title>libsystem_kernel.dylib`read (81 samples, 0.80%)</title><rect x="15.5119%" y="133" width="0.8029%" height="15" fill="rgb(225,20,46)" fg:x="1565" fg:w="81"/><text x="15.7619%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.72%)</title><rect x="16.3148%" y="133" width="0.7236%" height="15" fill="rgb(210,31,41)" fg:x="1646" fg:w="73"/><text x="16.5648%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (73 samples, 0.72%)</title><rect x="16.3148%" y="117" width="0.7236%" height="15" fill="rgb(221,200,47)" fg:x="1646" fg:w="73"/><text x="16.5648%" y="127.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (31 samples, 0.31%)</title><rect x="17.0384%" y="133" width="0.3073%" height="15" fill="rgb(226,26,5)" fg:x="1719" fg:w="31"/><text x="17.2884%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.31%)</title><rect x="17.0384%" y="117" width="0.3073%" height="15" fill="rgb(249,33,26)" fg:x="1719" fg:w="31"/><text x="17.2884%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (30 samples, 0.30%)</title><rect x="17.0483%" y="101" width="0.2974%" height="15" fill="rgb(235,183,28)" fg:x="1720" fg:w="30"/><text x="17.2983%" y="111.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.03%)</title><rect x="17.4249%" y="85" width="0.0297%" height="15" fill="rgb(221,5,38)" fg:x="1758" fg:w="3"/><text x="17.6749%" y="95.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.02%)</title><rect x="17.4547%" y="85" width="0.0198%" height="15" fill="rgb(247,18,42)" fg:x="1761" fg:w="2"/><text x="17.7047%" y="95.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (809 samples, 8.02%)</title><rect x="16.3148%" y="149" width="8.0186%" height="15" fill="rgb(241,131,45)" fg:x="1646" fg:w="809"/><text x="16.5648%" y="159.50">fekan`&lt;core..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (705 samples, 6.99%)</title><rect x="17.3456%" y="133" width="6.9878%" height="15" fill="rgb(249,31,29)" fg:x="1750" fg:w="705"/><text x="17.5956%" y="143.50">fekan`ser..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (704 samples, 6.98%)</title><rect x="17.3555%" y="117" width="6.9779%" height="15" fill="rgb(225,111,53)" fg:x="1751" fg:w="704"/><text x="17.6055%" y="127.50">fekan`ser..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (699 samples, 6.93%)</title><rect x="17.4051%" y="101" width="6.9283%" height="15" fill="rgb(238,160,17)" fg:x="1756" fg:w="699"/><text x="17.6551%" y="111.50">fekan`&lt;st..</text></g><g><title>libsystem_kernel.dylib`read (692 samples, 6.86%)</title><rect x="17.4745%" y="85" width="6.8590%" height="15" fill="rgb(214,148,48)" fg:x="1763" fg:w="692"/><text x="17.7245%" y="95.50">libsystem..</text></g><g><title>fekan`DYLD-STUB$$read (3 samples, 0.03%)</title><rect x="24.4028%" y="117" width="0.0297%" height="15" fill="rgb(232,36,49)" fg:x="2462" fg:w="3"/><text x="24.6528%" y="127.50"></text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (600 samples, 5.95%)</title><rect x="24.3334%" y="149" width="5.9471%" height="15" fill="rgb(209,103,24)" fg:x="2455" fg:w="600"/><text x="24.5834%" y="159.50">fekan`&lt;s..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (594 samples, 5.89%)</title><rect x="24.3929%" y="133" width="5.8876%" height="15" fill="rgb(229,88,8)" fg:x="2461" fg:w="594"/><text x="24.6429%" y="143.50">fekan`&lt;..</text></g><g><title>libsystem_kernel.dylib`read (590 samples, 5.85%)</title><rect x="24.4326%" y="117" width="5.8480%" height="15" fill="rgb(213,181,19)" fg:x="2465" fg:w="590"/><text x="24.6826%" y="127.50">libsyst..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (169 samples, 1.68%)</title><rect x="30.2904%" y="149" width="1.6751%" height="15" fill="rgb(254,191,54)" fg:x="3056" fg:w="169"/><text x="30.5404%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (168 samples, 1.67%)</title><rect x="30.3003%" y="133" width="1.6652%" height="15" fill="rgb(241,83,37)" fg:x="3057" fg:w="168"/><text x="30.5503%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,293 samples, 32.64%)</title><rect x="0.0496%" y="165" width="32.6395%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="3293"/><text x="0.2996%" y="175.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde:..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (73 samples, 0.72%)</title><rect x="31.9655%" y="149" width="0.7236%" height="15" fill="rgb(226,3,54)" fg:x="3225" fg:w="73"/><text x="32.2155%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (73 samples, 0.72%)</title><rect x="31.9655%" y="133" width="0.7236%" height="15" fill="rgb(245,192,40)" fg:x="3225" fg:w="73"/><text x="32.2155%" y="143.50"></text></g><g><title>fekan`fekan::load_regression_data (3,399 samples, 33.69%)</title><rect x="0.0396%" y="245" width="33.6902%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="3399"/><text x="0.2896%" y="255.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`serde_json::de::from_trait (3,398 samples, 33.68%)</title><rect x="0.0496%" y="229" width="33.6802%" height="15" fill="rgb(232,182,51)" fg:x="5" fg:w="3398"/><text x="0.2996%" y="239.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,398 samples, 33.68%)</title><rect x="0.0496%" y="213" width="33.6802%" height="15" fill="rgb(231,60,39)" fg:x="5" fg:w="3398"/><text x="0.2996%" y="223.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::d..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,398 samples, 33.68%)</title><rect x="0.0496%" y="197" width="33.6802%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="3398"/><text x="0.2996%" y="207.50">fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize f..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,398 samples, 33.68%)</title><rect x="0.0496%" y="181" width="33.6802%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="3398"/><text x="0.2996%" y="191.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAc..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (105 samples, 1.04%)</title><rect x="32.6891%" y="165" width="1.0407%" height="15" fill="rgb(213,116,39)" fg:x="3298" fg:w="105"/><text x="32.9391%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (102 samples, 1.01%)</title><rect x="32.7188%" y="149" width="1.0110%" height="15" fill="rgb(222,207,29)" fg:x="3301" fg:w="102"/><text x="32.9688%" y="159.50"></text></g><g><title>fekan`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (7 samples, 0.07%)</title><rect x="33.7695%" y="229" width="0.0694%" height="15" fill="rgb(206,96,30)" fg:x="3407" fg:w="7"/><text x="34.0195%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="33.8388%" y="165" width="0.0198%" height="15" fill="rgb(218,138,4)" fg:x="3414" fg:w="2"/><text x="34.0888%" y="175.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (3 samples, 0.03%)</title><rect x="33.8388%" y="229" width="0.0297%" height="15" fill="rgb(250,191,14)" fg:x="3414" fg:w="3"/><text x="34.0888%" y="239.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (3 samples, 0.03%)</title><rect x="33.8388%" y="213" width="0.0297%" height="15" fill="rgb(239,60,40)" fg:x="3414" fg:w="3"/><text x="34.0888%" y="223.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::edge::EdgeType&gt; (3 samples, 0.03%)</title><rect x="33.8388%" y="197" width="0.0297%" height="15" fill="rgb(206,27,48)" fg:x="3414" fg:w="3"/><text x="34.0888%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.03%)</title><rect x="33.8388%" y="181" width="0.0297%" height="15" fill="rgb(225,35,8)" fg:x="3414" fg:w="3"/><text x="34.0888%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (20 samples, 0.20%)</title><rect x="33.8686%" y="165" width="0.1982%" height="15" fill="rgb(250,213,24)" fg:x="3417" fg:w="20"/><text x="34.1186%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (22 samples, 0.22%)</title><rect x="33.8686%" y="181" width="0.2181%" height="15" fill="rgb(247,123,22)" fg:x="3417" fg:w="22"/><text x="34.1186%" y="191.50"></text></g><g><title>fekan`fekan::kan::Kan::merge_models (23 samples, 0.23%)</title><rect x="33.8686%" y="229" width="0.2280%" height="15" fill="rgb(231,138,38)" fg:x="3417" fg:w="23"/><text x="34.1186%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::merge_layers (23 samples, 0.23%)</title><rect x="33.8686%" y="213" width="0.2280%" height="15" fill="rgb(231,145,46)" fg:x="3417" fg:w="23"/><text x="34.1186%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::merge_edges (23 samples, 0.23%)</title><rect x="33.8686%" y="197" width="0.2280%" height="15" fill="rgb(251,118,11)" fg:x="3417" fg:w="23"/><text x="34.1186%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::test_and_set_symbolic (2 samples, 0.02%)</title><rect x="34.0965%" y="229" width="0.0198%" height="15" fill="rgb(217,147,25)" fg:x="3440" fg:w="2"/><text x="34.3465%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::test_and_set_symbolic (2 samples, 0.02%)</title><rect x="34.0965%" y="213" width="0.0198%" height="15" fill="rgb(247,81,37)" fg:x="3440" fg:w="2"/><text x="34.3465%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::suggest_symbolic (2 samples, 0.02%)</title><rect x="34.0965%" y="197" width="0.0198%" height="15" fill="rgb(209,12,38)" fg:x="3440" fg:w="2"/><text x="34.3465%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (27 samples, 0.27%)</title><rect x="35.0778%" y="149" width="0.2676%" height="15" fill="rgb(227,1,9)" fg:x="3539" fg:w="27"/><text x="35.3278%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (19 samples, 0.19%)</title><rect x="35.1571%" y="133" width="0.1883%" height="15" fill="rgb(248,47,43)" fg:x="3547" fg:w="19"/><text x="35.4071%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (24 samples, 0.24%)</title><rect x="35.3454%" y="149" width="0.2379%" height="15" fill="rgb(221,10,30)" fg:x="3566" fg:w="24"/><text x="35.5954%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (134 samples, 1.33%)</title><rect x="34.5921%" y="165" width="1.3282%" height="15" fill="rgb(210,229,1)" fg:x="3490" fg:w="134"/><text x="34.8421%" y="175.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 0.34%)</title><rect x="35.5833%" y="149" width="0.3370%" height="15" fill="rgb(222,148,37)" fg:x="3590" fg:w="34"/><text x="35.8333%" y="159.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (27 samples, 0.27%)</title><rect x="35.6527%" y="133" width="0.2676%" height="15" fill="rgb(234,67,33)" fg:x="3597" fg:w="27"/><text x="35.9027%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (208 samples, 2.06%)</title><rect x="34.2254%" y="181" width="2.0617%" height="15" fill="rgb(247,98,35)" fg:x="3453" fg:w="208"/><text x="34.4754%" y="191.50">f..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (37 samples, 0.37%)</title><rect x="35.9203%" y="165" width="0.3667%" height="15" fill="rgb(247,138,52)" fg:x="3624" fg:w="37"/><text x="36.1703%" y="175.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (22 samples, 0.22%)</title><rect x="36.0690%" y="149" width="0.2181%" height="15" fill="rgb(213,79,30)" fg:x="3639" fg:w="22"/><text x="36.3190%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::forward (218 samples, 2.16%)</title><rect x="34.1659%" y="197" width="2.1608%" height="15" fill="rgb(246,177,23)" fg:x="3447" fg:w="218"/><text x="34.4159%" y="207.50">f..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.04%)</title><rect x="36.2870%" y="181" width="0.0396%" height="15" fill="rgb(230,62,27)" fg:x="3661" fg:w="4"/><text x="36.5370%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (4 samples, 0.04%)</title><rect x="36.3267%" y="197" width="0.0396%" height="15" fill="rgb(216,154,8)" fg:x="3665" fg:w="4"/><text x="36.5767%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (226 samples, 2.24%)</title><rect x="34.1362%" y="213" width="2.2401%" height="15" fill="rgb(244,35,45)" fg:x="3444" fg:w="226"/><text x="34.3862%" y="223.50">f..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (8 samples, 0.08%)</title><rect x="36.3763%" y="213" width="0.0793%" height="15" fill="rgb(251,115,12)" fg:x="3670" fg:w="8"/><text x="36.6263%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (7 samples, 0.07%)</title><rect x="36.3862%" y="197" width="0.0694%" height="15" fill="rgb(240,54,50)" fg:x="3671" fg:w="7"/><text x="36.6362%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (7 samples, 0.07%)</title><rect x="36.3862%" y="181" width="0.0694%" height="15" fill="rgb(233,84,52)" fg:x="3671" fg:w="7"/><text x="36.6362%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (7 samples, 0.07%)</title><rect x="36.3862%" y="165" width="0.0694%" height="15" fill="rgb(207,117,47)" fg:x="3671" fg:w="7"/><text x="36.6362%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (7 samples, 0.07%)</title><rect x="36.3862%" y="149" width="0.0694%" height="15" fill="rgb(249,43,39)" fg:x="3671" fg:w="7"/><text x="36.6362%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.05%)</title><rect x="36.4060%" y="133" width="0.0496%" height="15" fill="rgb(209,38,44)" fg:x="3673" fg:w="5"/><text x="36.6560%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.03%)</title><rect x="36.4258%" y="117" width="0.0297%" height="15" fill="rgb(236,212,23)" fg:x="3675" fg:w="3"/><text x="36.6758%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="36.4655%" y="213" width="0.0198%" height="15" fill="rgb(242,79,21)" fg:x="3679" fg:w="2"/><text x="36.7155%" y="223.50"></text></g><g><title>fekan`fekan::preset_knot_ranges (239 samples, 2.37%)</title><rect x="34.1263%" y="229" width="2.3689%" height="15" fill="rgb(211,96,35)" fg:x="3443" fg:w="239"/><text x="34.3763%" y="239.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (182 samples, 1.80%)</title><rect x="36.5150%" y="181" width="1.8039%" height="15" fill="rgb(253,215,40)" fg:x="3684" fg:w="182"/><text x="36.7650%" y="191.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (178 samples, 1.76%)</title><rect x="36.5547%" y="165" width="1.7643%" height="15" fill="rgb(211,81,21)" fg:x="3688" fg:w="178"/><text x="36.8047%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (159 samples, 1.58%)</title><rect x="36.7430%" y="149" width="1.5760%" height="15" fill="rgb(208,190,38)" fg:x="3707" fg:w="159"/><text x="36.9930%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (120 samples, 1.19%)</title><rect x="37.1295%" y="133" width="1.1894%" height="15" fill="rgb(235,213,38)" fg:x="3746" fg:w="120"/><text x="37.3795%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (33 samples, 0.33%)</title><rect x="37.9919%" y="117" width="0.3271%" height="15" fill="rgb(237,122,38)" fg:x="3833" fg:w="33"/><text x="38.2419%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (6 samples, 0.06%)</title><rect x="38.3190%" y="181" width="0.0595%" height="15" fill="rgb(244,218,35)" fg:x="3866" fg:w="6"/><text x="38.5690%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.05%)</title><rect x="38.3784%" y="181" width="0.0496%" height="15" fill="rgb(240,68,47)" fg:x="3872" fg:w="5"/><text x="38.6284%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.05%)</title><rect x="38.3784%" y="165" width="0.0496%" height="15" fill="rgb(210,16,53)" fg:x="3872" fg:w="5"/><text x="38.6284%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (197 samples, 1.95%)</title><rect x="36.5051%" y="197" width="1.9526%" height="15" fill="rgb(235,124,12)" fg:x="3683" fg:w="197"/><text x="36.7551%" y="207.50">f..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="38.4577%" y="197" width="0.0297%" height="15" fill="rgb(224,169,11)" fg:x="3880" fg:w="3"/><text x="38.7077%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (201 samples, 1.99%)</title><rect x="36.5051%" y="213" width="1.9923%" height="15" fill="rgb(250,166,2)" fg:x="3683" fg:w="201"/><text x="36.7551%" y="223.50">f..</text></g><g><title>fekan`fekan::validate_model (209 samples, 2.07%)</title><rect x="36.4952%" y="229" width="2.0716%" height="15" fill="rgb(242,216,29)" fg:x="3682" fg:w="209"/><text x="36.7452%" y="239.50">f..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="38.5370%" y="213" width="0.0297%" height="15" fill="rgb(230,116,27)" fg:x="3888" fg:w="3"/><text x="38.7870%" y="223.50"></text></g><g><title>fekan`rand::rng::Rng::gen_range (5 samples, 0.05%)</title><rect x="38.5767%" y="229" width="0.0496%" height="15" fill="rgb(228,99,48)" fg:x="3892" fg:w="5"/><text x="38.8267%" y="239.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (217 samples, 2.15%)</title><rect x="38.6262%" y="181" width="2.1509%" height="15" fill="rgb(253,11,6)" fg:x="3897" fg:w="217"/><text x="38.8762%" y="191.50">f..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (217 samples, 2.15%)</title><rect x="38.6262%" y="165" width="2.1509%" height="15" fill="rgb(247,143,39)" fg:x="3897" fg:w="217"/><text x="38.8762%" y="175.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (216 samples, 2.14%)</title><rect x="38.6361%" y="149" width="2.1409%" height="15" fill="rgb(236,97,10)" fg:x="3898" fg:w="216"/><text x="38.8861%" y="159.50">l..</text></g><g><title>fekan`std::thread::scoped::_&lt;impl std::thread::Builder&gt;::spawn_scoped (2 samples, 0.02%)</title><rect x="40.7771%" y="181" width="0.0198%" height="15" fill="rgb(233,208,19)" fg:x="4114" fg:w="2"/><text x="41.0271%" y="191.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new (2 samples, 0.02%)</title><rect x="40.7771%" y="165" width="0.0198%" height="15" fill="rgb(216,164,2)" fg:x="4114" fg:w="2"/><text x="41.0271%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (2 samples, 0.02%)</title><rect x="40.7771%" y="149" width="0.0198%" height="15" fill="rgb(220,129,5)" fg:x="4114" fg:w="2"/><text x="41.0271%" y="159.50"></text></g><g><title>fekan`std::thread::scoped::scope (221 samples, 2.19%)</title><rect x="38.6262%" y="229" width="2.1905%" height="15" fill="rgb(242,17,10)" fg:x="3897" fg:w="221"/><text x="38.8762%" y="239.50">f..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (221 samples, 2.19%)</title><rect x="38.6262%" y="213" width="2.1905%" height="15" fill="rgb(242,107,0)" fg:x="3897" fg:w="221"/><text x="38.8762%" y="223.50">f..</text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (221 samples, 2.19%)</title><rect x="38.6262%" y="197" width="2.1905%" height="15" fill="rgb(251,28,31)" fg:x="3897" fg:w="221"/><text x="38.8762%" y="207.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="40.7969%" y="181" width="0.0198%" height="15" fill="rgb(233,223,10)" fg:x="4116" fg:w="2"/><text x="41.0469%" y="191.50"></text></g><g><title>fekan`fekan::train_model (724 samples, 7.18%)</title><rect x="33.7298%" y="245" width="7.1761%" height="15" fill="rgb(215,21,27)" fg:x="3403" fg:w="724"/><text x="33.9798%" y="255.50">fekan`feka..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.08%)</title><rect x="40.8266%" y="229" width="0.0793%" height="15" fill="rgb(232,23,21)" fg:x="4119" fg:w="8"/><text x="41.0766%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="40.9059%" y="245" width="0.0198%" height="15" fill="rgb(244,5,23)" fg:x="4127" fg:w="2"/><text x="41.1559%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="40.9258%" y="245" width="0.0297%" height="15" fill="rgb(226,81,46)" fg:x="4129" fg:w="3"/><text x="41.1758%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="40.9654%" y="245" width="0.0297%" height="15" fill="rgb(247,70,30)" fg:x="4133" fg:w="3"/><text x="41.2154%" y="255.50"></text></g><g><title>fekan`main (4,137 samples, 41.01%)</title><rect x="0.0000%" y="325" width="41.0051%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="4137"/><text x="0.2500%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (4,137 samples, 41.01%)</title><rect x="0.0000%" y="309" width="41.0051%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="4137"/><text x="0.2500%" y="319.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (4,137 samples, 41.01%)</title><rect x="0.0000%" y="293" width="41.0051%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="4137"/><text x="0.2500%" y="303.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (4,137 samples, 41.01%)</title><rect x="0.0000%" y="277" width="41.0051%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="4137"/><text x="0.2500%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (4,136 samples, 41.00%)</title><rect x="0.0099%" y="261" width="40.9951%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="4136"/><text x="0.2599%" y="271.50">fekan`fekan::main</text></g><g><title>dyld`start (4,138 samples, 41.01%)</title><rect x="0.0000%" y="341" width="41.0150%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="4138"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.02%)</title><rect x="41.0150%" y="341" width="0.0198%" height="15" fill="rgb(224,114,35)" fg:x="4138" fg:w="2"/><text x="41.2650%" y="351.50"></text></g><g><title>fekan`&lt;Iter as core::iter::traits::collect::SpecTupleExtend&lt;ExtendA,ExtendB&gt;&gt;::extend (6 samples, 0.06%)</title><rect x="41.0943%" y="261" width="0.0595%" height="15" fill="rgb(245,159,27)" fg:x="4146" fg:w="6"/><text x="41.3443%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="41.1636%" y="261" width="0.0198%" height="15" fill="rgb(245,172,44)" fg:x="4153" fg:w="2"/><text x="41.4136%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.03%)</title><rect x="41.2231%" y="245" width="0.0297%" height="15" fill="rgb(236,23,11)" fg:x="4159" fg:w="3"/><text x="41.4731%" y="255.50"></text></g><g><title>fekan`fekan::calculate_huber_loss_and_gradient (7 samples, 0.07%)</title><rect x="41.1934%" y="261" width="0.0694%" height="15" fill="rgb(205,117,38)" fg:x="4156" fg:w="7"/><text x="41.4434%" y="271.50"></text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (635 samples, 6.29%)</title><rect x="42.2044%" y="197" width="6.2940%" height="15" fill="rgb(237,72,25)" fg:x="4258" fg:w="635"/><text x="42.4544%" y="207.50">fekan`&lt;c..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (263 samples, 2.61%)</title><rect x="45.8916%" y="181" width="2.6068%" height="15" fill="rgb(244,70,9)" fg:x="4630" fg:w="263"/><text x="46.1416%" y="191.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (194 samples, 1.92%)</title><rect x="48.4984%" y="197" width="1.9229%" height="15" fill="rgb(217,125,39)" fg:x="4893" fg:w="194"/><text x="48.7484%" y="207.50">f..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (843 samples, 8.36%)</title><rect x="42.1945%" y="213" width="8.3556%" height="15" fill="rgb(235,36,10)" fg:x="4257" fg:w="843"/><text x="42.4445%" y="223.50">fekan`&lt;alloc..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.13%)</title><rect x="50.4213%" y="197" width="0.1289%" height="15" fill="rgb(251,123,47)" fg:x="5087" fg:w="13"/><text x="50.6713%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.13%)</title><rect x="50.4213%" y="181" width="0.1289%" height="15" fill="rgb(221,13,13)" fg:x="5087" fg:w="13"/><text x="50.6713%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.07%)</title><rect x="50.4807%" y="165" width="0.0694%" height="15" fill="rgb(238,131,9)" fg:x="5093" fg:w="7"/><text x="50.7307%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.11%)</title><rect x="50.5798%" y="213" width="0.1090%" height="15" fill="rgb(211,50,8)" fg:x="5103" fg:w="11"/><text x="50.8298%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.10%)</title><rect x="50.5898%" y="197" width="0.0991%" height="15" fill="rgb(245,182,24)" fg:x="5104" fg:w="10"/><text x="50.8398%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="50.6690%" y="181" width="0.0198%" height="15" fill="rgb(242,14,37)" fg:x="5112" fg:w="2"/><text x="50.9190%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (944 samples, 9.36%)</title><rect x="41.3916%" y="229" width="9.3567%" height="15" fill="rgb(246,228,12)" fg:x="4176" fg:w="944"/><text x="41.6416%" y="239.50">fekan`fekan::..</text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.04%)</title><rect x="50.7087%" y="213" width="0.0396%" height="15" fill="rgb(213,55,15)" fg:x="5116" fg:w="4"/><text x="50.9587%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.05%)</title><rect x="50.7583%" y="229" width="0.0496%" height="15" fill="rgb(209,9,3)" fg:x="5121" fg:w="5"/><text x="51.0083%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="50.8078%" y="229" width="0.0297%" height="15" fill="rgb(230,59,30)" fg:x="5126" fg:w="3"/><text x="51.0578%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.03%)</title><rect x="50.8475%" y="229" width="0.0297%" height="15" fill="rgb(209,121,21)" fg:x="5130" fg:w="3"/><text x="51.0975%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="50.8574%" y="213" width="0.0198%" height="15" fill="rgb(220,109,13)" fg:x="5131" fg:w="2"/><text x="51.1074%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.12%)</title><rect x="50.8772%" y="229" width="0.1189%" height="15" fill="rgb(232,18,1)" fg:x="5133" fg:w="12"/><text x="51.1272%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="50.9961%" y="229" width="0.0198%" height="15" fill="rgb(215,41,42)" fg:x="5145" fg:w="2"/><text x="51.2461%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (985 samples, 9.76%)</title><rect x="41.2628%" y="245" width="9.7631%" height="15" fill="rgb(224,123,36)" fg:x="4163" fg:w="985"/><text x="41.5128%" y="255.50">fekan`fekan::k..</text></g><g><title>fekan`fekan::kan::Kan::backward (991 samples, 9.82%)</title><rect x="41.2628%" y="261" width="9.8226%" height="15" fill="rgb(240,125,3)" fg:x="4163" fg:w="991"/><text x="41.5128%" y="271.50">fekan`fekan::k..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.06%)</title><rect x="51.0259%" y="245" width="0.0595%" height="15" fill="rgb(205,98,50)" fg:x="5148" fg:w="6"/><text x="51.2759%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::clear_samples (12 samples, 0.12%)</title><rect x="51.0853%" y="261" width="0.1189%" height="15" fill="rgb(205,185,37)" fg:x="5154" fg:w="12"/><text x="51.3353%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.10%)</title><rect x="51.1052%" y="245" width="0.0991%" height="15" fill="rgb(238,207,15)" fg:x="5156" fg:w="10"/><text x="51.3552%" y="255.50"></text></g><g><title>fekan`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 0.04%)</title><rect x="51.4025%" y="229" width="0.0396%" height="15" fill="rgb(213,199,42)" fg:x="5186" fg:w="4"/><text x="51.6525%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.07%)</title><rect x="51.7098%" y="213" width="0.0694%" height="15" fill="rgb(235,201,11)" fg:x="5217" fg:w="7"/><text x="51.9598%" y="223.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (7 samples, 0.07%)</title><rect x="51.7098%" y="197" width="0.0694%" height="15" fill="rgb(207,46,11)" fg:x="5217" fg:w="7"/><text x="51.9598%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.07%)</title><rect x="51.7098%" y="181" width="0.0694%" height="15" fill="rgb(241,35,35)" fg:x="5217" fg:w="7"/><text x="51.9598%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 0.07%)</title><rect x="51.7098%" y="165" width="0.0694%" height="15" fill="rgb(243,32,47)" fg:x="5217" fg:w="7"/><text x="51.9598%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.07%)</title><rect x="51.7098%" y="149" width="0.0694%" height="15" fill="rgb(247,202,23)" fg:x="5217" fg:w="7"/><text x="51.9598%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (359 samples, 3.56%)</title><rect x="59.3518%" y="181" width="3.5583%" height="15" fill="rgb(219,102,11)" fg:x="5988" fg:w="359"/><text x="59.6018%" y="191.50">feka..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (212 samples, 2.10%)</title><rect x="60.8088%" y="165" width="2.1013%" height="15" fill="rgb(243,110,44)" fg:x="6135" fg:w="212"/><text x="61.0588%" y="175.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (154 samples, 1.53%)</title><rect x="62.9101%" y="181" width="1.5264%" height="15" fill="rgb(222,74,54)" fg:x="6347" fg:w="154"/><text x="63.1601%" y="191.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.07%)</title><rect x="66.8352%" y="165" width="0.0694%" height="15" fill="rgb(216,99,12)" fg:x="6743" fg:w="7"/><text x="67.0852%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (1,112 samples, 11.02%)</title><rect x="55.9025%" y="197" width="11.0219%" height="15" fill="rgb(226,22,26)" fg:x="5640" fg:w="1112"/><text x="56.1525%" y="207.50">fekan`fekan::kan..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (251 samples, 2.49%)</title><rect x="64.4365%" y="181" width="2.4879%" height="15" fill="rgb(217,163,10)" fg:x="6501" fg:w="251"/><text x="64.6865%" y="191.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (1,730 samples, 17.15%)</title><rect x="51.7792%" y="213" width="17.1474%" height="15" fill="rgb(213,25,53)" fg:x="5224" fg:w="1730"/><text x="52.0292%" y="223.50">fekan`fekan::kan_layer::edg..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (202 samples, 2.00%)</title><rect x="66.9244%" y="197" width="2.0022%" height="15" fill="rgb(252,105,26)" fg:x="6752" fg:w="202"/><text x="67.1744%" y="207.50">f..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.04%)</title><rect x="68.8869%" y="181" width="0.0396%" height="15" fill="rgb(220,39,43)" fg:x="6950" fg:w="4"/><text x="69.1369%" y="191.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (41 samples, 0.41%)</title><rect x="68.9266%" y="213" width="0.4064%" height="15" fill="rgb(229,68,48)" fg:x="6954" fg:w="41"/><text x="69.1766%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="69.3329%" y="181" width="0.0198%" height="15" fill="rgb(252,8,32)" fg:x="6995" fg:w="2"/><text x="69.5829%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::forward (1,806 samples, 17.90%)</title><rect x="51.4620%" y="229" width="17.9007%" height="15" fill="rgb(223,20,43)" fg:x="5192" fg:w="1806"/><text x="51.7120%" y="239.50">fekan`fekan::kan_layer::edge..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="69.3329%" y="213" width="0.0297%" height="15" fill="rgb(229,81,49)" fg:x="6995" fg:w="3"/><text x="69.5829%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.03%)</title><rect x="69.3329%" y="197" width="0.0297%" height="15" fill="rgb(236,28,36)" fg:x="6995" fg:w="3"/><text x="69.5829%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (59 samples, 0.58%)</title><rect x="69.3627%" y="229" width="0.5848%" height="15" fill="rgb(249,185,26)" fg:x="6998" fg:w="59"/><text x="69.6127%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.07%)</title><rect x="69.9574%" y="229" width="0.0694%" height="15" fill="rgb(249,174,33)" fg:x="7058" fg:w="7"/><text x="70.2074%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="70.0367%" y="229" width="0.0198%" height="15" fill="rgb(233,201,37)" fg:x="7066" fg:w="2"/><text x="70.2867%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.06%)</title><rect x="70.0565%" y="229" width="0.0595%" height="15" fill="rgb(221,78,26)" fg:x="7068" fg:w="6"/><text x="70.3065%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="70.1160%" y="229" width="0.0297%" height="15" fill="rgb(250,127,30)" fg:x="7074" fg:w="3"/><text x="70.3660%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (1,912 samples, 18.95%)</title><rect x="51.2043%" y="261" width="18.9513%" height="15" fill="rgb(230,49,44)" fg:x="5166" fg:w="1912"/><text x="51.4543%" y="271.50">fekan`fekan::kan::Kan::forward</text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (1,912 samples, 18.95%)</title><rect x="51.2043%" y="245" width="18.9513%" height="15" fill="rgb(229,67,23)" fg:x="5166" fg:w="1912"/><text x="51.4543%" y="255.50">fekan`fekan::kan_layer::KanLay..</text></g><g><title>fekan`alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="70.1953%" y="213" width="0.0297%" height="15" fill="rgb(249,83,47)" fg:x="7082" fg:w="3"/><text x="70.4453%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.03%)</title><rect x="70.1953%" y="197" width="0.0297%" height="15" fill="rgb(215,43,3)" fg:x="7082" fg:w="3"/><text x="70.4453%" y="207.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.06%)</title><rect x="70.1953%" y="229" width="0.0595%" height="15" fill="rgb(238,154,13)" fg:x="7082" fg:w="6"/><text x="70.4453%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="70.2349%" y="213" width="0.0198%" height="15" fill="rgb(219,56,2)" fg:x="7086" fg:w="2"/><text x="70.4849%" y="223.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.02%)</title><rect x="70.5521%" y="165" width="0.0198%" height="15" fill="rgb(233,0,4)" fg:x="7118" fg:w="2"/><text x="70.8021%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.02%)</title><rect x="70.5521%" y="149" width="0.0198%" height="15" fill="rgb(235,30,7)" fg:x="7118" fg:w="2"/><text x="70.8021%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.02%)</title><rect x="70.6215%" y="149" width="0.0198%" height="15" fill="rgb(250,79,13)" fg:x="7125" fg:w="2"/><text x="70.8715%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.02%)</title><rect x="70.6215%" y="133" width="0.0198%" height="15" fill="rgb(211,146,34)" fg:x="7125" fg:w="2"/><text x="70.8715%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (42 samples, 0.42%)</title><rect x="70.2547%" y="229" width="0.4163%" height="15" fill="rgb(228,22,38)" fg:x="7088" fg:w="42"/><text x="70.5047%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (42 samples, 0.42%)</title><rect x="70.2547%" y="213" width="0.4163%" height="15" fill="rgb(235,168,5)" fg:x="7088" fg:w="42"/><text x="70.5047%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (42 samples, 0.42%)</title><rect x="70.2547%" y="197" width="0.4163%" height="15" fill="rgb(221,155,16)" fg:x="7088" fg:w="42"/><text x="70.5047%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (27 samples, 0.27%)</title><rect x="70.4034%" y="181" width="0.2676%" height="15" fill="rgb(215,215,53)" fg:x="7103" fg:w="27"/><text x="70.6534%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (10 samples, 0.10%)</title><rect x="70.5719%" y="165" width="0.0991%" height="15" fill="rgb(223,4,10)" fg:x="7120" fg:w="10"/><text x="70.8219%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.03%)</title><rect x="70.6413%" y="149" width="0.0297%" height="15" fill="rgb(234,103,6)" fg:x="7127" fg:w="3"/><text x="70.8913%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="70.7008%" y="133" width="0.0297%" height="15" fill="rgb(227,97,0)" fg:x="7133" fg:w="3"/><text x="70.9508%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.05%)</title><rect x="70.7008%" y="181" width="0.0496%" height="15" fill="rgb(234,150,53)" fg:x="7133" fg:w="5"/><text x="70.9508%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.05%)</title><rect x="70.7008%" y="165" width="0.0496%" height="15" fill="rgb(228,201,54)" fg:x="7133" fg:w="5"/><text x="70.9508%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (5 samples, 0.05%)</title><rect x="70.7008%" y="149" width="0.0496%" height="15" fill="rgb(222,22,37)" fg:x="7133" fg:w="5"/><text x="70.9508%" y="159.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7 samples, 0.07%)</title><rect x="70.6909%" y="213" width="0.0694%" height="15" fill="rgb(237,53,32)" fg:x="7132" fg:w="7"/><text x="70.9409%" y="223.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (6 samples, 0.06%)</title><rect x="70.7008%" y="197" width="0.0595%" height="15" fill="rgb(233,25,53)" fg:x="7133" fg:w="6"/><text x="70.9508%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::update_knots_from_samples (11 samples, 0.11%)</title><rect x="70.6710%" y="229" width="0.1090%" height="15" fill="rgb(210,40,34)" fg:x="7130" fg:w="11"/><text x="70.9210%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="70.7801%" y="229" width="0.0198%" height="15" fill="rgb(241,220,44)" fg:x="7141" fg:w="2"/><text x="71.0301%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="70.8098%" y="229" width="0.0297%" height="15" fill="rgb(235,28,35)" fg:x="7144" fg:w="3"/><text x="71.0598%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (212 samples, 2.10%)</title><rect x="70.1556%" y="245" width="2.1013%" height="15" fill="rgb(210,56,17)" fg:x="7078" fg:w="212"/><text x="70.4056%" y="255.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memset (143 samples, 1.42%)</title><rect x="70.8395%" y="229" width="1.4174%" height="15" fill="rgb(224,130,29)" fg:x="7147" fg:w="143"/><text x="71.0895%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (214 samples, 2.12%)</title><rect x="70.1556%" y="261" width="2.1211%" height="15" fill="rgb(235,212,8)" fg:x="7078" fg:w="214"/><text x="70.4056%" y="271.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (10 samples, 0.10%)</title><rect x="72.2767%" y="261" width="0.0991%" height="15" fill="rgb(223,33,50)" fg:x="7292" fg:w="10"/><text x="72.5267%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$cbrt (7 samples, 0.07%)</title><rect x="79.1159%" y="245" width="0.0694%" height="15" fill="rgb(219,149,13)" fg:x="7982" fg:w="7"/><text x="79.3659%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$exp (5 samples, 0.05%)</title><rect x="79.1853%" y="245" width="0.0496%" height="15" fill="rgb(250,156,29)" fg:x="7989" fg:w="5"/><text x="79.4353%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$log (8 samples, 0.08%)</title><rect x="79.2348%" y="245" width="0.0793%" height="15" fill="rgb(216,193,19)" fg:x="7994" fg:w="8"/><text x="79.4848%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$pow (21 samples, 0.21%)</title><rect x="79.3141%" y="245" width="0.2081%" height="15" fill="rgb(216,135,14)" fg:x="8002" fg:w="21"/><text x="79.5641%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$sin (9 samples, 0.09%)</title><rect x="79.5223%" y="245" width="0.0892%" height="15" fill="rgb(241,47,5)" fg:x="8023" fg:w="9"/><text x="79.7723%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$tan (9 samples, 0.09%)</title><rect x="79.6115%" y="245" width="0.0892%" height="15" fill="rgb(233,42,35)" fg:x="8032" fg:w="9"/><text x="79.8615%" y="255.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bbe4 (26 samples, 0.26%)</title><rect x="85.3702%" y="229" width="0.2577%" height="15" fill="rgb(231,13,6)" fg:x="8613" fg:w="26"/><text x="85.6202%" y="239.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bcfc (41 samples, 0.41%)</title><rect x="85.6279%" y="229" width="0.4064%" height="15" fill="rgb(207,181,40)" fg:x="8639" fg:w="41"/><text x="85.8779%" y="239.50"></text></g><g><title>libsystem_m.dylib`cbrt (85 samples, 0.84%)</title><rect x="86.0343%" y="229" width="0.8425%" height="15" fill="rgb(254,173,49)" fg:x="8680" fg:w="85"/><text x="86.2843%" y="239.50"></text></g><g><title>libsystem_m.dylib`exp (67 samples, 0.66%)</title><rect x="86.8768%" y="229" width="0.6641%" height="15" fill="rgb(221,1,38)" fg:x="8765" fg:w="67"/><text x="87.1268%" y="239.50"></text></g><g><title>libsystem_m.dylib`log (77 samples, 0.76%)</title><rect x="87.5409%" y="229" width="0.7632%" height="15" fill="rgb(206,124,46)" fg:x="8832" fg:w="77"/><text x="87.7909%" y="239.50"></text></g><g><title>libsystem_m.dylib`pow (470 samples, 4.66%)</title><rect x="88.3041%" y="229" width="4.6585%" height="15" fill="rgb(249,21,11)" fg:x="8909" fg:w="470"/><text x="88.5541%" y="239.50">libsy..</text></g><g><title>libsystem_m.dylib`sin (49 samples, 0.49%)</title><rect x="92.9626%" y="229" width="0.4857%" height="15" fill="rgb(222,201,40)" fg:x="9379" fg:w="49"/><text x="93.2126%" y="239.50"></text></g><g><title>libsystem_m.dylib`tan (149 samples, 1.48%)</title><rect x="93.4483%" y="229" width="1.4769%" height="15" fill="rgb(235,61,29)" fg:x="9428" fg:w="149"/><text x="93.6983%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.03%)</title><rect x="94.9747%" y="213" width="0.0297%" height="15" fill="rgb(219,207,3)" fg:x="9582" fg:w="3"/><text x="95.2247%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="95.0045%" y="213" width="0.0297%" height="15" fill="rgb(222,56,46)" fg:x="9585" fg:w="3"/><text x="95.2545%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.13%)</title><rect x="95.1928%" y="197" width="0.1289%" height="15" fill="rgb(239,76,54)" fg:x="9604" fg:w="13"/><text x="95.4428%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (8 samples, 0.08%)</title><rect x="95.6190%" y="181" width="0.0793%" height="15" fill="rgb(231,124,27)" fg:x="9647" fg:w="8"/><text x="95.8690%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (80 samples, 0.79%)</title><rect x="94.9252%" y="229" width="0.7929%" height="15" fill="rgb(249,195,6)" fg:x="9577" fg:w="80"/><text x="95.1752%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (69 samples, 0.68%)</title><rect x="95.0342%" y="213" width="0.6839%" height="15" fill="rgb(237,174,47)" fg:x="9588" fg:w="69"/><text x="95.2842%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.40%)</title><rect x="95.3216%" y="197" width="0.3965%" height="15" fill="rgb(206,201,31)" fg:x="9617" fg:w="40"/><text x="95.5716%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="95.6983%" y="181" width="0.0198%" height="15" fill="rgb(231,57,52)" fg:x="9655" fg:w="2"/><text x="95.9483%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (1,617 samples, 16.03%)</title><rect x="79.7106%" y="245" width="16.0274%" height="15" fill="rgb(248,177,22)" fg:x="8042" fg:w="1617"/><text x="79.9606%" y="255.50">fekan`fekan::kan_layer::e..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="95.7181%" y="229" width="0.0198%" height="15" fill="rgb(215,211,37)" fg:x="9657" fg:w="2"/><text x="95.9681%" y="239.50"></text></g><g><title>libsystem_m.dylib`cbrt (28 samples, 0.28%)</title><rect x="95.7478%" y="245" width="0.2775%" height="15" fill="rgb(241,128,51)" fg:x="9660" fg:w="28"/><text x="95.9978%" y="255.50"></text></g><g><title>libsystem_m.dylib`exp (4 samples, 0.04%)</title><rect x="96.0254%" y="245" width="0.0396%" height="15" fill="rgb(227,165,31)" fg:x="9688" fg:w="4"/><text x="96.2754%" y="255.50"></text></g><g><title>libsystem_m.dylib`pow (5 samples, 0.05%)</title><rect x="96.0749%" y="245" width="0.0496%" height="15" fill="rgb(228,167,24)" fg:x="9693" fg:w="5"/><text x="96.3249%" y="255.50"></text></g><g><title>libsystem_m.dylib`sin (6 samples, 0.06%)</title><rect x="96.1245%" y="245" width="0.0595%" height="15" fill="rgb(228,143,12)" fg:x="9698" fg:w="6"/><text x="96.3745%" y="255.50"></text></g><g><title>libsystem_m.dylib`tan (25 samples, 0.25%)</title><rect x="96.1840%" y="245" width="0.2478%" height="15" fill="rgb(249,149,8)" fg:x="9704" fg:w="25"/><text x="96.4340%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (14 samples, 0.14%)</title><rect x="96.4318%" y="245" width="0.1388%" height="15" fill="rgb(243,35,44)" fg:x="9729" fg:w="14"/><text x="96.6818%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (7 samples, 0.07%)</title><rect x="96.5804%" y="245" width="0.0694%" height="15" fill="rgb(246,89,9)" fg:x="9744" fg:w="7"/><text x="96.8304%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (11 samples, 0.11%)</title><rect x="97.1950%" y="229" width="0.1090%" height="15" fill="rgb(233,213,13)" fg:x="9806" fg:w="11"/><text x="97.4450%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="97.3040%" y="229" width="0.0198%" height="15" fill="rgb(233,141,41)" fg:x="9817" fg:w="2"/><text x="97.5540%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (26 samples, 0.26%)</title><rect x="98.5628%" y="213" width="0.2577%" height="15" fill="rgb(239,167,4)" fg:x="9944" fg:w="26"/><text x="98.8128%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (236 samples, 2.34%)</title><rect x="96.6498%" y="245" width="2.3392%" height="15" fill="rgb(209,217,16)" fg:x="9751" fg:w="236"/><text x="96.8998%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (167 samples, 1.66%)</title><rect x="97.3337%" y="229" width="1.6553%" height="15" fill="rgb(219,88,35)" fg:x="9820" fg:w="167"/><text x="97.5837%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (17 samples, 0.17%)</title><rect x="98.8205%" y="213" width="0.1685%" height="15" fill="rgb(220,193,23)" fg:x="9970" fg:w="17"/><text x="99.0705%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.02%)</title><rect x="98.9890%" y="245" width="0.0198%" height="15" fill="rgb(230,90,52)" fg:x="9987" fg:w="2"/><text x="99.2390%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="99.0088%" y="245" width="0.0297%" height="15" fill="rgb(252,106,19)" fg:x="9989" fg:w="3"/><text x="99.2588%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="99.0386%" y="245" width="0.0297%" height="15" fill="rgb(206,74,20)" fg:x="9992" fg:w="3"/><text x="99.2886%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.10%)</title><rect x="99.0683%" y="245" width="0.0991%" height="15" fill="rgb(230,138,44)" fg:x="9995" fg:w="10"/><text x="99.3183%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::parameter_search (2,728 samples, 27.04%)</title><rect x="72.3759%" y="261" width="27.0393%" height="15" fill="rgb(235,182,43)" fg:x="7302" fg:w="2728"/><text x="72.6259%" y="271.50">fekan`fekan::kan_layer::edge::Edge::paramet..</text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.25%)</title><rect x="99.1674%" y="245" width="0.2478%" height="15" fill="rgb(242,16,51)" fg:x="10005" fg:w="25"/><text x="99.4174%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (15 samples, 0.15%)</title><rect x="99.4251%" y="261" width="0.1487%" height="15" fill="rgb(248,9,4)" fg:x="10031" fg:w="15"/><text x="99.6751%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="99.5738%" y="261" width="0.0198%" height="15" fill="rgb(210,31,22)" fg:x="10046" fg:w="2"/><text x="99.8238%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.11%)</title><rect x="99.5936%" y="261" width="0.1090%" height="15" fill="rgb(239,54,39)" fg:x="10048" fg:w="11"/><text x="99.8436%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.05%)</title><rect x="99.7026%" y="261" width="0.0496%" height="15" fill="rgb(230,99,41)" fg:x="10059" fg:w="5"/><text x="99.9526%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.08%)</title><rect x="99.7522%" y="261" width="0.0793%" height="15" fill="rgb(253,106,12)" fg:x="10064" fg:w="8"/><text x="100.0022%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.07%)</title><rect x="99.8414%" y="261" width="0.0694%" height="15" fill="rgb(213,46,41)" fg:x="10073" fg:w="7"/><text x="100.0914%" y="271.50"></text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (5,937 samples, 58.85%)</title><rect x="41.0744%" y="277" width="58.8463%" height="15" fill="rgb(215,133,35)" fg:x="4144" fg:w="5937"/><text x="41.3244%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`_free (6 samples, 0.06%)</title><rect x="99.9207%" y="277" width="0.0595%" height="15" fill="rgb(213,28,5)" fg:x="10081" fg:w="6"/><text x="100.1707%" y="287.50"></text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (5,945 samples, 58.93%)</title><rect x="41.0645%" y="293" width="58.9256%" height="15" fill="rgb(215,77,49)" fg:x="4143" fg:w="5945"/><text x="41.3145%" y="303.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>all (10,089 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="10089"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5,948 samples, 58.96%)</title><rect x="41.0447%" y="341" width="58.9553%" height="15" fill="rgb(208,67,9)" fg:x="4141" fg:w="5948"/><text x="41.2947%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (5,946 samples, 58.94%)</title><rect x="41.0645%" y="325" width="58.9355%" height="15" fill="rgb(219,133,21)" fg:x="4143" fg:w="5946"/><text x="41.3145%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (5,946 samples, 58.94%)</title><rect x="41.0645%" y="309" width="58.9355%" height="15" fill="rgb(246,46,29)" fg:x="4143" fg:w="5946"/><text x="41.3145%" y="319.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g></svg></svg>