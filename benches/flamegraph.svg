<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="23278"><g><title>fekan`__rdl_alloc (4 samples, 0.02%)</title><rect x="0.0086%" y="245" width="0.0172%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="4"/><text x="0.2586%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (6 samples, 0.03%)</title><rect x="0.0301%" y="245" width="0.0258%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="6"/><text x="0.2801%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (3 samples, 0.01%)</title><rect x="0.0558%" y="245" width="0.0129%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="3"/><text x="0.3058%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (3 samples, 0.01%)</title><rect x="0.0687%" y="245" width="0.0129%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="3"/><text x="0.3187%" y="255.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (138 samples, 0.59%)</title><rect x="0.1589%" y="85" width="0.5928%" height="15" fill="rgb(208,68,35)" fg:x="37" fg:w="138"/><text x="0.4089%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 0.59%)</title><rect x="0.1632%" y="69" width="0.5885%" height="15" fill="rgb(232,128,0)" fg:x="38" fg:w="137"/><text x="0.4132%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (137 samples, 0.59%)</title><rect x="0.1632%" y="53" width="0.5885%" height="15" fill="rgb(207,160,47)" fg:x="38" fg:w="137"/><text x="0.4132%" y="63.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="0.7518%" y="69" width="0.0172%" height="15" fill="rgb(228,23,34)" fg:x="175" fg:w="4"/><text x="1.0018%" y="79.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (7 samples, 0.03%)</title><rect x="0.8119%" y="37" width="0.0301%" height="15" fill="rgb(218,30,26)" fg:x="189" fg:w="7"/><text x="1.0619%" y="47.50"></text></g><g><title>fekan`DYLD-STUB$$read (4 samples, 0.02%)</title><rect x="0.8420%" y="37" width="0.0172%" height="15" fill="rgb(220,122,19)" fg:x="196" fg:w="4"/><text x="1.0920%" y="47.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,509 samples, 10.78%)</title><rect x="0.1504%" y="101" width="10.7784%" height="15" fill="rgb(250,228,42)" fg:x="35" fg:w="2509"/><text x="0.4004%" y="111.50">fekan`&lt;core::mar..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (2,369 samples, 10.18%)</title><rect x="0.7518%" y="85" width="10.1770%" height="15" fill="rgb(240,193,28)" fg:x="175" fg:w="2369"/><text x="1.0018%" y="95.50">fekan`serde_jso..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (2,365 samples, 10.16%)</title><rect x="0.7690%" y="69" width="10.1598%" height="15" fill="rgb(216,20,37)" fg:x="179" fg:w="2365"/><text x="1.0190%" y="79.50">fekan`serde_jso..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,356 samples, 10.12%)</title><rect x="0.8076%" y="53" width="10.1211%" height="15" fill="rgb(206,188,39)" fg:x="188" fg:w="2356"/><text x="1.0576%" y="63.50">fekan`&lt;std::io:..</text></g><g><title>libsystem_kernel.dylib`read (2,344 samples, 10.07%)</title><rect x="0.8592%" y="37" width="10.0696%" height="15" fill="rgb(217,207,13)" fg:x="200" fg:w="2344"/><text x="1.1092%" y="47.50">libsystem_kerne..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,709 samples, 11.64%)</title><rect x="0.1418%" y="117" width="11.6376%" height="15" fill="rgb(231,73,38)" fg:x="33" fg:w="2709"/><text x="0.3918%" y="127.50">fekan`&lt;serde_json..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (198 samples, 0.85%)</title><rect x="10.9288%" y="101" width="0.8506%" height="15" fill="rgb(225,20,46)" fg:x="2544" fg:w="198"/><text x="11.1788%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (197 samples, 0.85%)</title><rect x="10.9331%" y="85" width="0.8463%" height="15" fill="rgb(210,31,41)" fg:x="2545" fg:w="197"/><text x="11.1831%" y="95.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2,711 samples, 11.65%)</title><rect x="0.1375%" y="133" width="11.6462%" height="15" fill="rgb(221,200,47)" fg:x="32" fg:w="2711"/><text x="0.3875%" y="143.50">fekan`&lt;serde::de:..</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (2,847 samples, 12.23%)</title><rect x="0.1332%" y="149" width="12.2304%" height="15" fill="rgb(226,26,5)" fg:x="31" fg:w="2847"/><text x="0.3832%" y="159.50">fekan`&lt;&amp;mut serde_..</text></g><g><title>libsystem_kernel.dylib`read (134 samples, 0.58%)</title><rect x="11.7880%" y="133" width="0.5757%" height="15" fill="rgb(249,33,26)" fg:x="2744" fg:w="134"/><text x="12.0380%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 0.57%)</title><rect x="12.3765%" y="133" width="0.5714%" height="15" fill="rgb(235,183,28)" fg:x="2881" fg:w="133"/><text x="12.6265%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (131 samples, 0.56%)</title><rect x="12.3851%" y="117" width="0.5628%" height="15" fill="rgb(221,5,38)" fg:x="2883" fg:w="131"/><text x="12.6351%" y="127.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (72 samples, 0.31%)</title><rect x="12.9478%" y="133" width="0.3093%" height="15" fill="rgb(247,18,42)" fg:x="3014" fg:w="72"/><text x="13.1978%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.31%)</title><rect x="12.9478%" y="117" width="0.3093%" height="15" fill="rgb(241,131,45)" fg:x="3014" fg:w="72"/><text x="13.1978%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (72 samples, 0.31%)</title><rect x="12.9478%" y="101" width="0.3093%" height="15" fill="rgb(249,31,29)" fg:x="3014" fg:w="72"/><text x="13.1978%" y="111.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (5 samples, 0.02%)</title><rect x="13.2872%" y="85" width="0.0215%" height="15" fill="rgb(225,111,53)" fg:x="3093" fg:w="5"/><text x="13.5372%" y="95.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,407 samples, 6.04%)</title><rect x="12.3636%" y="149" width="6.0443%" height="15" fill="rgb(238,160,17)" fg:x="2878" fg:w="1407"/><text x="12.6136%" y="159.50">fekan`&lt;c..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,199 samples, 5.15%)</title><rect x="13.2572%" y="133" width="5.1508%" height="15" fill="rgb(214,148,48)" fg:x="3086" fg:w="1199"/><text x="13.5072%" y="143.50">fekan`..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,198 samples, 5.15%)</title><rect x="13.2614%" y="117" width="5.1465%" height="15" fill="rgb(232,36,49)" fg:x="3087" fg:w="1198"/><text x="13.5114%" y="127.50">fekan`..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,194 samples, 5.13%)</title><rect x="13.2786%" y="101" width="5.1293%" height="15" fill="rgb(209,103,24)" fg:x="3091" fg:w="1194"/><text x="13.5286%" y="111.50">fekan`..</text></g><g><title>libsystem_kernel.dylib`read (1,185 samples, 5.09%)</title><rect x="13.3173%" y="85" width="5.0906%" height="15" fill="rgb(229,88,8)" fg:x="3100" fg:w="1185"/><text x="13.5673%" y="95.50">libsys..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (992 samples, 4.26%)</title><rect x="18.4509%" y="133" width="4.2615%" height="15" fill="rgb(213,181,19)" fg:x="4295" fg:w="992"/><text x="18.7009%" y="143.50">fekan..</text></g><g><title>libsystem_kernel.dylib`read (982 samples, 4.22%)</title><rect x="18.4939%" y="117" width="4.2186%" height="15" fill="rgb(254,191,54)" fg:x="4305" fg:w="982"/><text x="18.7439%" y="127.50">libsy..</text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,005 samples, 4.32%)</title><rect x="18.4079%" y="149" width="4.3174%" height="15" fill="rgb(241,83,37)" fg:x="4285" fg:w="1005"/><text x="18.6579%" y="159.50">fekan..</text></g><g><title>fekan`core::str::converts::from_utf8 (3 samples, 0.01%)</title><rect x="22.7124%" y="133" width="0.0129%" height="15" fill="rgb(233,36,39)" fg:x="5287" fg:w="3"/><text x="22.9624%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (255 samples, 1.10%)</title><rect x="22.7253%" y="149" width="1.0955%" height="15" fill="rgb(226,3,54)" fg:x="5290" fg:w="255"/><text x="22.9753%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (254 samples, 1.09%)</title><rect x="22.7296%" y="133" width="1.0912%" height="15" fill="rgb(245,192,40)" fg:x="5291" fg:w="254"/><text x="22.9796%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (5,657 samples, 24.30%)</title><rect x="0.1117%" y="165" width="24.3019%" height="15" fill="rgb(238,167,29)" fg:x="26" fg:w="5657"/><text x="0.3617%" y="175.50">fekan`&lt;&amp;mut serde_json::de::Deserialize..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (137 samples, 0.59%)</title><rect x="23.8251%" y="149" width="0.5885%" height="15" fill="rgb(232,182,51)" fg:x="5546" fg:w="137"/><text x="24.0751%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (137 samples, 0.59%)</title><rect x="23.8251%" y="133" width="0.5885%" height="15" fill="rgb(231,60,39)" fg:x="5546" fg:w="137"/><text x="24.0751%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (202 samples, 0.87%)</title><rect x="24.4136%" y="165" width="0.8678%" height="15" fill="rgb(208,69,12)" fg:x="5683" fg:w="202"/><text x="24.6636%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (200 samples, 0.86%)</title><rect x="24.4222%" y="149" width="0.8592%" height="15" fill="rgb(235,93,37)" fg:x="5685" fg:w="200"/><text x="24.6722%" y="159.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (5,863 samples, 25.19%)</title><rect x="0.0988%" y="181" width="25.1869%" height="15" fill="rgb(213,116,39)" fg:x="23" fg:w="5863"/><text x="0.3488%" y="191.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as s..</text></g><g><title>fekan`fekan::load_regression_data (5,868 samples, 25.21%)</title><rect x="0.0816%" y="245" width="25.2084%" height="15" fill="rgb(222,207,29)" fg:x="19" fg:w="5868"/><text x="0.3316%" y="255.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`serde_json::de::from_trait (5,865 samples, 25.20%)</title><rect x="0.0945%" y="229" width="25.1955%" height="15" fill="rgb(206,96,30)" fg:x="22" fg:w="5865"/><text x="0.3445%" y="239.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (5,865 samples, 25.20%)</title><rect x="0.0945%" y="213" width="25.1955%" height="15" fill="rgb(218,138,4)" fg:x="22" fg:w="5865"/><text x="0.3445%" y="223.50">fekan`&lt;&amp;mut serde_json::de::Deserializer..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (5,865 samples, 25.20%)</title><rect x="0.0945%" y="197" width="25.1955%" height="15" fill="rgb(250,191,14)" fg:x="22" fg:w="5865"/><text x="0.3445%" y="207.50">fekan`&lt;serde::de::impls::&lt;impl serde::de..</text></g><g><title>fekan`&lt;fekan::TrainingProgress as fekan::training_observer::TrainingObserver&gt;::on_epoch_end (4 samples, 0.02%)</title><rect x="25.3115%" y="229" width="0.0172%" height="15" fill="rgb(239,60,40)" fg:x="5892" fg:w="4"/><text x="25.5615%" y="239.50"></text></g><g><title>fekan`chrono::offset::local::Local::now (4 samples, 0.02%)</title><rect x="25.3115%" y="213" width="0.0172%" height="15" fill="rgb(206,27,48)" fg:x="5892" fg:w="4"/><text x="25.5615%" y="223.50"></text></g><g><title>fekan`chrono::offset::local::inner::offset (4 samples, 0.02%)</title><rect x="25.3115%" y="197" width="0.0172%" height="15" fill="rgb(225,35,8)" fg:x="5892" fg:w="4"/><text x="25.5615%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$bzero (9 samples, 0.04%)</title><rect x="25.3286%" y="229" width="0.0387%" height="15" fill="rgb(250,213,24)" fg:x="5896" fg:w="9"/><text x="25.5786%" y="239.50"></text></g><g><title>fekan`DYLD-STUB$$free (18 samples, 0.08%)</title><rect x="25.3673%" y="229" width="0.0773%" height="15" fill="rgb(247,123,22)" fg:x="5905" fg:w="18"/><text x="25.6173%" y="239.50"></text></g><g><title>fekan`DYLD-STUB$$calloc (3 samples, 0.01%)</title><rect x="25.5907%" y="213" width="0.0129%" height="15" fill="rgb(231,138,38)" fg:x="5957" fg:w="3"/><text x="25.8407%" y="223.50"></text></g><g><title>fekan`__rdl_alloc_zeroed (9 samples, 0.04%)</title><rect x="25.6036%" y="213" width="0.0387%" height="15" fill="rgb(231,145,46)" fg:x="5960" fg:w="9"/><text x="25.8536%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (1,223 samples, 5.25%)</title><rect x="25.9687%" y="197" width="5.2539%" height="15" fill="rgb(251,118,11)" fg:x="6045" fg:w="1223"/><text x="26.2187%" y="207.50">fekan`..</text></g><g><title>fekan`fekan::kan_layer::spline::b (662 samples, 2.84%)</title><rect x="28.3787%" y="181" width="2.8439%" height="15" fill="rgb(217,147,25)" fg:x="6606" fg:w="662"/><text x="28.6287%" y="191.50">fe..</text></g><g><title>fekan`fekan::kan_layer::spline::b (409 samples, 1.76%)</title><rect x="31.2226%" y="197" width="1.7570%" height="15" fill="rgb(247,81,37)" fg:x="7268" fg:w="409"/><text x="31.4726%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (1,748 samples, 7.51%)</title><rect x="25.6422%" y="213" width="7.5092%" height="15" fill="rgb(209,12,38)" fg:x="5969" fg:w="1748"/><text x="25.8922%" y="223.50">fekan`feka..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (40 samples, 0.17%)</title><rect x="32.9796%" y="197" width="0.1718%" height="15" fill="rgb(227,1,9)" fg:x="7677" fg:w="40"/><text x="33.2296%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (53 samples, 0.23%)</title><rect x="33.1515%" y="213" width="0.2277%" height="15" fill="rgb(248,47,43)" fg:x="7717" fg:w="53"/><text x="33.4015%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (12 samples, 0.05%)</title><rect x="33.3792%" y="213" width="0.0516%" height="15" fill="rgb(221,10,30)" fg:x="7770" fg:w="12"/><text x="33.6292%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (1,899 samples, 8.16%)</title><rect x="25.4489%" y="229" width="8.1579%" height="15" fill="rgb(210,229,1)" fg:x="5924" fg:w="1899"/><text x="25.6989%" y="239.50">fekan`fekan..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (41 samples, 0.18%)</title><rect x="33.4307%" y="213" width="0.1761%" height="15" fill="rgb(222,148,37)" fg:x="7782" fg:w="41"/><text x="33.6807%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::clear_samples (37 samples, 0.16%)</title><rect x="33.6068%" y="229" width="0.1589%" height="15" fill="rgb(234,67,33)" fg:x="7823" fg:w="37"/><text x="33.8568%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (32 samples, 0.14%)</title><rect x="33.6283%" y="213" width="0.1375%" height="15" fill="rgb(247,98,35)" fg:x="7828" fg:w="32"/><text x="33.8783%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$calloc (4 samples, 0.02%)</title><rect x="33.7916%" y="213" width="0.0172%" height="15" fill="rgb(247,138,52)" fg:x="7866" fg:w="4"/><text x="34.0416%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (4 samples, 0.02%)</title><rect x="33.8087%" y="213" width="0.0172%" height="15" fill="rgb(213,79,30)" fg:x="7870" fg:w="4"/><text x="34.0587%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$memcpy (3 samples, 0.01%)</title><rect x="33.8259%" y="213" width="0.0129%" height="15" fill="rgb(246,177,23)" fg:x="7874" fg:w="3"/><text x="34.0759%" y="223.50"></text></g><g><title>fekan`__rdl_alloc_zeroed (5 samples, 0.02%)</title><rect x="33.8431%" y="213" width="0.0215%" height="15" fill="rgb(230,62,27)" fg:x="7878" fg:w="5"/><text x="34.0931%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (1,186 samples, 5.09%)</title><rect x="53.1360%" y="149" width="5.0949%" height="15" fill="rgb(216,154,8)" fg:x="12369" fg:w="1186"/><text x="53.3860%" y="159.50">fekan`..</text></g><g><title>fekan`fekan::kan_layer::spline::b (3,704 samples, 15.91%)</title><rect x="44.9222%" y="165" width="15.9120%" height="15" fill="rgb(244,35,45)" fg:x="10457" fg:w="3704"/><text x="45.1722%" y="175.50">fekan`fekan::kan_layer::..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (606 samples, 2.60%)</title><rect x="58.2309%" y="149" width="2.6033%" height="15" fill="rgb(251,115,12)" fg:x="13555" fg:w="606"/><text x="58.4809%" y="159.50">fe..</text></g><g><title>fekan`fekan::kan_layer::spline::b (5,936 samples, 25.50%)</title><rect x="38.7576%" y="181" width="25.5005%" height="15" fill="rgb(240,54,50)" fg:x="9022" fg:w="5936"/><text x="39.0076%" y="191.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (797 samples, 3.42%)</title><rect x="60.8343%" y="165" width="3.4238%" height="15" fill="rgb(233,84,52)" fg:x="14161" fg:w="797"/><text x="61.0843%" y="175.50">fek..</text></g><g><title>fekan`fekan::kan_layer::spline::b (7,329 samples, 31.48%)</title><rect x="35.3853%" y="197" width="31.4847%" height="15" fill="rgb(207,117,47)" fg:x="8237" fg:w="7329"/><text x="35.6353%" y="207.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (608 samples, 2.61%)</title><rect x="64.2581%" y="181" width="2.6119%" height="15" fill="rgb(249,43,39)" fg:x="14958" fg:w="608"/><text x="64.5081%" y="191.50">fe..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (180 samples, 0.77%)</title><rect x="66.8700%" y="197" width="0.7733%" height="15" fill="rgb(209,38,44)" fg:x="15566" fg:w="180"/><text x="67.1200%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (7,908 samples, 33.97%)</title><rect x="33.8646%" y="213" width="33.9720%" height="15" fill="rgb(236,212,23)" fg:x="7883" fg:w="7908"/><text x="34.1146%" y="223.50">fekan`fekan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (45 samples, 0.19%)</title><rect x="67.6433%" y="197" width="0.1933%" height="15" fill="rgb(242,79,21)" fg:x="15746" fg:w="45"/><text x="67.8933%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (220 samples, 0.95%)</title><rect x="67.8366%" y="213" width="0.9451%" height="15" fill="rgb(211,96,35)" fg:x="15791" fg:w="220"/><text x="68.0866%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (29 samples, 0.12%)</title><rect x="68.7817%" y="213" width="0.1246%" height="15" fill="rgb(253,215,40)" fg:x="16011" fg:w="29"/><text x="69.0317%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.09%)</title><rect x="68.9063%" y="213" width="0.0859%" height="15" fill="rgb(211,81,21)" fg:x="16040" fg:w="20"/><text x="69.1563%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (26 samples, 0.11%)</title><rect x="68.9922%" y="213" width="0.1117%" height="15" fill="rgb(208,190,38)" fg:x="16060" fg:w="26"/><text x="69.2422%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (10 samples, 0.04%)</title><rect x="69.1082%" y="213" width="0.0430%" height="15" fill="rgb(235,213,38)" fg:x="16087" fg:w="10"/><text x="69.3582%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (22 samples, 0.09%)</title><rect x="69.1511%" y="213" width="0.0945%" height="15" fill="rgb(237,122,38)" fg:x="16097" fg:w="22"/><text x="69.4011%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (8,264 samples, 35.50%)</title><rect x="33.7658%" y="229" width="35.5013%" height="15" fill="rgb(244,218,35)" fg:x="7860" fg:w="8264"/><text x="34.0158%" y="239.50">fekan`fekan::kan::Kan::forward</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.02%)</title><rect x="69.2456%" y="213" width="0.0215%" height="15" fill="rgb(240,68,47)" fg:x="16119" fg:w="5"/><text x="69.4956%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::update (82 samples, 0.35%)</title><rect x="69.2757%" y="229" width="0.3523%" height="15" fill="rgb(210,16,53)" fg:x="16126" fg:w="82"/><text x="69.5257%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="69.7912%" y="133" width="0.0172%" height="15" fill="rgb(235,124,12)" fg:x="16246" fg:w="4"/><text x="70.0412%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.01%)</title><rect x="69.8084%" y="133" width="0.0129%" height="15" fill="rgb(224,169,11)" fg:x="16250" fg:w="3"/><text x="70.0584%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.02%)</title><rect x="69.8213%" y="133" width="0.0172%" height="15" fill="rgb(250,166,2)" fg:x="16253" fg:w="4"/><text x="70.0713%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (13 samples, 0.06%)</title><rect x="69.7869%" y="149" width="0.0558%" height="15" fill="rgb(242,216,29)" fg:x="16245" fg:w="13"/><text x="70.0369%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (16 samples, 0.07%)</title><rect x="69.7826%" y="165" width="0.0687%" height="15" fill="rgb(230,116,27)" fg:x="16244" fg:w="16"/><text x="70.0326%" y="175.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20 samples, 0.09%)</title><rect x="69.7697%" y="197" width="0.0859%" height="15" fill="rgb(228,99,48)" fg:x="16241" fg:w="20"/><text x="70.0197%" y="207.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (17 samples, 0.07%)</title><rect x="69.7826%" y="181" width="0.0730%" height="15" fill="rgb(253,11,6)" fg:x="16244" fg:w="17"/><text x="70.0326%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (5 samples, 0.02%)</title><rect x="70.0447%" y="149" width="0.0215%" height="15" fill="rgb(247,143,39)" fg:x="16305" fg:w="5"/><text x="70.2947%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (35 samples, 0.15%)</title><rect x="70.0662%" y="149" width="0.1504%" height="15" fill="rgb(236,97,10)" fg:x="16310" fg:w="35"/><text x="70.3162%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (4 samples, 0.02%)</title><rect x="70.1993%" y="133" width="0.0172%" height="15" fill="rgb(233,208,19)" fg:x="16341" fg:w="4"/><text x="70.4493%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (4 samples, 0.02%)</title><rect x="70.1993%" y="117" width="0.0172%" height="15" fill="rgb(216,164,2)" fg:x="16341" fg:w="4"/><text x="70.4493%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (84 samples, 0.36%)</title><rect x="70.3153%" y="133" width="0.3609%" height="15" fill="rgb(220,129,5)" fg:x="16368" fg:w="84"/><text x="70.5653%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (20 samples, 0.09%)</title><rect x="70.5903%" y="117" width="0.0859%" height="15" fill="rgb(242,17,10)" fg:x="16432" fg:w="20"/><text x="70.8403%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (18 samples, 0.08%)</title><rect x="70.5988%" y="101" width="0.0773%" height="15" fill="rgb(242,107,0)" fg:x="16434" fg:w="18"/><text x="70.8488%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (45 samples, 0.19%)</title><rect x="70.6977%" y="117" width="0.1933%" height="15" fill="rgb(251,28,31)" fg:x="16457" fg:w="45"/><text x="70.9477%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (5 samples, 0.02%)</title><rect x="70.8695%" y="101" width="0.0215%" height="15" fill="rgb(233,223,10)" fg:x="16497" fg:w="5"/><text x="71.1195%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (15 samples, 0.06%)</title><rect x="70.8910%" y="101" width="0.0644%" height="15" fill="rgb(215,21,27)" fg:x="16502" fg:w="15"/><text x="71.1410%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.01%)</title><rect x="70.9425%" y="85" width="0.0129%" height="15" fill="rgb(232,23,21)" fg:x="16514" fg:w="3"/><text x="71.1925%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (175 samples, 0.75%)</title><rect x="70.2165%" y="149" width="0.7518%" height="15" fill="rgb(244,5,23)" fg:x="16345" fg:w="175"/><text x="70.4665%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (68 samples, 0.29%)</title><rect x="70.6762%" y="133" width="0.2921%" height="15" fill="rgb(226,81,46)" fg:x="16452" fg:w="68"/><text x="70.9262%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (18 samples, 0.08%)</title><rect x="70.8910%" y="117" width="0.0773%" height="15" fill="rgb(247,70,30)" fg:x="16502" fg:w="18"/><text x="71.1410%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.01%)</title><rect x="70.9554%" y="101" width="0.0129%" height="15" fill="rgb(212,68,19)" fg:x="16517" fg:w="3"/><text x="71.2054%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (251 samples, 1.08%)</title><rect x="69.9072%" y="165" width="1.0783%" height="15" fill="rgb(240,187,13)" fg:x="16273" fg:w="251"/><text x="70.1572%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.02%)</title><rect x="70.9683%" y="149" width="0.0172%" height="15" fill="rgb(223,113,26)" fg:x="16520" fg:w="4"/><text x="71.2183%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (266 samples, 1.14%)</title><rect x="69.8557%" y="197" width="1.1427%" height="15" fill="rgb(206,192,2)" fg:x="16261" fg:w="266"/><text x="70.1057%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (264 samples, 1.13%)</title><rect x="69.8642%" y="181" width="1.1341%" height="15" fill="rgb(241,108,4)" fg:x="16263" fg:w="264"/><text x="70.1142%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="70.9855%" y="165" width="0.0129%" height="15" fill="rgb(247,173,49)" fg:x="16524" fg:w="3"/><text x="71.2355%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::update_knots_from_samples (18 samples, 0.08%)</title><rect x="70.9984%" y="197" width="0.0773%" height="15" fill="rgb(224,114,35)" fg:x="16527" fg:w="18"/><text x="71.2484%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.04%)</title><rect x="71.0370%" y="181" width="0.0387%" height="15" fill="rgb(245,159,27)" fg:x="16536" fg:w="9"/><text x="71.2870%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.03%)</title><rect x="71.1144%" y="197" width="0.0301%" height="15" fill="rgb(245,172,44)" fg:x="16554" fg:w="7"/><text x="71.3644%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.03%)</title><rect x="71.1187%" y="181" width="0.0258%" height="15" fill="rgb(236,23,11)" fg:x="16555" fg:w="6"/><text x="71.3687%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="71.1315%" y="165" width="0.0129%" height="15" fill="rgb(205,117,38)" fg:x="16558" fg:w="3"/><text x="71.3815%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (365 samples, 1.57%)</title><rect x="69.6323%" y="213" width="1.5680%" height="15" fill="rgb(237,72,25)" fg:x="16209" fg:w="365"/><text x="69.8823%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.06%)</title><rect x="71.1444%" y="197" width="0.0558%" height="15" fill="rgb(244,70,9)" fg:x="16561" fg:w="13"/><text x="71.3944%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (369 samples, 1.59%)</title><rect x="69.6280%" y="229" width="1.5852%" height="15" fill="rgb(217,125,39)" fg:x="16208" fg:w="369"/><text x="69.8780%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (44 samples, 0.19%)</title><rect x="71.2132%" y="229" width="0.1890%" height="15" fill="rgb(235,36,10)" fg:x="16577" fg:w="44"/><text x="71.4632%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (7 samples, 0.03%)</title><rect x="71.4022%" y="229" width="0.0301%" height="15" fill="rgb(251,123,47)" fg:x="16621" fg:w="7"/><text x="71.6522%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (8 samples, 0.03%)</title><rect x="71.4323%" y="229" width="0.0344%" height="15" fill="rgb(221,13,13)" fg:x="16628" fg:w="8"/><text x="71.6823%" y="239.50"></text></g><g><title>fekan`DYLD-STUB$$free (19 samples, 0.08%)</title><rect x="71.4838%" y="197" width="0.0816%" height="15" fill="rgb(238,131,9)" fg:x="16640" fg:w="19"/><text x="71.7338%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (574 samples, 2.47%)</title><rect x="77.9405%" y="133" width="2.4658%" height="15" fill="rgb(211,50,8)" fg:x="18143" fg:w="574"/><text x="78.1905%" y="143.50">fe..</text></g><g><title>fekan`DYLD-STUB$$free (20 samples, 0.09%)</title><rect x="82.8293%" y="117" width="0.0859%" height="15" fill="rgb(245,182,24)" fg:x="19281" fg:w="20"/><text x="83.0793%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (15 samples, 0.06%)</title><rect x="82.9152%" y="117" width="0.0644%" height="15" fill="rgb(242,14,37)" fg:x="19301" fg:w="15"/><text x="83.1652%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$memset (15 samples, 0.06%)</title><rect x="82.9796%" y="117" width="0.0644%" height="15" fill="rgb(246,228,12)" fg:x="19316" fg:w="15"/><text x="83.2296%" y="127.50"></text></g><g><title>fekan`__rdl_alloc (35 samples, 0.15%)</title><rect x="83.0441%" y="117" width="0.1504%" height="15" fill="rgb(213,55,15)" fg:x="19331" fg:w="35"/><text x="83.2941%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (11 samples, 0.05%)</title><rect x="86.0770%" y="101" width="0.0473%" height="15" fill="rgb(209,9,3)" fg:x="20037" fg:w="11"/><text x="86.3270%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (213 samples, 0.92%)</title><rect x="86.1242%" y="101" width="0.9150%" height="15" fill="rgb(230,59,30)" fg:x="20048" fg:w="213"/><text x="86.3742%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (24 samples, 0.10%)</title><rect x="87.2197%" y="85" width="0.1031%" height="15" fill="rgb(209,121,21)" fg:x="20303" fg:w="24"/><text x="87.4697%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (29 samples, 0.12%)</title><rect x="87.3228%" y="85" width="0.1246%" height="15" fill="rgb(220,109,13)" fg:x="20327" fg:w="29"/><text x="87.5728%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.02%)</title><rect x="87.7567%" y="69" width="0.0215%" height="15" fill="rgb(232,18,1)" fg:x="20428" fg:w="5"/><text x="88.0067%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (69 samples, 0.30%)</title><rect x="87.7782%" y="69" width="0.2964%" height="15" fill="rgb(215,41,42)" fg:x="20433" fg:w="69"/><text x="88.0282%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (31 samples, 0.13%)</title><rect x="88.9080%" y="53" width="0.1332%" height="15" fill="rgb(224,123,36)" fg:x="20696" fg:w="31"/><text x="89.1580%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (531 samples, 2.28%)</title><rect x="87.0393%" y="101" width="2.2811%" height="15" fill="rgb(240,125,3)" fg:x="20261" fg:w="531"/><text x="87.2893%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (436 samples, 1.87%)</title><rect x="87.4474%" y="85" width="1.8730%" height="15" fill="rgb(205,98,50)" fg:x="20356" fg:w="436"/><text x="87.6974%" y="95.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (290 samples, 1.25%)</title><rect x="88.0746%" y="69" width="1.2458%" height="15" fill="rgb(205,185,37)" fg:x="20502" fg:w="290"/><text x="88.3246%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (65 samples, 0.28%)</title><rect x="89.0412%" y="53" width="0.2792%" height="15" fill="rgb(238,207,15)" fg:x="20727" fg:w="65"/><text x="89.2912%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.07%)</title><rect x="89.3204%" y="101" width="0.0730%" height="15" fill="rgb(213,199,42)" fg:x="20792" fg:w="17"/><text x="89.5704%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (5 samples, 0.02%)</title><rect x="89.3934%" y="101" width="0.0215%" height="15" fill="rgb(235,201,11)" fg:x="20809" fg:w="5"/><text x="89.6434%" y="111.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,466 samples, 6.30%)</title><rect x="83.1944%" y="117" width="6.2978%" height="15" fill="rgb(207,46,11)" fg:x="19366" fg:w="1466"/><text x="83.4444%" y="127.50">fekan`ha..</text></g><g><title>libsystem_platform.dylib`_platform_memset (18 samples, 0.08%)</title><rect x="89.4149%" y="101" width="0.0773%" height="15" fill="rgb(241,35,35)" fg:x="20814" fg:w="18"/><text x="89.6649%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (63 samples, 0.27%)</title><rect x="89.4922%" y="117" width="0.2706%" height="15" fill="rgb(243,32,47)" fg:x="20832" fg:w="63"/><text x="89.7422%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (96 samples, 0.41%)</title><rect x="89.7629%" y="117" width="0.4124%" height="15" fill="rgb(247,202,23)" fg:x="20895" fg:w="96"/><text x="90.0129%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 0.07%)</title><rect x="90.1753%" y="117" width="0.0687%" height="15" fill="rgb(219,102,11)" fg:x="20991" fg:w="16"/><text x="90.4253%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (111 samples, 0.48%)</title><rect x="90.2440%" y="117" width="0.4768%" height="15" fill="rgb(243,110,44)" fg:x="21007" fg:w="111"/><text x="90.4940%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.03%)</title><rect x="90.7209%" y="117" width="0.0344%" height="15" fill="rgb(222,74,54)" fg:x="21118" fg:w="8"/><text x="90.9709%" y="127.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,514 samples, 10.80%)</title><rect x="80.4064%" y="133" width="10.7999%" height="15" fill="rgb(216,99,12)" fg:x="18717" fg:w="2514"/><text x="80.6564%" y="143.50">fekan`hashbrown:..</text></g><g><title>libsystem_platform.dylib`_platform_memset (105 samples, 0.45%)</title><rect x="90.7552%" y="117" width="0.4511%" height="15" fill="rgb(226,22,26)" fg:x="21126" fg:w="105"/><text x="91.0052%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (4,095 samples, 17.59%)</title><rect x="73.7950%" y="149" width="17.5917%" height="15" fill="rgb(217,163,10)" fg:x="17178" fg:w="4095"/><text x="74.0450%" y="159.50">fekan`fekan::kan_layer::spl..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (42 samples, 0.18%)</title><rect x="91.2063%" y="133" width="0.1804%" height="15" fill="rgb(213,25,53)" fg:x="21231" fg:w="42"/><text x="91.4563%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (4,921 samples, 21.14%)</title><rect x="72.3945%" y="165" width="21.1401%" height="15" fill="rgb(252,105,26)" fg:x="16852" fg:w="4921"/><text x="72.6445%" y="175.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (500 samples, 2.15%)</title><rect x="91.3867%" y="149" width="2.1480%" height="15" fill="rgb(220,39,43)" fg:x="21273" fg:w="500"/><text x="91.6367%" y="159.50">f..</text></g><g><title>fekan`fekan::kan_layer::spline::b (5,198 samples, 22.33%)</title><rect x="71.9821%" y="181" width="22.3301%" height="15" fill="rgb(229,68,48)" fg:x="16756" fg:w="5198"/><text x="72.2321%" y="191.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (181 samples, 0.78%)</title><rect x="93.5347%" y="165" width="0.7776%" height="15" fill="rgb(252,8,32)" fg:x="21773" fg:w="181"/><text x="93.7847%" y="175.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (47 samples, 0.20%)</title><rect x="94.3122%" y="181" width="0.2019%" height="15" fill="rgb(223,20,43)" fg:x="21954" fg:w="47"/><text x="94.5622%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (12 samples, 0.05%)</title><rect x="94.5141%" y="181" width="0.0516%" height="15" fill="rgb(229,81,49)" fg:x="22001" fg:w="12"/><text x="94.7641%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.06%)</title><rect x="94.5657%" y="181" width="0.0558%" height="15" fill="rgb(236,28,36)" fg:x="22013" fg:w="13"/><text x="94.8157%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (41 samples, 0.18%)</title><rect x="94.6215%" y="181" width="0.1761%" height="15" fill="rgb(249,185,26)" fg:x="22026" fg:w="41"/><text x="94.8715%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (43 samples, 0.18%)</title><rect x="95.3518%" y="165" width="0.1847%" height="15" fill="rgb(249,174,33)" fg:x="22196" fg:w="43"/><text x="95.6018%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (85 samples, 0.37%)</title><rect x="96.5117%" y="149" width="0.3652%" height="15" fill="rgb(233,201,37)" fg:x="22466" fg:w="85"/><text x="96.7617%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (537 samples, 2.31%)</title><rect x="94.7977%" y="181" width="2.3069%" height="15" fill="rgb(221,78,26)" fg:x="22067" fg:w="537"/><text x="95.0477%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (365 samples, 1.57%)</title><rect x="95.5366%" y="165" width="1.5680%" height="15" fill="rgb(250,127,30)" fg:x="22239" fg:w="365"/><text x="95.7866%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (53 samples, 0.23%)</title><rect x="96.8769%" y="149" width="0.2277%" height="15" fill="rgb(230,49,44)" fg:x="22551" fg:w="53"/><text x="97.1269%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (9 samples, 0.04%)</title><rect x="97.1046%" y="181" width="0.0387%" height="15" fill="rgb(229,67,23)" fg:x="22604" fg:w="9"/><text x="97.3546%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (36 samples, 0.15%)</title><rect x="97.1432%" y="181" width="0.1547%" height="15" fill="rgb(249,83,47)" fg:x="22613" fg:w="36"/><text x="97.3932%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (6,050 samples, 25.99%)</title><rect x="71.5654%" y="197" width="25.9902%" height="15" fill="rgb(215,43,3)" fg:x="16659" fg:w="6050"/><text x="71.8154%" y="207.50">fekan`fekan::kan_layer::KanLayer::infer</text></g><g><title>libsystem_platform.dylib`_platform_memset (60 samples, 0.26%)</title><rect x="97.2979%" y="181" width="0.2578%" height="15" fill="rgb(238,154,13)" fg:x="22649" fg:w="60"/><text x="97.5479%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (41 samples, 0.18%)</title><rect x="97.5556%" y="197" width="0.1761%" height="15" fill="rgb(219,56,2)" fg:x="22709" fg:w="41"/><text x="97.8056%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (68 samples, 0.29%)</title><rect x="97.7318%" y="197" width="0.2921%" height="15" fill="rgb(233,0,4)" fg:x="22750" fg:w="68"/><text x="97.9818%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (42 samples, 0.18%)</title><rect x="98.0325%" y="197" width="0.1804%" height="15" fill="rgb(235,30,7)" fg:x="22820" fg:w="42"/><text x="98.2825%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (30 samples, 0.13%)</title><rect x="98.2129%" y="197" width="0.1289%" height="15" fill="rgb(250,79,13)" fg:x="22862" fg:w="30"/><text x="98.4629%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.09%)</title><rect x="98.3418%" y="197" width="0.0859%" height="15" fill="rgb(211,146,34)" fg:x="22892" fg:w="20"/><text x="98.5918%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (6,279 samples, 26.97%)</title><rect x="71.4666%" y="213" width="26.9740%" height="15" fill="rgb(228,22,38)" fg:x="16636" fg:w="6279"/><text x="71.7166%" y="223.50">fekan`fekan::kan::Kan::infer</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.01%)</title><rect x="98.4277%" y="197" width="0.0129%" height="15" fill="rgb(235,168,5)" fg:x="22912" fg:w="3"/><text x="98.6777%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (4 samples, 0.02%)</title><rect x="98.4406%" y="213" width="0.0172%" height="15" fill="rgb(221,155,16)" fg:x="22915" fg:w="4"/><text x="98.6906%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (12 samples, 0.05%)</title><rect x="98.4707%" y="181" width="0.0516%" height="15" fill="rgb(215,215,53)" fg:x="22922" fg:w="12"/><text x="98.7207%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (12 samples, 0.05%)</title><rect x="98.4707%" y="165" width="0.0516%" height="15" fill="rgb(223,4,10)" fg:x="22922" fg:w="12"/><text x="98.7207%" y="175.50"></text></g><g><title>fekan`std::sys::pal::unix::time::Timespec::now (14 samples, 0.06%)</title><rect x="98.4664%" y="197" width="0.0601%" height="15" fill="rgb(234,103,6)" fg:x="22921" fg:w="14"/><text x="98.7164%" y="207.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::inc (18 samples, 0.08%)</title><rect x="98.4578%" y="213" width="0.0773%" height="15" fill="rgb(227,97,0)" fg:x="22919" fg:w="18"/><text x="98.7078%" y="223.50"></text></g><g><title>libsystem_c.dylib`isatty (3 samples, 0.01%)</title><rect x="98.5437%" y="133" width="0.0129%" height="15" fill="rgb(234,150,53)" fg:x="22939" fg:w="3"/><text x="98.7937%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (3 samples, 0.01%)</title><rect x="98.5437%" y="117" width="0.0129%" height="15" fill="rgb(228,201,54)" fg:x="22939" fg:w="3"/><text x="98.7937%" y="127.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (8 samples, 0.03%)</title><rect x="98.5351%" y="213" width="0.0344%" height="15" fill="rgb(222,22,37)" fg:x="22937" fg:w="8"/><text x="98.7851%" y="223.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (8 samples, 0.03%)</title><rect x="98.5351%" y="197" width="0.0344%" height="15" fill="rgb(237,53,32)" fg:x="22937" fg:w="8"/><text x="98.7851%" y="207.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (8 samples, 0.03%)</title><rect x="98.5351%" y="181" width="0.0344%" height="15" fill="rgb(233,25,53)" fg:x="22937" fg:w="8"/><text x="98.7851%" y="191.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (6 samples, 0.03%)</title><rect x="98.5437%" y="165" width="0.0258%" height="15" fill="rgb(210,40,34)" fg:x="22939" fg:w="6"/><text x="98.7937%" y="175.50"></text></g><g><title>fekan`console::unix_term::terminal_size (6 samples, 0.03%)</title><rect x="98.5437%" y="149" width="0.0258%" height="15" fill="rgb(241,220,44)" fg:x="22939" fg:w="6"/><text x="98.7937%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (3 samples, 0.01%)</title><rect x="98.5566%" y="133" width="0.0129%" height="15" fill="rgb(235,28,35)" fg:x="22942" fg:w="3"/><text x="98.8066%" y="143.50"></text></g><g><title>fekan`fekan::validate_model (6,312 samples, 27.12%)</title><rect x="71.4666%" y="229" width="27.1157%" height="15" fill="rgb(210,56,17)" fg:x="16636" fg:w="6312"/><text x="71.7166%" y="239.50">fekan`fekan::validate_model</text></g><g><title>fekan`DYLD-STUB$$clock_gettime (5 samples, 0.02%)</title><rect x="98.6124%" y="213" width="0.0215%" height="15" fill="rgb(224,130,29)" fg:x="22955" fg:w="5"/><text x="98.8624%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (8 samples, 0.03%)</title><rect x="98.6511%" y="181" width="0.0344%" height="15" fill="rgb(235,212,8)" fg:x="22964" fg:w="8"/><text x="98.9011%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (50 samples, 0.21%)</title><rect x="98.6855%" y="181" width="0.2148%" height="15" fill="rgb(223,33,50)" fg:x="22972" fg:w="50"/><text x="98.9355%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (63 samples, 0.27%)</title><rect x="98.6339%" y="197" width="0.2706%" height="15" fill="rgb(219,149,13)" fg:x="22960" fg:w="63"/><text x="98.8839%" y="207.50"></text></g><g><title>fekan`std::sys::pal::unix::time::Timespec::now (68 samples, 0.29%)</title><rect x="98.6339%" y="213" width="0.2921%" height="15" fill="rgb(250,156,29)" fg:x="22960" fg:w="68"/><text x="98.8839%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (5 samples, 0.02%)</title><rect x="98.9045%" y="197" width="0.0215%" height="15" fill="rgb(216,193,19)" fg:x="23023" fg:w="5"/><text x="99.1545%" y="207.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::inc (86 samples, 0.37%)</title><rect x="98.5824%" y="229" width="0.3694%" height="15" fill="rgb(216,135,14)" fg:x="22948" fg:w="86"/><text x="98.8324%" y="239.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (3 samples, 0.01%)</title><rect x="98.9389%" y="213" width="0.0129%" height="15" fill="rgb(241,47,5)" fg:x="23031" fg:w="3"/><text x="99.1889%" y="223.50"></text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (3 samples, 0.01%)</title><rect x="98.9518%" y="181" width="0.0129%" height="15" fill="rgb(233,42,35)" fg:x="23034" fg:w="3"/><text x="99.2018%" y="191.50"></text></g><g><title>libsystem_c.dylib`isatty (6 samples, 0.03%)</title><rect x="98.9647%" y="149" width="0.0258%" height="15" fill="rgb(231,13,6)" fg:x="23037" fg:w="6"/><text x="99.2147%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (5 samples, 0.02%)</title><rect x="98.9690%" y="133" width="0.0215%" height="15" fill="rgb(207,181,40)" fg:x="23038" fg:w="5"/><text x="99.2190%" y="143.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (17 samples, 0.07%)</title><rect x="98.9518%" y="229" width="0.0730%" height="15" fill="rgb(254,173,49)" fg:x="23034" fg:w="17"/><text x="99.2018%" y="239.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (17 samples, 0.07%)</title><rect x="98.9518%" y="213" width="0.0730%" height="15" fill="rgb(221,1,38)" fg:x="23034" fg:w="17"/><text x="99.2018%" y="223.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (17 samples, 0.07%)</title><rect x="98.9518%" y="197" width="0.0730%" height="15" fill="rgb(206,124,46)" fg:x="23034" fg:w="17"/><text x="99.2018%" y="207.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (14 samples, 0.06%)</title><rect x="98.9647%" y="181" width="0.0601%" height="15" fill="rgb(249,21,11)" fg:x="23037" fg:w="14"/><text x="99.2147%" y="191.50"></text></g><g><title>fekan`console::unix_term::terminal_size (14 samples, 0.06%)</title><rect x="98.9647%" y="165" width="0.0601%" height="15" fill="rgb(222,201,40)" fg:x="23037" fg:w="14"/><text x="99.2147%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (8 samples, 0.03%)</title><rect x="98.9905%" y="149" width="0.0344%" height="15" fill="rgb(235,61,29)" fg:x="23043" fg:w="8"/><text x="99.2405%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (65 samples, 0.28%)</title><rect x="99.0248%" y="229" width="0.2792%" height="15" fill="rgb(219,207,3)" fg:x="23051" fg:w="65"/><text x="99.2748%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (39 samples, 0.17%)</title><rect x="99.3041%" y="229" width="0.1675%" height="15" fill="rgb(222,56,46)" fg:x="23116" fg:w="39"/><text x="99.5541%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.03%)</title><rect x="99.4759%" y="229" width="0.0344%" height="15" fill="rgb(239,76,54)" fg:x="23156" fg:w="8"/><text x="99.7259%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (16 samples, 0.07%)</title><rect x="99.5103%" y="229" width="0.0687%" height="15" fill="rgb(231,124,27)" fg:x="23164" fg:w="16"/><text x="99.7603%" y="239.50"></text></g><g><title>fekan`fekan::train_model (17,354 samples, 74.55%)</title><rect x="25.2900%" y="245" width="74.5511%" height="15" fill="rgb(249,195,6)" fg:x="5887" fg:w="17354"/><text x="25.5400%" y="255.50">fekan`fekan::train_model</text></g><g><title>libsystem_platform.dylib`_platform_memset (60 samples, 0.26%)</title><rect x="99.5833%" y="229" width="0.2578%" height="15" fill="rgb(237,174,47)" fg:x="23181" fg:w="60"/><text x="99.8333%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (6 samples, 0.03%)</title><rect x="99.8453%" y="245" width="0.0258%" height="15" fill="rgb(206,201,31)" fg:x="23242" fg:w="6"/><text x="100.0953%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.05%)</title><rect x="99.8711%" y="245" width="0.0473%" height="15" fill="rgb(231,57,52)" fg:x="23248" fg:w="11"/><text x="100.1211%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.02%)</title><rect x="99.9184%" y="245" width="0.0172%" height="15" fill="rgb(248,177,22)" fg:x="23259" fg:w="4"/><text x="100.1684%" y="255.50"></text></g><g><title>dyld`start (23,277 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9957%" height="15" fill="rgb(215,211,37)" fg:x="0" fg:w="23277"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>fekan`main (23,277 samples, 100.00%)</title><rect x="0.0000%" y="325" width="99.9957%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="23277"/><text x="0.2500%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (23,277 samples, 100.00%)</title><rect x="0.0000%" y="309" width="99.9957%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="23277"/><text x="0.2500%" y="319.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (23,277 samples, 100.00%)</title><rect x="0.0000%" y="293" width="99.9957%" height="15" fill="rgb(228,167,24)" fg:x="0" fg:w="23277"/><text x="0.2500%" y="303.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (23,277 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9957%" height="15" fill="rgb(228,143,12)" fg:x="0" fg:w="23277"/><text x="0.2500%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (23,277 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9957%" height="15" fill="rgb(249,149,8)" fg:x="0" fg:w="23277"/><text x="0.2500%" y="271.50">fekan`fekan::main</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.06%)</title><rect x="99.9356%" y="245" width="0.0601%" height="15" fill="rgb(243,35,44)" fg:x="23263" fg:w="14"/><text x="100.1856%" y="255.50"></text></g><g><title>all (23,278 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(246,89,9)" fg:x="0" fg:w="23278"/><text x="0.2500%" y="367.50"></text></g></svg></svg>