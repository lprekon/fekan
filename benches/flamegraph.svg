<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="23366"><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (83 samples, 0.36%)</title><rect x="0.0514%" y="85" width="0.3552%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="83"/><text x="0.3014%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (82 samples, 0.35%)</title><rect x="0.0556%" y="69" width="0.3509%" height="15" fill="rgb(217,0,24)" fg:x="13" fg:w="82"/><text x="0.3056%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (82 samples, 0.35%)</title><rect x="0.0556%" y="53" width="0.3509%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="82"/><text x="0.3056%" y="63.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.02%)</title><rect x="0.4451%" y="37" width="0.0171%" height="15" fill="rgb(248,212,6)" fg:x="104" fg:w="4"/><text x="0.6951%" y="47.50"></text></g><g><title>fekan`DYLD-STUB$$read (7 samples, 0.03%)</title><rect x="0.4622%" y="37" width="0.0300%" height="15" fill="rgb(208,68,35)" fg:x="108" fg:w="7"/><text x="0.7122%" y="47.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,471 samples, 6.30%)</title><rect x="0.0514%" y="101" width="6.2955%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="1471"/><text x="0.3014%" y="111.50">fekan`&lt;c..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,388 samples, 5.94%)</title><rect x="0.4066%" y="85" width="5.9403%" height="15" fill="rgb(207,160,47)" fg:x="95" fg:w="1388"/><text x="0.6566%" y="95.50">fekan`se..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,387 samples, 5.94%)</title><rect x="0.4109%" y="69" width="5.9360%" height="15" fill="rgb(228,23,34)" fg:x="96" fg:w="1387"/><text x="0.6609%" y="79.50">fekan`se..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,383 samples, 5.92%)</title><rect x="0.4280%" y="53" width="5.9189%" height="15" fill="rgb(218,30,26)" fg:x="100" fg:w="1383"/><text x="0.6780%" y="63.50">fekan`&lt;s..</text></g><g><title>libsystem_kernel.dylib`read (1,368 samples, 5.85%)</title><rect x="0.4922%" y="37" width="5.8547%" height="15" fill="rgb(220,122,19)" fg:x="115" fg:w="1368"/><text x="0.7422%" y="47.50">libsyst..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,591 samples, 6.81%)</title><rect x="0.0514%" y="117" width="6.8090%" height="15" fill="rgb(250,228,42)" fg:x="12" fg:w="1591"/><text x="0.3014%" y="127.50">fekan`&lt;se..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 0.51%)</title><rect x="6.3468%" y="101" width="0.5136%" height="15" fill="rgb(240,193,28)" fg:x="1483" fg:w="120"/><text x="6.5968%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (120 samples, 0.51%)</title><rect x="6.3468%" y="85" width="0.5136%" height="15" fill="rgb(216,20,37)" fg:x="1483" fg:w="120"/><text x="6.5968%" y="95.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,596 samples, 6.83%)</title><rect x="0.0471%" y="133" width="6.8304%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1596"/><text x="0.2971%" y="143.50">fekan`&lt;se..</text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.01%)</title><rect x="6.8647%" y="117" width="0.0128%" height="15" fill="rgb(217,207,13)" fg:x="1604" fg:w="3"/><text x="7.1147%" y="127.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,700 samples, 7.28%)</title><rect x="0.0428%" y="149" width="7.2755%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="1700"/><text x="0.2928%" y="159.50">fekan`&lt;&amp;mu..</text></g><g><title>libsystem_kernel.dylib`read (100 samples, 0.43%)</title><rect x="6.8904%" y="133" width="0.4280%" height="15" fill="rgb(225,20,46)" fg:x="1610" fg:w="100"/><text x="7.1404%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (72 samples, 0.31%)</title><rect x="7.3226%" y="133" width="0.3081%" height="15" fill="rgb(210,31,41)" fg:x="1711" fg:w="72"/><text x="7.5726%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (71 samples, 0.30%)</title><rect x="7.3269%" y="117" width="0.3039%" height="15" fill="rgb(221,200,47)" fg:x="1712" fg:w="71"/><text x="7.5769%" y="127.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (59 samples, 0.25%)</title><rect x="7.6307%" y="133" width="0.2525%" height="15" fill="rgb(226,26,5)" fg:x="1783" fg:w="59"/><text x="7.8807%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.25%)</title><rect x="7.6307%" y="117" width="0.2525%" height="15" fill="rgb(249,33,26)" fg:x="1783" fg:w="59"/><text x="7.8807%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (57 samples, 0.24%)</title><rect x="7.6393%" y="101" width="0.2439%" height="15" fill="rgb(235,183,28)" fg:x="1785" fg:w="57"/><text x="7.8893%" y="111.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (835 samples, 3.57%)</title><rect x="7.3183%" y="149" width="3.5736%" height="15" fill="rgb(221,5,38)" fg:x="1710" fg:w="835"/><text x="7.5683%" y="159.50">feka..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (703 samples, 3.01%)</title><rect x="7.8832%" y="133" width="3.0086%" height="15" fill="rgb(247,18,42)" fg:x="1842" fg:w="703"/><text x="8.1332%" y="143.50">fek..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (702 samples, 3.00%)</title><rect x="7.8875%" y="117" width="3.0044%" height="15" fill="rgb(241,131,45)" fg:x="1843" fg:w="702"/><text x="8.1375%" y="127.50">fek..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (701 samples, 3.00%)</title><rect x="7.8918%" y="101" width="3.0001%" height="15" fill="rgb(249,31,29)" fg:x="1844" fg:w="701"/><text x="8.1418%" y="111.50">fek..</text></g><g><title>libsystem_kernel.dylib`read (695 samples, 2.97%)</title><rect x="7.9175%" y="85" width="2.9744%" height="15" fill="rgb(225,111,53)" fg:x="1850" fg:w="695"/><text x="8.1675%" y="95.50">lib..</text></g><g><title>fekan`DYLD-STUB$$read (3 samples, 0.01%)</title><rect x="10.9347%" y="117" width="0.0128%" height="15" fill="rgb(238,160,17)" fg:x="2555" fg:w="3"/><text x="11.1847%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (634 samples, 2.71%)</title><rect x="10.9133%" y="133" width="2.7133%" height="15" fill="rgb(214,148,48)" fg:x="2550" fg:w="634"/><text x="11.1633%" y="143.50">fe..</text></g><g><title>libsystem_kernel.dylib`read (626 samples, 2.68%)</title><rect x="10.9475%" y="117" width="2.6791%" height="15" fill="rgb(232,36,49)" fg:x="2558" fg:w="626"/><text x="11.1975%" y="127.50">li..</text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (640 samples, 2.74%)</title><rect x="10.8919%" y="149" width="2.7390%" height="15" fill="rgb(209,103,24)" fg:x="2545" fg:w="640"/><text x="11.1419%" y="159.50">fe..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 0.75%)</title><rect x="13.6309%" y="149" width="0.7490%" height="15" fill="rgb(229,88,8)" fg:x="3185" fg:w="175"/><text x="13.8809%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (171 samples, 0.73%)</title><rect x="13.6480%" y="133" width="0.7318%" height="15" fill="rgb(213,181,19)" fg:x="3189" fg:w="171"/><text x="13.8980%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,435 samples, 14.70%)</title><rect x="0.0385%" y="165" width="14.7008%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="3435"/><text x="0.2885%" y="175.50">fekan`&lt;&amp;mut serde_json..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (84 samples, 0.36%)</title><rect x="14.3799%" y="149" width="0.3595%" height="15" fill="rgb(241,83,37)" fg:x="3360" fg:w="84"/><text x="14.6299%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (84 samples, 0.36%)</title><rect x="14.3799%" y="133" width="0.3595%" height="15" fill="rgb(233,36,39)" fg:x="3360" fg:w="84"/><text x="14.6299%" y="143.50"></text></g><g><title>fekan`fekan::load_regression_data (3,576 samples, 15.30%)</title><rect x="0.0214%" y="245" width="15.3043%" height="15" fill="rgb(226,3,54)" fg:x="5" fg:w="3576"/><text x="0.2714%" y="255.50">fekan`fekan::load_regre..</text></g><g><title>fekan`serde_json::de::from_trait (3,574 samples, 15.30%)</title><rect x="0.0300%" y="229" width="15.2957%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="3574"/><text x="0.2800%" y="239.50">fekan`serde_json::de::f..</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,574 samples, 15.30%)</title><rect x="0.0300%" y="213" width="15.2957%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="3574"/><text x="0.2800%" y="223.50">fekan`&lt;&amp;mut serde_json:..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,574 samples, 15.30%)</title><rect x="0.0300%" y="197" width="15.2957%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="3574"/><text x="0.2800%" y="207.50">fekan`&lt;serde::de::impls..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,572 samples, 15.29%)</title><rect x="0.0385%" y="181" width="15.2872%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="3572"/><text x="0.2885%" y="191.50">fekan`&lt;serde_json::de::..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 0.59%)</title><rect x="14.7394%" y="165" width="0.5863%" height="15" fill="rgb(208,69,12)" fg:x="3444" fg:w="137"/><text x="14.9894%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (134 samples, 0.57%)</title><rect x="14.7522%" y="149" width="0.5735%" height="15" fill="rgb(235,93,37)" fg:x="3447" fg:w="134"/><text x="15.0022%" y="159.50"></text></g><g><title>fekan`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (13 samples, 0.06%)</title><rect x="15.3556%" y="229" width="0.0556%" height="15" fill="rgb(213,116,39)" fg:x="3588" fg:w="13"/><text x="15.6056%" y="239.50"></text></g><g><title>fekan`DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="15.4113%" y="229" width="0.0128%" height="15" fill="rgb(222,207,29)" fg:x="3601" fg:w="3"/><text x="15.6613%" y="239.50"></text></g><g><title>fekan`__rdl_dealloc (3 samples, 0.01%)</title><rect x="15.4798%" y="213" width="0.0128%" height="15" fill="rgb(206,96,30)" fg:x="3617" fg:w="3"/><text x="15.7298%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_lock (4 samples, 0.02%)</title><rect x="15.5996%" y="181" width="0.0171%" height="15" fill="rgb(218,138,4)" fg:x="3645" fg:w="4"/><text x="15.8496%" y="191.50"></text></g><g><title>fekan`crossbeam_deque::deque::Injector&lt;T&gt;::push (3 samples, 0.01%)</title><rect x="15.6167%" y="181" width="0.0128%" height="15" fill="rgb(250,191,14)" fg:x="3649" fg:w="3"/><text x="15.8667%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,097 samples, 8.97%)</title><rect x="15.7494%" y="149" width="8.9746%" height="15" fill="rgb(239,60,40)" fg:x="3680" fg:w="2097"/><text x="15.9994%" y="159.50">libsystem_ker..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (174 samples, 0.74%)</title><rect x="24.7753%" y="133" width="0.7447%" height="15" fill="rgb(206,27,48)" fg:x="5789" fg:w="174"/><text x="25.0253%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (52 samples, 0.22%)</title><rect x="25.5200%" y="133" width="0.2225%" height="15" fill="rgb(225,35,8)" fg:x="5963" fg:w="52"/><text x="25.7700%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (52 samples, 0.22%)</title><rect x="25.5200%" y="117" width="0.2225%" height="15" fill="rgb(250,213,24)" fg:x="5963" fg:w="52"/><text x="25.7700%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (11 samples, 0.05%)</title><rect x="25.7511%" y="133" width="0.0471%" height="15" fill="rgb(247,123,22)" fg:x="6017" fg:w="11"/><text x="26.0011%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (254 samples, 1.09%)</title><rect x="24.7282%" y="149" width="1.0870%" height="15" fill="rgb(231,138,38)" fg:x="5778" fg:w="254"/><text x="24.9782%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (4 samples, 0.02%)</title><rect x="25.7982%" y="133" width="0.0171%" height="15" fill="rgb(231,145,46)" fg:x="6028" fg:w="4"/><text x="26.0482%" y="143.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (2,374 samples, 10.16%)</title><rect x="15.6681%" y="165" width="10.1601%" height="15" fill="rgb(251,118,11)" fg:x="3661" fg:w="2374"/><text x="15.9181%" y="175.50">fekan`std::sync..</text></g><g><title>fekan`rayon_core::latch::LockLatch::wait_and_reset (2,387 samples, 10.22%)</title><rect x="15.6295%" y="181" width="10.2157%" height="15" fill="rgb(217,147,25)" fg:x="3652" fg:w="2387"/><text x="15.8795%" y="191.50">fekan`rayon_cor..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.02%)</title><rect x="25.8281%" y="165" width="0.0171%" height="15" fill="rgb(247,81,37)" fg:x="6035" fg:w="4"/><text x="26.0781%" y="175.50"></text></g><g><title>fekan`rayon_core::registry::Registry::inject (12 samples, 0.05%)</title><rect x="25.8452%" y="181" width="0.0514%" height="15" fill="rgb(209,12,38)" fg:x="6039" fg:w="12"/><text x="26.0952%" y="191.50"></text></g><g><title>fekan`crossbeam_deque::deque::Injector&lt;T&gt;::push (12 samples, 0.05%)</title><rect x="25.8452%" y="165" width="0.0514%" height="15" fill="rgb(227,1,9)" fg:x="6039" fg:w="12"/><text x="26.0952%" y="175.50"></text></g><g><title>fekan`rayon_core::registry::Registry::in_worker_cold (2,421 samples, 10.36%)</title><rect x="15.5525%" y="197" width="10.3612%" height="15" fill="rgb(248,47,43)" fg:x="3634" fg:w="2421"/><text x="15.8025%" y="207.50">fekan`rayon_cor..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.01%)</title><rect x="25.9009%" y="181" width="0.0128%" height="15" fill="rgb(221,10,30)" fg:x="6052" fg:w="3"/><text x="26.1509%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward_concurrent (2,444 samples, 10.46%)</title><rect x="15.4926%" y="213" width="10.4596%" height="15" fill="rgb(210,229,1)" fg:x="3620" fg:w="2444"/><text x="15.7426%" y="223.50">fekan`fekan::ka..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.03%)</title><rect x="25.9266%" y="197" width="0.0257%" height="15" fill="rgb(222,148,37)" fg:x="6058" fg:w="6"/><text x="26.1766%" y="207.50"></text></g><g><title>fekan`rayon_core::registry::Registry::in_worker_cold (3 samples, 0.01%)</title><rect x="25.9522%" y="213" width="0.0128%" height="15" fill="rgb(234,67,33)" fg:x="6064" fg:w="3"/><text x="26.2022%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.04%)</title><rect x="25.9736%" y="213" width="0.0428%" height="15" fill="rgb(247,98,35)" fg:x="6069" fg:w="10"/><text x="26.2236%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::backward_concurrent (2,476 samples, 10.60%)</title><rect x="15.4241%" y="229" width="10.5966%" height="15" fill="rgb(247,138,52)" fg:x="3604" fg:w="2476"/><text x="15.6741%" y="239.50">fekan`fekan::ka..</text></g><g><title>fekan`fekan::kan::Kan::clear_samples (14 samples, 0.06%)</title><rect x="26.0207%" y="229" width="0.0599%" height="15" fill="rgb(213,79,30)" fg:x="6080" fg:w="14"/><text x="26.2707%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.06%)</title><rect x="26.0250%" y="213" width="0.0556%" height="15" fill="rgb(246,177,23)" fg:x="6081" fg:w="13"/><text x="26.2750%" y="223.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="26.0935%" y="213" width="0.0128%" height="15" fill="rgb(230,62,27)" fg:x="6097" fg:w="3"/><text x="26.3435%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$free (3 samples, 0.01%)</title><rect x="26.1063%" y="213" width="0.0128%" height="15" fill="rgb(216,154,8)" fg:x="6100" fg:w="3"/><text x="26.3563%" y="223.50"></text></g><g><title>fekan`alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.03%)</title><rect x="26.1448%" y="213" width="0.0257%" height="15" fill="rgb(244,35,45)" fg:x="6109" fg:w="6"/><text x="26.3948%" y="223.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="26.2475%" y="197" width="0.0128%" height="15" fill="rgb(251,115,12)" fg:x="6133" fg:w="3"/><text x="26.4975%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$free (7 samples, 0.03%)</title><rect x="26.2604%" y="197" width="0.0300%" height="15" fill="rgb(240,54,50)" fg:x="6136" fg:w="7"/><text x="26.5104%" y="207.50"></text></g><g><title>fekan`__rdl_alloc (3 samples, 0.01%)</title><rect x="26.2989%" y="197" width="0.0128%" height="15" fill="rgb(233,84,52)" fg:x="6145" fg:w="3"/><text x="26.5489%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (19 samples, 0.08%)</title><rect x="26.3759%" y="165" width="0.0813%" height="15" fill="rgb(207,117,47)" fg:x="6163" fg:w="19"/><text x="26.6259%" y="175.50"></text></g><g><title>fekan`&lt;std::sys::sync::mutex::pthread::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::destroy (41 samples, 0.18%)</title><rect x="26.3331%" y="181" width="0.1755%" height="15" fill="rgb(249,43,39)" fg:x="6153" fg:w="41"/><text x="26.5831%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (12 samples, 0.05%)</title><rect x="26.4572%" y="165" width="0.0514%" height="15" fill="rgb(209,38,44)" fg:x="6182" fg:w="12"/><text x="26.7072%" y="175.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_destroy (3 samples, 0.01%)</title><rect x="26.5086%" y="181" width="0.0128%" height="15" fill="rgb(236,212,23)" fg:x="6194" fg:w="3"/><text x="26.7586%" y="191.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_trylock (4 samples, 0.02%)</title><rect x="26.5214%" y="181" width="0.0171%" height="15" fill="rgb(242,79,21)" fg:x="6197" fg:w="4"/><text x="26.7714%" y="191.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_unlock (3 samples, 0.01%)</title><rect x="26.5386%" y="181" width="0.0128%" height="15" fill="rgb(211,96,35)" fg:x="6201" fg:w="3"/><text x="26.7886%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (67 samples, 0.29%)</title><rect x="26.5600%" y="181" width="0.2867%" height="15" fill="rgb(253,215,40)" fg:x="6206" fg:w="67"/><text x="26.8100%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.07%)</title><rect x="26.8510%" y="181" width="0.0728%" height="15" fill="rgb(211,81,21)" fg:x="6274" fg:w="17"/><text x="27.1010%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (5 samples, 0.02%)</title><rect x="26.9237%" y="181" width="0.0214%" height="15" fill="rgb(208,190,38)" fg:x="6291" fg:w="5"/><text x="27.1737%" y="191.50"></text></g><g><title>fekan`alloc::sync::Arc&lt;T,A&gt;::drop_slow (158 samples, 0.68%)</title><rect x="26.3117%" y="197" width="0.6762%" height="15" fill="rgb(235,213,38)" fg:x="6148" fg:w="158"/><text x="26.5617%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_trylock (10 samples, 0.04%)</title><rect x="26.9451%" y="181" width="0.0428%" height="15" fill="rgb(237,122,38)" fg:x="6296" fg:w="10"/><text x="27.1951%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,133 samples, 9.13%)</title><rect x="27.1463%" y="149" width="9.1286%" height="15" fill="rgb(244,218,35)" fg:x="6343" fg:w="2133"/><text x="27.3963%" y="159.50">libsystem_ker..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (149 samples, 0.64%)</title><rect x="36.3520%" y="133" width="0.6377%" height="15" fill="rgb(240,68,47)" fg:x="8494" fg:w="149"/><text x="36.6020%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (78 samples, 0.33%)</title><rect x="36.9896%" y="117" width="0.3338%" height="15" fill="rgb(210,16,53)" fg:x="8643" fg:w="78"/><text x="37.2396%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (79 samples, 0.34%)</title><rect x="36.9896%" y="133" width="0.3381%" height="15" fill="rgb(235,124,12)" fg:x="8643" fg:w="79"/><text x="37.2396%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (10 samples, 0.04%)</title><rect x="37.3363%" y="133" width="0.0428%" height="15" fill="rgb(224,169,11)" fg:x="8724" fg:w="10"/><text x="37.5863%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (259 samples, 1.11%)</title><rect x="36.2749%" y="149" width="1.1084%" height="15" fill="rgb(250,166,2)" fg:x="8476" fg:w="259"/><text x="36.5249%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (5 samples, 0.02%)</title><rect x="37.3834%" y="149" width="0.0214%" height="15" fill="rgb(242,216,29)" fg:x="8735" fg:w="5"/><text x="37.6334%" y="159.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (2,420 samples, 10.36%)</title><rect x="27.0607%" y="165" width="10.3569%" height="15" fill="rgb(230,116,27)" fg:x="6323" fg:w="2420"/><text x="27.3107%" y="175.50">fekan`std::sync..</text></g><g><title>fekan`rayon_core::latch::LockLatch::wait_and_reset (2,432 samples, 10.41%)</title><rect x="27.0350%" y="181" width="10.4083%" height="15" fill="rgb(228,99,48)" fg:x="6317" fg:w="2432"/><text x="27.2850%" y="191.50">fekan`rayon_cor..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (4 samples, 0.02%)</title><rect x="37.4262%" y="165" width="0.0171%" height="15" fill="rgb(253,11,6)" fg:x="8745" fg:w="4"/><text x="37.6762%" y="175.50"></text></g><g><title>fekan`rayon_core::registry::Registry::inject (4 samples, 0.02%)</title><rect x="37.4433%" y="181" width="0.0171%" height="15" fill="rgb(247,143,39)" fg:x="8749" fg:w="4"/><text x="37.6933%" y="191.50"></text></g><g><title>fekan`crossbeam_deque::deque::Injector&lt;T&gt;::push (3 samples, 0.01%)</title><rect x="37.4476%" y="165" width="0.0128%" height="15" fill="rgb(236,97,10)" fg:x="8750" fg:w="3"/><text x="37.6976%" y="175.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (4 samples, 0.02%)</title><rect x="37.4604%" y="181" width="0.0171%" height="15" fill="rgb(233,208,19)" fg:x="8753" fg:w="4"/><text x="37.7104%" y="191.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (4 samples, 0.02%)</title><rect x="37.4604%" y="165" width="0.0171%" height="15" fill="rgb(216,164,2)" fg:x="8753" fg:w="4"/><text x="37.7104%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4 samples, 0.02%)</title><rect x="37.4604%" y="149" width="0.0171%" height="15" fill="rgb(220,129,5)" fg:x="8753" fg:w="4"/><text x="37.7104%" y="159.50"></text></g><g><title>fekan`rayon_core::registry::Registry::in_worker_cold (2,453 samples, 10.50%)</title><rect x="26.9879%" y="197" width="10.4982%" height="15" fill="rgb(242,17,10)" fg:x="6306" fg:w="2453"/><text x="27.2379%" y="207.50">fekan`rayon_cor..</text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.02%)</title><rect x="37.4904%" y="197" width="0.0214%" height="15" fill="rgb(242,107,0)" fg:x="8760" fg:w="5"/><text x="37.7404%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (25 samples, 0.11%)</title><rect x="37.5118%" y="197" width="0.1070%" height="15" fill="rgb(251,28,31)" fg:x="8765" fg:w="25"/><text x="37.7618%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (17 samples, 0.07%)</title><rect x="37.6188%" y="197" width="0.0728%" height="15" fill="rgb(233,223,10)" fg:x="8790" fg:w="17"/><text x="37.8688%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (67 samples, 0.29%)</title><rect x="37.6915%" y="197" width="0.2867%" height="15" fill="rgb(215,21,27)" fg:x="8807" fg:w="67"/><text x="37.9415%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (131 samples, 0.56%)</title><rect x="37.9868%" y="197" width="0.5606%" height="15" fill="rgb(232,23,21)" fg:x="8876" fg:w="131"/><text x="38.2368%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.03%)</title><rect x="38.5475%" y="197" width="0.0342%" height="15" fill="rgb(244,5,23)" fg:x="9007" fg:w="8"/><text x="38.7975%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (6 samples, 0.03%)</title><rect x="38.5817%" y="197" width="0.0257%" height="15" fill="rgb(226,81,46)" fg:x="9015" fg:w="6"/><text x="38.8317%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward_concurrent (2,910 samples, 12.45%)</title><rect x="26.1705%" y="213" width="12.4540%" height="15" fill="rgb(247,70,30)" fg:x="6115" fg:w="2910"/><text x="26.4205%" y="223.50">fekan`fekan::kan_la..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.02%)</title><rect x="38.6074%" y="197" width="0.0171%" height="15" fill="rgb(212,68,19)" fg:x="9021" fg:w="4"/><text x="38.8574%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (21 samples, 0.09%)</title><rect x="38.6245%" y="213" width="0.0899%" height="15" fill="rgb(240,187,13)" fg:x="9025" fg:w="21"/><text x="38.8745%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.03%)</title><rect x="38.7144%" y="213" width="0.0257%" height="15" fill="rgb(223,113,26)" fg:x="9046" fg:w="6"/><text x="38.9644%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (18 samples, 0.08%)</title><rect x="38.7400%" y="213" width="0.0770%" height="15" fill="rgb(206,192,2)" fg:x="9052" fg:w="18"/><text x="38.9900%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.05%)</title><rect x="38.8256%" y="213" width="0.0471%" height="15" fill="rgb(241,108,4)" fg:x="9072" fg:w="11"/><text x="39.0756%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.08%)</title><rect x="38.8727%" y="213" width="0.0813%" height="15" fill="rgb(247,173,49)" fg:x="9083" fg:w="19"/><text x="39.1227%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::forward_concurrent (3,009 samples, 12.88%)</title><rect x="26.0806%" y="229" width="12.8777%" height="15" fill="rgb(224,114,35)" fg:x="6094" fg:w="3009"/><text x="26.3306%" y="239.50">fekan`fekan::kan::K..</text></g><g><title>fekan`fekan::kan::Kan::update (60 samples, 0.26%)</title><rect x="38.9626%" y="229" width="0.2568%" height="15" fill="rgb(245,159,27)" fg:x="9104" fg:w="60"/><text x="39.2126%" y="239.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (9 samples, 0.04%)</title><rect x="39.2793%" y="149" width="0.0385%" height="15" fill="rgb(245,172,44)" fg:x="9178" fg:w="9"/><text x="39.5293%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (9 samples, 0.04%)</title><rect x="39.3392%" y="133" width="0.0385%" height="15" fill="rgb(236,23,11)" fg:x="9192" fg:w="9"/><text x="39.5892%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7 samples, 0.03%)</title><rect x="39.3777%" y="117" width="0.0300%" height="15" fill="rgb(205,117,38)" fg:x="9201" fg:w="7"/><text x="39.6277%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (10 samples, 0.04%)</title><rect x="39.3777%" y="133" width="0.0428%" height="15" fill="rgb(237,72,25)" fg:x="9201" fg:w="10"/><text x="39.6277%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.01%)</title><rect x="39.4077%" y="117" width="0.0128%" height="15" fill="rgb(244,70,9)" fg:x="9208" fg:w="3"/><text x="39.6577%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (38 samples, 0.16%)</title><rect x="39.2622%" y="165" width="0.1626%" height="15" fill="rgb(217,125,39)" fg:x="9174" fg:w="38"/><text x="39.5122%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (25 samples, 0.11%)</title><rect x="39.3178%" y="149" width="0.1070%" height="15" fill="rgb(235,36,10)" fg:x="9187" fg:w="25"/><text x="39.5678%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (40 samples, 0.17%)</title><rect x="39.2622%" y="197" width="0.1712%" height="15" fill="rgb(251,123,47)" fg:x="9174" fg:w="40"/><text x="39.5122%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (40 samples, 0.17%)</title><rect x="39.2622%" y="181" width="0.1712%" height="15" fill="rgb(221,13,13)" fg:x="9174" fg:w="40"/><text x="39.5122%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::update_knots_from_samples (7 samples, 0.03%)</title><rect x="39.4334%" y="197" width="0.0300%" height="15" fill="rgb(238,131,9)" fg:x="9214" fg:w="7"/><text x="39.6834%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (70 samples, 0.30%)</title><rect x="39.2194%" y="229" width="0.2996%" height="15" fill="rgb(211,50,8)" fg:x="9164" fg:w="70"/><text x="39.4694%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (70 samples, 0.30%)</title><rect x="39.2194%" y="213" width="0.2996%" height="15" fill="rgb(245,182,24)" fg:x="9164" fg:w="70"/><text x="39.4694%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.04%)</title><rect x="39.4804%" y="197" width="0.0385%" height="15" fill="rgb(242,14,37)" fg:x="9225" fg:w="9"/><text x="39.7304%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (9 samples, 0.04%)</title><rect x="39.5190%" y="229" width="0.0385%" height="15" fill="rgb(246,228,12)" fg:x="9234" fg:w="9"/><text x="39.7690%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward_concurrent (3 samples, 0.01%)</title><rect x="39.5575%" y="229" width="0.0128%" height="15" fill="rgb(213,55,15)" fg:x="9243" fg:w="3"/><text x="39.8075%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward_concurrent (3 samples, 0.01%)</title><rect x="39.5703%" y="229" width="0.0128%" height="15" fill="rgb(209,9,3)" fg:x="9246" fg:w="3"/><text x="39.8203%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (380 samples, 1.63%)</title><rect x="39.6474%" y="181" width="1.6263%" height="15" fill="rgb(230,59,30)" fg:x="9264" fg:w="380"/><text x="39.8974%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (336 samples, 1.44%)</title><rect x="39.8357%" y="165" width="1.4380%" height="15" fill="rgb(209,121,21)" fg:x="9308" fg:w="336"/><text x="40.0857%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (244 samples, 1.04%)</title><rect x="40.2294%" y="149" width="1.0443%" height="15" fill="rgb(220,109,13)" fg:x="9400" fg:w="244"/><text x="40.4794%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (79 samples, 0.34%)</title><rect x="40.9355%" y="133" width="0.3381%" height="15" fill="rgb(232,18,1)" fg:x="9565" fg:w="79"/><text x="41.1855%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (396 samples, 1.69%)</title><rect x="39.5832%" y="197" width="1.6948%" height="15" fill="rgb(215,41,42)" fg:x="9249" fg:w="396"/><text x="39.8332%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (12 samples, 0.05%)</title><rect x="41.2779%" y="197" width="0.0514%" height="15" fill="rgb(224,123,36)" fg:x="9645" fg:w="12"/><text x="41.5279%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (411 samples, 1.76%)</title><rect x="39.5832%" y="213" width="1.7590%" height="15" fill="rgb(240,125,3)" fg:x="9249" fg:w="411"/><text x="39.8332%" y="223.50"></text></g><g><title>fekan`std::sys::pal::unix::time::Timespec::now (3 samples, 0.01%)</title><rect x="41.3421%" y="197" width="0.0128%" height="15" fill="rgb(205,98,50)" fg:x="9660" fg:w="3"/><text x="41.5921%" y="207.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (3 samples, 0.01%)</title><rect x="41.3421%" y="181" width="0.0128%" height="15" fill="rgb(205,185,37)" fg:x="9660" fg:w="3"/><text x="41.5921%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (3 samples, 0.01%)</title><rect x="41.3421%" y="165" width="0.0128%" height="15" fill="rgb(238,207,15)" fg:x="9660" fg:w="3"/><text x="41.5921%" y="175.50"></text></g><g><title>fekan`fekan::validate_model (415 samples, 1.78%)</title><rect x="39.5832%" y="229" width="1.7761%" height="15" fill="rgb(213,199,42)" fg:x="9249" fg:w="415"/><text x="39.8332%" y="239.50">f..</text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::inc (4 samples, 0.02%)</title><rect x="41.3421%" y="213" width="0.0171%" height="15" fill="rgb(235,201,11)" fg:x="9660" fg:w="4"/><text x="41.5921%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (23 samples, 0.10%)</title><rect x="41.3978%" y="181" width="0.0984%" height="15" fill="rgb(207,46,11)" fg:x="9673" fg:w="23"/><text x="41.6478%" y="191.50"></text></g><g><title>fekan`std::sys::pal::unix::time::Timespec::now (29 samples, 0.12%)</title><rect x="41.3764%" y="213" width="0.1241%" height="15" fill="rgb(241,35,35)" fg:x="9668" fg:w="29"/><text x="41.6264%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (29 samples, 0.12%)</title><rect x="41.3764%" y="197" width="0.1241%" height="15" fill="rgb(243,32,47)" fg:x="9668" fg:w="29"/><text x="41.6264%" y="207.50"></text></g><g><title>fekan`std::time::Instant::now (9 samples, 0.04%)</title><rect x="41.5090%" y="213" width="0.0385%" height="15" fill="rgb(247,202,23)" fg:x="9699" fg:w="9"/><text x="41.7590%" y="223.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::inc (47 samples, 0.20%)</title><rect x="41.3592%" y="229" width="0.2011%" height="15" fill="rgb(219,102,11)" fg:x="9664" fg:w="47"/><text x="41.6092%" y="239.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (3 samples, 0.01%)</title><rect x="41.5475%" y="213" width="0.0128%" height="15" fill="rgb(243,110,44)" fg:x="9708" fg:w="3"/><text x="41.7975%" y="223.50"></text></g><g><title>libsystem_c.dylib`isatty (5 samples, 0.02%)</title><rect x="41.5689%" y="149" width="0.0214%" height="15" fill="rgb(222,74,54)" fg:x="9713" fg:w="5"/><text x="41.8189%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (5 samples, 0.02%)</title><rect x="41.5689%" y="133" width="0.0214%" height="15" fill="rgb(216,99,12)" fg:x="9713" fg:w="5"/><text x="41.8189%" y="143.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (8 samples, 0.03%)</title><rect x="41.5689%" y="181" width="0.0342%" height="15" fill="rgb(226,22,26)" fg:x="9713" fg:w="8"/><text x="41.8189%" y="191.50"></text></g><g><title>fekan`console::unix_term::terminal_size (8 samples, 0.03%)</title><rect x="41.5689%" y="165" width="0.0342%" height="15" fill="rgb(217,163,10)" fg:x="9713" fg:w="8"/><text x="41.8189%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (3 samples, 0.01%)</title><rect x="41.5903%" y="149" width="0.0128%" height="15" fill="rgb(213,25,53)" fg:x="9718" fg:w="3"/><text x="41.8403%" y="159.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (15 samples, 0.06%)</title><rect x="41.5604%" y="229" width="0.0642%" height="15" fill="rgb(252,105,26)" fg:x="9711" fg:w="15"/><text x="41.8104%" y="239.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (15 samples, 0.06%)</title><rect x="41.5604%" y="213" width="0.0642%" height="15" fill="rgb(220,39,43)" fg:x="9711" fg:w="15"/><text x="41.8104%" y="223.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (15 samples, 0.06%)</title><rect x="41.5604%" y="197" width="0.0642%" height="15" fill="rgb(229,68,48)" fg:x="9711" fg:w="15"/><text x="41.8104%" y="207.50"></text></g><g><title>fekan`indicatif::style::ProgressStyle::format_state (5 samples, 0.02%)</title><rect x="41.6032%" y="181" width="0.0214%" height="15" fill="rgb(252,8,32)" fg:x="9721" fg:w="5"/><text x="41.8532%" y="191.50"></text></g><g><title>fekan`core::fmt::write (5 samples, 0.02%)</title><rect x="41.6032%" y="165" width="0.0214%" height="15" fill="rgb(223,20,43)" fg:x="9721" fg:w="5"/><text x="41.8532%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (11 samples, 0.05%)</title><rect x="41.6374%" y="229" width="0.0471%" height="15" fill="rgb(229,81,49)" fg:x="9729" fg:w="11"/><text x="41.8874%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.03%)</title><rect x="41.6845%" y="229" width="0.0342%" height="15" fill="rgb(236,28,36)" fg:x="9740" fg:w="8"/><text x="41.9345%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.03%)</title><rect x="41.7187%" y="229" width="0.0257%" height="15" fill="rgb(249,185,26)" fg:x="9748" fg:w="6"/><text x="41.9687%" y="239.50"></text></g><g><title>fekan`fekan::train_model (6,182 samples, 26.46%)</title><rect x="15.3257%" y="245" width="26.4572%" height="15" fill="rgb(249,174,33)" fg:x="3581" fg:w="6182"/><text x="15.5757%" y="255.50">fekan`fekan::train_model</text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.04%)</title><rect x="41.7444%" y="229" width="0.0385%" height="15" fill="rgb(233,201,37)" fg:x="9754" fg:w="9"/><text x="41.9944%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="41.7958%" y="245" width="0.0128%" height="15" fill="rgb(221,78,26)" fg:x="9766" fg:w="3"/><text x="42.0458%" y="255.50"></text></g><g><title>dyld`start (9,775 samples, 41.83%)</title><rect x="0.0000%" y="341" width="41.8343%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="9775"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>fekan`main (9,775 samples, 41.83%)</title><rect x="0.0000%" y="325" width="41.8343%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="9775"/><text x="0.2500%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (9,775 samples, 41.83%)</title><rect x="0.0000%" y="309" width="41.8343%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="9775"/><text x="0.2500%" y="319.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (9,775 samples, 41.83%)</title><rect x="0.0000%" y="293" width="41.8343%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="9775"/><text x="0.2500%" y="303.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (9,775 samples, 41.83%)</title><rect x="0.0000%" y="277" width="41.8343%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="9775"/><text x="0.2500%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (9,774 samples, 41.83%)</title><rect x="0.0043%" y="261" width="41.8300%" height="15" fill="rgb(238,154,13)" fg:x="1" fg:w="9774"/><text x="0.2543%" y="271.50">fekan`fekan::main</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="41.8172%" y="245" width="0.0171%" height="15" fill="rgb(219,56,2)" fg:x="9771" fg:w="4"/><text x="42.0672%" y="255.50"></text></g><g><title>fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (59 samples, 0.25%)</title><rect x="41.8343%" y="245" width="0.2525%" height="15" fill="rgb(233,0,4)" fg:x="9775" fg:w="59"/><text x="42.0843%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$sched_yield (9 samples, 0.04%)</title><rect x="42.0868%" y="245" width="0.0385%" height="15" fill="rgb(235,30,7)" fg:x="9834" fg:w="9"/><text x="42.3368%" y="255.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (20 samples, 0.09%)</title><rect x="42.1339%" y="245" width="0.0856%" height="15" fill="rgb(250,79,13)" fg:x="9845" fg:w="20"/><text x="42.3839%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (3,350 samples, 14.34%)</title><rect x="42.5190%" y="197" width="14.3371%" height="15" fill="rgb(211,146,34)" fg:x="9935" fg:w="3350"/><text x="42.7690%" y="207.50">libsystem_kernel.dylib..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$__psynch_cvbroad (9 samples, 0.04%)</title><rect x="56.8561%" y="197" width="0.0385%" height="15" fill="rgb(228,22,38)" fg:x="13285" fg:w="9"/><text x="57.1061%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (20 samples, 0.09%)</title><rect x="56.8946%" y="197" width="0.0856%" height="15" fill="rgb(235,168,5)" fg:x="13294" fg:w="20"/><text x="57.1446%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_broadcast (16 samples, 0.07%)</title><rect x="56.9845%" y="197" width="0.0685%" height="15" fill="rgb(221,155,16)" fg:x="13315" fg:w="16"/><text x="57.2345%" y="207.50"></text></g><g><title>fekan`&lt;rayon_core::latch::LatchRef&lt;L&gt; as rayon_core::latch::Latch&gt;::set (3,413 samples, 14.61%)</title><rect x="42.4976%" y="213" width="14.6067%" height="15" fill="rgb(215,215,53)" fg:x="9930" fg:w="3413"/><text x="42.7476%" y="223.50">fekan`&lt;rayon_core::lat..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (12 samples, 0.05%)</title><rect x="57.0530%" y="197" width="0.0514%" height="15" fill="rgb(223,4,10)" fg:x="13331" fg:w="12"/><text x="57.3030%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_lock (4 samples, 0.02%)</title><rect x="57.1172%" y="213" width="0.0171%" height="15" fill="rgb(234,103,6)" fg:x="13346" fg:w="4"/><text x="57.3672%" y="223.50"></text></g><g><title>fekan`__rdl_alloc_zeroed (8 samples, 0.03%)</title><rect x="57.1386%" y="213" width="0.0342%" height="15" fill="rgb(227,97,0)" fg:x="13351" fg:w="8"/><text x="57.3886%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (13 samples, 0.06%)</title><rect x="57.1814%" y="213" width="0.0556%" height="15" fill="rgb(234,150,53)" fg:x="13361" fg:w="13"/><text x="57.4314%" y="223.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (5 samples, 0.02%)</title><rect x="57.4895%" y="181" width="0.0214%" height="15" fill="rgb(228,201,54)" fg:x="13433" fg:w="5"/><text x="57.7395%" y="191.50"></text></g><g><title>fekan`rayon_core::current_num_threads (5 samples, 0.02%)</title><rect x="57.5195%" y="181" width="0.0214%" height="15" fill="rgb(222,22,37)" fg:x="13440" fg:w="5"/><text x="57.7695%" y="191.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_lock (6 samples, 0.03%)</title><rect x="57.6350%" y="165" width="0.0257%" height="15" fill="rgb(237,53,32)" fg:x="13467" fg:w="6"/><text x="57.8850%" y="175.50"></text></g><g><title>fekan`&lt;std::sys::sync::mutex::pthread::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::init (93 samples, 0.40%)</title><rect x="58.1058%" y="149" width="0.3980%" height="15" fill="rgb(233,25,53)" fg:x="13577" fg:w="93"/><text x="58.3558%" y="159.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutexattr_destroy (3 samples, 0.01%)</title><rect x="58.5166%" y="149" width="0.0128%" height="15" fill="rgb(210,40,34)" fg:x="13673" fg:w="3"/><text x="58.7666%" y="159.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutexattr_init (5 samples, 0.02%)</title><rect x="58.5295%" y="149" width="0.0214%" height="15" fill="rgb(241,220,44)" fg:x="13676" fg:w="5"/><text x="58.7795%" y="159.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutexattr_settype (3 samples, 0.01%)</title><rect x="58.5509%" y="149" width="0.0128%" height="15" fill="rgb(235,28,35)" fg:x="13681" fg:w="3"/><text x="58.8009%" y="159.50"></text></g><g><title>fekan`__rdl_alloc (5 samples, 0.02%)</title><rect x="58.5637%" y="149" width="0.0214%" height="15" fill="rgb(210,56,17)" fg:x="13684" fg:w="5"/><text x="58.8137%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (303 samples, 1.30%)</title><rect x="62.2100%" y="117" width="1.2968%" height="15" fill="rgb(224,130,29)" fg:x="14536" fg:w="303"/><text x="62.4600%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (217 samples, 0.93%)</title><rect x="62.5781%" y="101" width="0.9287%" height="15" fill="rgb(235,212,8)" fg:x="14622" fg:w="217"/><text x="62.8281%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (180 samples, 0.77%)</title><rect x="63.5068%" y="117" width="0.7704%" height="15" fill="rgb(223,33,50)" fg:x="14839" fg:w="180"/><text x="63.7568%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (1,232 samples, 5.27%)</title><rect x="59.5994%" y="133" width="5.2726%" height="15" fill="rgb(219,149,13)" fg:x="13926" fg:w="1232"/><text x="59.8494%" y="143.50">fekan`..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (139 samples, 0.59%)</title><rect x="64.2772%" y="117" width="0.5949%" height="15" fill="rgb(250,156,29)" fg:x="15019" fg:w="139"/><text x="64.5272%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (1,609 samples, 6.89%)</title><rect x="58.5851%" y="149" width="6.8861%" height="15" fill="rgb(216,193,19)" fg:x="13689" fg:w="1609"/><text x="58.8351%" y="159.50">fekan`fek..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (140 samples, 0.60%)</title><rect x="64.8720%" y="133" width="0.5992%" height="15" fill="rgb(216,135,14)" fg:x="15158" fg:w="140"/><text x="65.1220%" y="143.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 0.15%)</title><rect x="65.4712%" y="149" width="0.1455%" height="15" fill="rgb(241,47,5)" fg:x="15298" fg:w="34"/><text x="65.7212%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.05%)</title><rect x="65.6167%" y="149" width="0.0514%" height="15" fill="rgb(233,42,35)" fg:x="15332" fg:w="12"/><text x="65.8667%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (14 samples, 0.06%)</title><rect x="65.6766%" y="149" width="0.0599%" height="15" fill="rgb(231,13,6)" fg:x="15346" fg:w="14"/><text x="65.9266%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (17 samples, 0.07%)</title><rect x="65.7365%" y="149" width="0.0728%" height="15" fill="rgb(207,181,40)" fg:x="15360" fg:w="17"/><text x="65.9865%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (19 samples, 0.08%)</title><rect x="65.8093%" y="149" width="0.0813%" height="15" fill="rgb(254,173,49)" fg:x="15377" fg:w="19"/><text x="66.0593%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_destroy (9 samples, 0.04%)</title><rect x="65.8992%" y="149" width="0.0385%" height="15" fill="rgb(221,1,38)" fg:x="15398" fg:w="9"/><text x="66.1492%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_init (4 samples, 0.02%)</title><rect x="65.9377%" y="149" width="0.0171%" height="15" fill="rgb(206,124,46)" fg:x="15407" fg:w="4"/><text x="66.1877%" y="159.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,946 samples, 8.33%)</title><rect x="57.6650%" y="165" width="8.3283%" height="15" fill="rgb(249,21,11)" fg:x="13474" fg:w="1946"/><text x="57.9150%" y="175.50">fekan`core::..</text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_settype (9 samples, 0.04%)</title><rect x="65.9548%" y="149" width="0.0385%" height="15" fill="rgb(222,201,40)" fg:x="15411" fg:w="9"/><text x="66.2048%" y="159.50"></text></g><g><title>fekan`crossbeam_deque::deque::Worker&lt;T&gt;::pop (3 samples, 0.01%)</title><rect x="65.9933%" y="165" width="0.0128%" height="15" fill="rgb(235,61,29)" fg:x="15420" fg:w="3"/><text x="66.2433%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (54 samples, 0.23%)</title><rect x="66.0062%" y="165" width="0.2311%" height="15" fill="rgb(219,207,3)" fg:x="15423" fg:w="54"/><text x="66.2562%" y="175.50"></text></g><g><title>fekan`&lt;std::sys::sync::mutex::pthread::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::init (3 samples, 0.01%)</title><rect x="66.2886%" y="133" width="0.0128%" height="15" fill="rgb(222,56,46)" fg:x="15489" fg:w="3"/><text x="66.5386%" y="143.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_lock (5 samples, 0.02%)</title><rect x="66.3015%" y="133" width="0.0214%" height="15" fill="rgb(239,76,54)" fg:x="15492" fg:w="5"/><text x="66.5515%" y="143.50"></text></g><g><title>fekan`&lt;std::sys::sync::mutex::pthread::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::init (6 samples, 0.03%)</title><rect x="66.4684%" y="117" width="0.0257%" height="15" fill="rgb(231,124,27)" fg:x="15531" fg:w="6"/><text x="66.7184%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutexattr_settype (3 samples, 0.01%)</title><rect x="66.5069%" y="117" width="0.0128%" height="15" fill="rgb(249,195,6)" fg:x="15540" fg:w="3"/><text x="66.7569%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (197 samples, 0.84%)</title><rect x="69.6910%" y="85" width="0.8431%" height="15" fill="rgb(237,174,47)" fg:x="16284" fg:w="197"/><text x="69.9410%" y="95.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (154 samples, 0.66%)</title><rect x="69.8750%" y="69" width="0.6591%" height="15" fill="rgb(206,201,31)" fg:x="16327" fg:w="154"/><text x="70.1250%" y="79.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (129 samples, 0.55%)</title><rect x="70.5341%" y="85" width="0.5521%" height="15" fill="rgb(231,57,52)" fg:x="16481" fg:w="129"/><text x="70.7841%" y="95.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (953 samples, 4.08%)</title><rect x="67.3928%" y="101" width="4.0786%" height="15" fill="rgb(248,177,22)" fg:x="15747" fg:w="953"/><text x="67.6428%" y="111.50">feka..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (90 samples, 0.39%)</title><rect x="71.0862%" y="85" width="0.3852%" height="15" fill="rgb(215,211,37)" fg:x="16610" fg:w="90"/><text x="71.3362%" y="95.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (1,276 samples, 5.46%)</title><rect x="66.5283%" y="117" width="5.4609%" height="15" fill="rgb(241,128,51)" fg:x="15545" fg:w="1276"/><text x="66.7783%" y="127.50">fekan`f..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (121 samples, 0.52%)</title><rect x="71.4714%" y="101" width="0.5178%" height="15" fill="rgb(227,165,31)" fg:x="16700" fg:w="121"/><text x="71.7214%" y="111.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (44 samples, 0.19%)</title><rect x="71.9892%" y="117" width="0.1883%" height="15" fill="rgb(228,167,24)" fg:x="16821" fg:w="44"/><text x="72.2392%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="72.1775%" y="117" width="0.0171%" height="15" fill="rgb(228,143,12)" fg:x="16865" fg:w="4"/><text x="72.4275%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.03%)</title><rect x="72.1946%" y="117" width="0.0342%" height="15" fill="rgb(249,149,8)" fg:x="16869" fg:w="8"/><text x="72.4446%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (14 samples, 0.06%)</title><rect x="72.2289%" y="117" width="0.0599%" height="15" fill="rgb(243,35,44)" fg:x="16877" fg:w="14"/><text x="72.4789%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (17 samples, 0.07%)</title><rect x="72.2888%" y="117" width="0.0728%" height="15" fill="rgb(246,89,9)" fg:x="16891" fg:w="17"/><text x="72.5388%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (12 samples, 0.05%)</title><rect x="72.3616%" y="117" width="0.0514%" height="15" fill="rgb(233,213,13)" fg:x="16908" fg:w="12"/><text x="72.6116%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_destroy (6 samples, 0.03%)</title><rect x="72.4129%" y="117" width="0.0257%" height="15" fill="rgb(233,141,41)" fg:x="16920" fg:w="6"/><text x="72.6629%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_init (3 samples, 0.01%)</title><rect x="72.4386%" y="117" width="0.0128%" height="15" fill="rgb(239,167,4)" fg:x="16926" fg:w="3"/><text x="72.6886%" y="127.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (1,436 samples, 6.15%)</title><rect x="66.3229%" y="133" width="6.1457%" height="15" fill="rgb(209,217,16)" fg:x="15497" fg:w="1436"/><text x="66.5729%" y="143.50">fekan`co..</text></g><g><title>libsystem_pthread.dylib`pthread_mutexattr_settype (4 samples, 0.02%)</title><rect x="72.4514%" y="117" width="0.0171%" height="15" fill="rgb(219,88,35)" fg:x="16929" fg:w="4"/><text x="72.7014%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (50 samples, 0.21%)</title><rect x="72.4685%" y="133" width="0.2140%" height="15" fill="rgb(220,193,23)" fg:x="16933" fg:w="50"/><text x="72.7185%" y="143.50"></text></g><g><title>fekan`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (1,516 samples, 6.49%)</title><rect x="66.2415%" y="165" width="6.4881%" height="15" fill="rgb(230,90,52)" fg:x="15478" fg:w="1516"/><text x="66.4915%" y="175.50">fekan`ra..</text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (1,511 samples, 6.47%)</title><rect x="66.2629%" y="149" width="6.4667%" height="15" fill="rgb(252,106,19)" fg:x="15483" fg:w="1511"/><text x="66.5129%" y="159.50">fekan`ra..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (9 samples, 0.04%)</title><rect x="72.6911%" y="133" width="0.0385%" height="15" fill="rgb(206,74,20)" fg:x="16985" fg:w="9"/><text x="72.9411%" y="143.50"></text></g><g><title>fekan`&lt;rayon::iter::plumbing::bridge::Callback&lt;C&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (3,588 samples, 15.36%)</title><rect x="57.4082%" y="197" width="15.3556%" height="15" fill="rgb(230,138,44)" fg:x="13414" fg:w="3588"/><text x="57.6582%" y="207.50">fekan`&lt;rayon::iter::plum..</text></g><g><title>fekan`rayon_core::join::join_context::_{{closure}} (3,555 samples, 15.21%)</title><rect x="57.5494%" y="181" width="15.2144%" height="15" fill="rgb(235,182,43)" fg:x="13447" fg:w="3555"/><text x="57.7994%" y="191.50">fekan`rayon_core::join:..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (7 samples, 0.03%)</title><rect x="72.7339%" y="165" width="0.0300%" height="15" fill="rgb(242,16,51)" fg:x="16995" fg:w="7"/><text x="72.9839%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (856 samples, 3.66%)</title><rect x="72.7638%" y="197" width="3.6634%" height="15" fill="rgb(248,9,4)" fg:x="17002" fg:w="856"/><text x="73.0138%" y="207.50">feka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (516 samples, 2.21%)</title><rect x="74.2190%" y="181" width="2.2083%" height="15" fill="rgb(210,31,22)" fg:x="17342" fg:w="516"/><text x="74.4690%" y="191.50">f..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (291 samples, 1.25%)</title><rect x="76.4273%" y="197" width="1.2454%" height="15" fill="rgb(239,54,39)" fg:x="17858" fg:w="291"/><text x="76.6773%" y="207.50"></text></g><g><title>fekan`rayon_core::thread_pool::ThreadPool::install::_{{closure}} (4,843 samples, 20.73%)</title><rect x="57.2456%" y="213" width="20.7267%" height="15" fill="rgb(230,99,41)" fg:x="13376" fg:w="4843"/><text x="57.4956%" y="223.50">fekan`rayon_core::thread_pool::Th..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (67 samples, 0.29%)</title><rect x="77.6855%" y="197" width="0.2867%" height="15" fill="rgb(253,106,12)" fg:x="18152" fg:w="67"/><text x="77.9355%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (14 samples, 0.06%)</title><rect x="77.9808%" y="213" width="0.0599%" height="15" fill="rgb(213,46,41)" fg:x="18221" fg:w="14"/><text x="78.2308%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.02%)</title><rect x="78.0407%" y="213" width="0.0214%" height="15" fill="rgb(215,133,35)" fg:x="18235" fg:w="5"/><text x="78.2907%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (39 samples, 0.17%)</title><rect x="78.0750%" y="213" width="0.1669%" height="15" fill="rgb(213,28,5)" fg:x="18243" fg:w="39"/><text x="78.3250%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_broadcast (5 samples, 0.02%)</title><rect x="78.2462%" y="213" width="0.0214%" height="15" fill="rgb(215,77,49)" fg:x="18283" fg:w="5"/><text x="78.4962%" y="223.50"></text></g><g><title>fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (8,388 samples, 35.90%)</title><rect x="42.4292%" y="229" width="35.8983%" height="15" fill="rgb(248,100,22)" fg:x="9914" fg:w="8388"/><text x="42.6792%" y="239.50">fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (12 samples, 0.05%)</title><rect x="78.2761%" y="213" width="0.0514%" height="15" fill="rgb(208,67,9)" fg:x="18290" fg:w="12"/><text x="78.5261%" y="223.50"></text></g><g><title>fekan`crossbeam_deque::deque::Injector&lt;T&gt;::steal (7 samples, 0.03%)</title><rect x="78.3403%" y="229" width="0.0300%" height="15" fill="rgb(219,133,21)" fg:x="18305" fg:w="7"/><text x="78.5903%" y="239.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (10 samples, 0.04%)</title><rect x="78.4602%" y="213" width="0.0428%" height="15" fill="rgb(246,46,29)" fg:x="18333" fg:w="10"/><text x="78.7102%" y="223.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (35 samples, 0.15%)</title><rect x="78.3703%" y="229" width="0.1498%" height="15" fill="rgb(246,185,52)" fg:x="18312" fg:w="35"/><text x="78.6203%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.02%)</title><rect x="78.5030%" y="213" width="0.0171%" height="15" fill="rgb(252,136,11)" fg:x="18343" fg:w="4"/><text x="78.7530%" y="223.50"></text></g><g><title>fekan`crossbeam_deque::deque::Worker&lt;T&gt;::pop (13 samples, 0.06%)</title><rect x="78.5201%" y="229" width="0.0556%" height="15" fill="rgb(219,138,53)" fg:x="18347" fg:w="13"/><text x="78.7701%" y="239.50"></text></g><g><title>fekan`crossbeam_deque::deque::Injector&lt;T&gt;::steal (94 samples, 0.40%)</title><rect x="78.6442%" y="213" width="0.4023%" height="15" fill="rgb(211,51,23)" fg:x="18376" fg:w="94"/><text x="78.8942%" y="223.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::try_advance (3 samples, 0.01%)</title><rect x="79.3889%" y="165" width="0.0128%" height="15" fill="rgb(247,221,28)" fg:x="18550" fg:w="3"/><text x="79.6389%" y="175.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::collect (10 samples, 0.04%)</title><rect x="79.3846%" y="181" width="0.0428%" height="15" fill="rgb(251,222,45)" fg:x="18549" fg:w="10"/><text x="79.6346%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.03%)</title><rect x="79.4017%" y="165" width="0.0257%" height="15" fill="rgb(217,162,53)" fg:x="18553" fg:w="6"/><text x="79.6517%" y="175.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (58 samples, 0.25%)</title><rect x="79.1834%" y="197" width="0.2482%" height="15" fill="rgb(229,93,14)" fg:x="18502" fg:w="58"/><text x="79.4334%" y="207.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (93 samples, 0.40%)</title><rect x="79.0465%" y="213" width="0.3980%" height="15" fill="rgb(209,67,49)" fg:x="18470" fg:w="93"/><text x="79.2965%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 0.01%)</title><rect x="79.4317%" y="197" width="0.0128%" height="15" fill="rgb(213,87,29)" fg:x="18560" fg:w="3"/><text x="79.6817%" y="207.50"></text></g><g><title>fekan`crossbeam_deque::deque::Worker&lt;T&gt;::pop (13 samples, 0.06%)</title><rect x="79.4445%" y="213" width="0.0556%" height="15" fill="rgb(205,151,52)" fg:x="18563" fg:w="13"/><text x="79.6945%" y="223.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (9 samples, 0.04%)</title><rect x="79.5001%" y="213" width="0.0385%" height="15" fill="rgb(253,215,39)" fg:x="18576" fg:w="9"/><text x="79.7501%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.03%)</title><rect x="79.5386%" y="213" width="0.0257%" height="15" fill="rgb(221,220,41)" fg:x="18585" fg:w="6"/><text x="79.7886%" y="223.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (232 samples, 0.99%)</title><rect x="78.5757%" y="229" width="0.9929%" height="15" fill="rgb(218,133,21)" fg:x="18360" fg:w="232"/><text x="78.8257%" y="239.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::sleep (18 samples, 0.08%)</title><rect x="79.5686%" y="229" width="0.0770%" height="15" fill="rgb(221,193,43)" fg:x="18592" fg:w="18"/><text x="79.8186%" y="239.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (18 samples, 0.08%)</title><rect x="79.5686%" y="213" width="0.0770%" height="15" fill="rgb(240,128,52)" fg:x="18592" fg:w="18"/><text x="79.8186%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (18 samples, 0.08%)</title><rect x="79.5686%" y="197" width="0.0770%" height="15" fill="rgb(253,114,12)" fg:x="18592" fg:w="18"/><text x="79.8186%" y="207.50"></text></g><g><title>fekan`rayon_core::thread_pool::ThreadPool::install::_{{closure}} (8 samples, 0.03%)</title><rect x="79.6456%" y="229" width="0.0342%" height="15" fill="rgb(215,223,47)" fg:x="18610" fg:w="8"/><text x="79.8956%" y="239.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (5 samples, 0.02%)</title><rect x="79.6799%" y="229" width="0.0214%" height="15" fill="rgb(248,225,23)" fg:x="18618" fg:w="5"/><text x="79.9299%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (4,698 samples, 20.11%)</title><rect x="79.7013%" y="229" width="20.1061%" height="15" fill="rgb(250,108,0)" fg:x="18623" fg:w="4698"/><text x="79.9513%" y="239.50">libsystem_kernel.dylib`swtch_pri</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (5 samples, 0.02%)</title><rect x="99.8074%" y="229" width="0.0214%" height="15" fill="rgb(228,208,7)" fg:x="23321" fg:w="5"/><text x="100.0574%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (23 samples, 0.10%)</title><rect x="99.8288%" y="229" width="0.0984%" height="15" fill="rgb(244,45,10)" fg:x="23326" fg:w="23"/><text x="100.0788%" y="239.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (13,486 samples, 57.72%)</title><rect x="42.2195%" y="245" width="57.7163%" height="15" fill="rgb(207,125,25)" fg:x="9865" fg:w="13486"/><text x="42.4695%" y="255.50">fekan`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (8 samples, 0.03%)</title><rect x="99.9401%" y="245" width="0.0342%" height="15" fill="rgb(210,195,18)" fg:x="23352" fg:w="8"/><text x="100.1901%" y="255.50"></text></g><g><title>all (23,366 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="23366"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (13,591 samples, 58.17%)</title><rect x="41.8343%" y="341" width="58.1657%" height="15" fill="rgb(221,65,9)" fg:x="9775" fg:w="13591"/><text x="42.0843%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (13,591 samples, 58.17%)</title><rect x="41.8343%" y="325" width="58.1657%" height="15" fill="rgb(235,49,36)" fg:x="9775" fg:w="13591"/><text x="42.0843%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (13,591 samples, 58.17%)</title><rect x="41.8343%" y="309" width="58.1657%" height="15" fill="rgb(225,32,20)" fg:x="9775" fg:w="13591"/><text x="42.0843%" y="319.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (13,591 samples, 58.17%)</title><rect x="41.8343%" y="293" width="58.1657%" height="15" fill="rgb(215,141,46)" fg:x="9775" fg:w="13591"/><text x="42.0843%" y="303.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (13,591 samples, 58.17%)</title><rect x="41.8343%" y="277" width="58.1657%" height="15" fill="rgb(250,160,47)" fg:x="9775" fg:w="13591"/><text x="42.0843%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`rayon_core::registry::ThreadBuilder::run (13,591 samples, 58.17%)</title><rect x="41.8343%" y="261" width="58.1657%" height="15" fill="rgb(216,222,40)" fg:x="9775" fg:w="13591"/><text x="42.0843%" y="271.50">fekan`rayon_core::registry::ThreadBuilder::run</text></g><g><title>libsystem_pthread.dylib`cthread_yield (4 samples, 0.02%)</title><rect x="99.9829%" y="245" width="0.0171%" height="15" fill="rgb(234,217,39)" fg:x="23362" fg:w="4"/><text x="100.2329%" y="255.50"></text></g></svg></svg>