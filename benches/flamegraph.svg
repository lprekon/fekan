<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="14427"><g><title>fekan`__rdl_alloc (2 samples, 0.01%)</title><rect x="0.0139%" y="277" width="0.0139%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.2639%" y="287.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (75 samples, 0.52%)</title><rect x="0.0832%" y="117" width="0.5199%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="75"/><text x="0.3332%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.51%)</title><rect x="0.0970%" y="101" width="0.5060%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="73"/><text x="0.3470%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (73 samples, 0.51%)</title><rect x="0.0970%" y="85" width="0.5060%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="73"/><text x="0.3470%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.6100%" y="101" width="0.0139%" height="15" fill="rgb(208,68,35)" fg:x="88" fg:w="2"/><text x="0.8600%" y="111.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="0.6585%" y="85" width="0.0139%" height="15" fill="rgb(232,128,0)" fg:x="95" fg:w="2"/><text x="0.9085%" y="95.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="0.7001%" y="69" width="0.0208%" height="15" fill="rgb(207,160,47)" fg:x="101" fg:w="3"/><text x="0.9501%" y="79.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.01%)</title><rect x="0.7209%" y="69" width="0.0139%" height="15" fill="rgb(228,23,34)" fg:x="104" fg:w="2"/><text x="0.9709%" y="79.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,491 samples, 10.33%)</title><rect x="0.0762%" y="133" width="10.3348%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="1491"/><text x="0.3262%" y="143.50">fekan`&lt;core::ma..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,415 samples, 9.81%)</title><rect x="0.6030%" y="117" width="9.8080%" height="15" fill="rgb(220,122,19)" fg:x="87" fg:w="1415"/><text x="0.8530%" y="127.50">fekan`serde_js..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,412 samples, 9.79%)</title><rect x="0.6238%" y="101" width="9.7872%" height="15" fill="rgb(250,228,42)" fg:x="90" fg:w="1412"/><text x="0.8738%" y="111.50">fekan`serde_js..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,405 samples, 9.74%)</title><rect x="0.6724%" y="85" width="9.7387%" height="15" fill="rgb(240,193,28)" fg:x="97" fg:w="1405"/><text x="0.9224%" y="95.50">fekan`&lt;std::io..</text></g><g><title>libsystem_kernel.dylib`read (1,396 samples, 9.68%)</title><rect x="0.7347%" y="69" width="9.6763%" height="15" fill="rgb(216,20,37)" fg:x="106" fg:w="1396"/><text x="0.9847%" y="79.50">libsystem_kern..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,627 samples, 11.28%)</title><rect x="0.0693%" y="149" width="11.2775%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="1627"/><text x="0.3193%" y="159.50">fekan`&lt;serde_json..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (135 samples, 0.94%)</title><rect x="10.4110%" y="133" width="0.9357%" height="15" fill="rgb(217,207,13)" fg:x="1502" fg:w="135"/><text x="10.6610%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (134 samples, 0.93%)</title><rect x="10.4180%" y="117" width="0.9288%" height="15" fill="rgb(231,73,38)" fg:x="1503" fg:w="134"/><text x="10.6680%" y="127.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.01%)</title><rect x="11.3468%" y="149" width="0.0139%" height="15" fill="rgb(225,20,46)" fg:x="1637" fg:w="2"/><text x="11.5968%" y="159.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,632 samples, 11.31%)</title><rect x="0.0555%" y="165" width="11.3121%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1632"/><text x="0.3055%" y="175.50">fekan`&lt;serde::de:..</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,712 samples, 11.87%)</title><rect x="0.0555%" y="181" width="11.8666%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="1712"/><text x="0.3055%" y="191.50">fekan`&lt;&amp;mut serde_..</text></g><g><title>libsystem_kernel.dylib`read (80 samples, 0.55%)</title><rect x="11.3676%" y="165" width="0.5545%" height="15" fill="rgb(226,26,5)" fg:x="1640" fg:w="80"/><text x="11.6176%" y="175.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.48%)</title><rect x="11.9221%" y="165" width="0.4783%" height="15" fill="rgb(249,33,26)" fg:x="1720" fg:w="69"/><text x="12.1721%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (67 samples, 0.46%)</title><rect x="11.9360%" y="149" width="0.4644%" height="15" fill="rgb(235,183,28)" fg:x="1722" fg:w="67"/><text x="12.1860%" y="159.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (50 samples, 0.35%)</title><rect x="12.4004%" y="165" width="0.3466%" height="15" fill="rgb(221,5,38)" fg:x="1789" fg:w="50"/><text x="12.6504%" y="175.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.35%)</title><rect x="12.4004%" y="149" width="0.3466%" height="15" fill="rgb(247,18,42)" fg:x="1789" fg:w="50"/><text x="12.6504%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (50 samples, 0.35%)</title><rect x="12.4004%" y="133" width="0.3466%" height="15" fill="rgb(241,131,45)" fg:x="1789" fg:w="50"/><text x="12.6504%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="12.7469%" y="149" width="0.0139%" height="15" fill="rgb(249,31,29)" fg:x="1839" fg:w="2"/><text x="12.9969%" y="159.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="12.7677%" y="117" width="0.0208%" height="15" fill="rgb(225,111,53)" fg:x="1842" fg:w="3"/><text x="13.0177%" y="127.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (783 samples, 5.43%)</title><rect x="11.9221%" y="181" width="5.4273%" height="15" fill="rgb(238,160,17)" fg:x="1720" fg:w="783"/><text x="12.1721%" y="191.50">fekan`&lt;..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (664 samples, 4.60%)</title><rect x="12.7469%" y="165" width="4.6025%" height="15" fill="rgb(214,148,48)" fg:x="1839" fg:w="664"/><text x="12.9969%" y="175.50">fekan..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (662 samples, 4.59%)</title><rect x="12.7608%" y="149" width="4.5886%" height="15" fill="rgb(232,36,49)" fg:x="1841" fg:w="662"/><text x="13.0108%" y="159.50">fekan..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (661 samples, 4.58%)</title><rect x="12.7677%" y="133" width="4.5817%" height="15" fill="rgb(209,103,24)" fg:x="1842" fg:w="661"/><text x="13.0177%" y="143.50">fekan..</text></g><g><title>libsystem_kernel.dylib`read (658 samples, 4.56%)</title><rect x="12.7885%" y="117" width="4.5609%" height="15" fill="rgb(229,88,8)" fg:x="1845" fg:w="658"/><text x="13.0385%" y="127.50">libsy..</text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="17.3563%" y="165" width="0.0208%" height="15" fill="rgb(213,181,19)" fg:x="2504" fg:w="3"/><text x="17.6063%" y="175.50"></text></g><g><title>fekan`DYLD-STUB$$read (3 samples, 0.02%)</title><rect x="17.3771%" y="149" width="0.0208%" height="15" fill="rgb(254,191,54)" fg:x="2507" fg:w="3"/><text x="17.6271%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (570 samples, 3.95%)</title><rect x="17.3771%" y="165" width="3.9509%" height="15" fill="rgb(241,83,37)" fg:x="2507" fg:w="570"/><text x="17.6271%" y="175.50">feka..</text></g><g><title>libsystem_kernel.dylib`read (567 samples, 3.93%)</title><rect x="17.3979%" y="149" width="3.9301%" height="15" fill="rgb(233,36,39)" fg:x="2510" fg:w="567"/><text x="17.6479%" y="159.50">libs..</text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (575 samples, 3.99%)</title><rect x="17.3494%" y="181" width="3.9856%" height="15" fill="rgb(226,3,54)" fg:x="2503" fg:w="575"/><text x="17.5994%" y="191.50">feka..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (162 samples, 1.12%)</title><rect x="21.3350%" y="181" width="1.1229%" height="15" fill="rgb(245,192,40)" fg:x="3078" fg:w="162"/><text x="21.5850%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (162 samples, 1.12%)</title><rect x="21.3350%" y="165" width="1.1229%" height="15" fill="rgb(238,167,29)" fg:x="3078" fg:w="162"/><text x="21.5850%" y="175.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,324 samples, 23.04%)</title><rect x="0.0416%" y="197" width="23.0401%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="3324"/><text x="0.2916%" y="207.50">fekan`&lt;&amp;mut serde_json::de::Deseriali..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (90 samples, 0.62%)</title><rect x="22.4579%" y="181" width="0.6238%" height="15" fill="rgb(231,60,39)" fg:x="3240" fg:w="90"/><text x="22.7079%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (90 samples, 0.62%)</title><rect x="22.4579%" y="165" width="0.6238%" height="15" fill="rgb(208,69,12)" fg:x="3240" fg:w="90"/><text x="22.7079%" y="175.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="23.0887%" y="181" width="0.0139%" height="15" fill="rgb(235,93,37)" fg:x="3331" fg:w="2"/><text x="23.3387%" y="191.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 0.80%)</title><rect x="23.0817%" y="197" width="0.8040%" height="15" fill="rgb(213,116,39)" fg:x="3330" fg:w="116"/><text x="23.3317%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (113 samples, 0.78%)</title><rect x="23.1025%" y="181" width="0.7833%" height="15" fill="rgb(222,207,29)" fg:x="3333" fg:w="113"/><text x="23.3525%" y="191.50"></text></g><g><title>fekan`fekan::load_regression_data (3,443 samples, 23.86%)</title><rect x="0.0277%" y="277" width="23.8650%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="3443"/><text x="0.2777%" y="287.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`serde_json::de::from_trait (3,441 samples, 23.85%)</title><rect x="0.0416%" y="261" width="23.8511%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="3441"/><text x="0.2916%" y="271.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,441 samples, 23.85%)</title><rect x="0.0416%" y="245" width="23.8511%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="3441"/><text x="0.2916%" y="255.50">fekan`&lt;&amp;mut serde_json::de::Deserializ..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,441 samples, 23.85%)</title><rect x="0.0416%" y="229" width="23.8511%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="3441"/><text x="0.2916%" y="239.50">fekan`&lt;serde::de::impls::&lt;impl serde::..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,441 samples, 23.85%)</title><rect x="0.0416%" y="213" width="23.8511%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="3441"/><text x="0.2916%" y="223.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.17%)</title><rect x="23.9135%" y="229" width="0.1664%" height="15" fill="rgb(225,35,8)" fg:x="3450" fg:w="24"/><text x="24.1635%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (7 samples, 0.05%)</title><rect x="24.0313%" y="213" width="0.0485%" height="15" fill="rgb(250,213,24)" fg:x="3467" fg:w="7"/><text x="24.2813%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.01%)</title><rect x="24.0660%" y="197" width="0.0139%" height="15" fill="rgb(247,123,22)" fg:x="3472" fg:w="2"/><text x="24.3160%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$memcpy (2 samples, 0.01%)</title><rect x="24.0868%" y="229" width="0.0139%" height="15" fill="rgb(231,138,38)" fg:x="3475" fg:w="2"/><text x="24.3368%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.07%)</title><rect x="24.1076%" y="229" width="0.0693%" height="15" fill="rgb(231,145,46)" fg:x="3478" fg:w="10"/><text x="24.3576%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.06%)</title><rect x="24.1838%" y="229" width="0.0555%" height="15" fill="rgb(251,118,11)" fg:x="3489" fg:w="8"/><text x="24.4338%" y="239.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (371 samples, 2.57%)</title><rect x="23.9135%" y="261" width="2.5716%" height="15" fill="rgb(217,147,25)" fg:x="3450" fg:w="371"/><text x="24.1635%" y="271.50">fe..</text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (371 samples, 2.57%)</title><rect x="23.9135%" y="245" width="2.5716%" height="15" fill="rgb(247,81,37)" fg:x="3450" fg:w="371"/><text x="24.1635%" y="255.50">fe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (324 samples, 2.25%)</title><rect x="24.2393%" y="229" width="2.2458%" height="15" fill="rgb(209,12,38)" fg:x="3497" fg:w="324"/><text x="24.4893%" y="239.50">l..</text></g><g><title>fekan`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (9 samples, 0.06%)</title><rect x="26.4851%" y="261" width="0.0624%" height="15" fill="rgb(227,1,9)" fg:x="3821" fg:w="9"/><text x="26.7351%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.03%)</title><rect x="26.5544%" y="197" width="0.0347%" height="15" fill="rgb(248,47,43)" fg:x="3831" fg:w="5"/><text x="26.8044%" y="207.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::edge::Edge&gt; (6 samples, 0.04%)</title><rect x="26.5544%" y="229" width="0.0416%" height="15" fill="rgb(221,10,30)" fg:x="3831" fg:w="6"/><text x="26.8044%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (6 samples, 0.04%)</title><rect x="26.5544%" y="213" width="0.0416%" height="15" fill="rgb(210,229,1)" fg:x="3831" fg:w="6"/><text x="26.8044%" y="223.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (8 samples, 0.06%)</title><rect x="26.5544%" y="245" width="0.0555%" height="15" fill="rgb(222,148,37)" fg:x="3831" fg:w="8"/><text x="26.8044%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="26.5960%" y="229" width="0.0139%" height="15" fill="rgb(234,67,33)" fg:x="3837" fg:w="2"/><text x="26.8460%" y="239.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (9 samples, 0.06%)</title><rect x="26.5544%" y="261" width="0.0624%" height="15" fill="rgb(247,98,35)" fg:x="3831" fg:w="9"/><text x="26.8044%" y="271.50"></text></g><g><title>fekan`alloc::vec::in_place_collect::from_iter_in_place (4 samples, 0.03%)</title><rect x="26.6168%" y="229" width="0.0277%" height="15" fill="rgb(247,138,52)" fg:x="3840" fg:w="4"/><text x="26.8668%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.03%)</title><rect x="26.6168%" y="213" width="0.0277%" height="15" fill="rgb(213,79,30)" fg:x="3840" fg:w="4"/><text x="26.8668%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.03%)</title><rect x="26.6168%" y="197" width="0.0277%" height="15" fill="rgb(246,177,23)" fg:x="3840" fg:w="4"/><text x="26.8668%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (42 samples, 0.29%)</title><rect x="26.6445%" y="197" width="0.2911%" height="15" fill="rgb(230,62,27)" fg:x="3844" fg:w="42"/><text x="26.8945%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::merge_models (49 samples, 0.34%)</title><rect x="26.6168%" y="261" width="0.3396%" height="15" fill="rgb(216,154,8)" fg:x="3840" fg:w="49"/><text x="26.8668%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::merge_layers (49 samples, 0.34%)</title><rect x="26.6168%" y="245" width="0.3396%" height="15" fill="rgb(244,35,45)" fg:x="3840" fg:w="49"/><text x="26.8668%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::merge_edges (45 samples, 0.31%)</title><rect x="26.6445%" y="229" width="0.3119%" height="15" fill="rgb(251,115,12)" fg:x="3844" fg:w="45"/><text x="26.8945%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (45 samples, 0.31%)</title><rect x="26.6445%" y="213" width="0.3119%" height="15" fill="rgb(240,54,50)" fg:x="3844" fg:w="45"/><text x="26.8945%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (3 samples, 0.02%)</title><rect x="26.9356%" y="197" width="0.0208%" height="15" fill="rgb(233,84,52)" fg:x="3886" fg:w="3"/><text x="27.1856%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (3 samples, 0.02%)</title><rect x="26.9356%" y="181" width="0.0208%" height="15" fill="rgb(207,117,47)" fg:x="3886" fg:w="3"/><text x="27.1856%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.02%)</title><rect x="26.9356%" y="165" width="0.0208%" height="15" fill="rgb(249,43,39)" fg:x="3886" fg:w="3"/><text x="27.1856%" y="175.50"></text></g><g><title>fekan`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="26.9564%" y="229" width="0.0208%" height="15" fill="rgb(209,38,44)" fg:x="3889" fg:w="3"/><text x="27.2064%" y="239.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="26.9772%" y="229" width="0.0139%" height="15" fill="rgb(236,212,23)" fg:x="3892" fg:w="2"/><text x="27.2272%" y="239.50"></text></g><g><title>fekan`__rdl_alloc (5 samples, 0.03%)</title><rect x="26.9911%" y="229" width="0.0347%" height="15" fill="rgb(242,79,21)" fg:x="3894" fg:w="5"/><text x="27.2411%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (532 samples, 3.69%)</title><rect x="27.0257%" y="229" width="3.6875%" height="15" fill="rgb(211,96,35)" fg:x="3899" fg:w="532"/><text x="27.2757%" y="239.50">feka..</text></g><g><title>fekan`DYLD-STUB$$cbrt (12 samples, 0.08%)</title><rect x="34.2067%" y="213" width="0.0832%" height="15" fill="rgb(253,215,40)" fg:x="4935" fg:w="12"/><text x="34.4567%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$exp (8 samples, 0.06%)</title><rect x="34.2899%" y="213" width="0.0555%" height="15" fill="rgb(211,81,21)" fg:x="4947" fg:w="8"/><text x="34.5399%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$log (6 samples, 0.04%)</title><rect x="34.3453%" y="213" width="0.0416%" height="15" fill="rgb(208,190,38)" fg:x="4955" fg:w="6"/><text x="34.5953%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$pow (15 samples, 0.10%)</title><rect x="34.3869%" y="213" width="0.1040%" height="15" fill="rgb(235,213,38)" fg:x="4961" fg:w="15"/><text x="34.6369%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$sin (12 samples, 0.08%)</title><rect x="34.4909%" y="213" width="0.0832%" height="15" fill="rgb(237,122,38)" fg:x="4976" fg:w="12"/><text x="34.7409%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$tan (9 samples, 0.06%)</title><rect x="34.5741%" y="213" width="0.0624%" height="15" fill="rgb(244,218,35)" fg:x="4988" fg:w="9"/><text x="34.8241%" y="223.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bbe4 (23 samples, 0.16%)</title><rect x="38.2061%" y="197" width="0.1594%" height="15" fill="rgb(240,68,47)" fg:x="5512" fg:w="23"/><text x="38.4561%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bcfc (11 samples, 0.08%)</title><rect x="38.3656%" y="197" width="0.0762%" height="15" fill="rgb(210,16,53)" fg:x="5535" fg:w="11"/><text x="38.6156%" y="207.50"></text></g><g><title>libsystem_m.dylib`cbrt (37 samples, 0.26%)</title><rect x="38.4418%" y="197" width="0.2565%" height="15" fill="rgb(235,124,12)" fg:x="5546" fg:w="37"/><text x="38.6918%" y="207.50"></text></g><g><title>libsystem_m.dylib`exp (46 samples, 0.32%)</title><rect x="38.6983%" y="197" width="0.3188%" height="15" fill="rgb(224,169,11)" fg:x="5583" fg:w="46"/><text x="38.9483%" y="207.50"></text></g><g><title>libsystem_m.dylib`log (62 samples, 0.43%)</title><rect x="39.0171%" y="197" width="0.4297%" height="15" fill="rgb(250,166,2)" fg:x="5629" fg:w="62"/><text x="39.2671%" y="207.50"></text></g><g><title>libsystem_m.dylib`pow (293 samples, 2.03%)</title><rect x="39.4469%" y="197" width="2.0309%" height="15" fill="rgb(242,216,29)" fg:x="5691" fg:w="293"/><text x="39.6969%" y="207.50">l..</text></g><g><title>libsystem_m.dylib`sin (33 samples, 0.23%)</title><rect x="41.4778%" y="197" width="0.2287%" height="15" fill="rgb(230,116,27)" fg:x="5984" fg:w="33"/><text x="41.7278%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (1,125 samples, 7.80%)</title><rect x="34.6364%" y="213" width="7.7979%" height="15" fill="rgb(228,99,48)" fg:x="4997" fg:w="1125"/><text x="34.8864%" y="223.50">fekan`fekan..</text></g><g><title>libsystem_m.dylib`tan (105 samples, 0.73%)</title><rect x="41.7065%" y="197" width="0.7278%" height="15" fill="rgb(253,11,6)" fg:x="6017" fg:w="105"/><text x="41.9565%" y="207.50"></text></g><g><title>libsystem_m.dylib`cbrt (16 samples, 0.11%)</title><rect x="42.4343%" y="213" width="0.1109%" height="15" fill="rgb(247,143,39)" fg:x="6122" fg:w="16"/><text x="42.6843%" y="223.50"></text></g><g><title>libsystem_m.dylib`sin (10 samples, 0.07%)</title><rect x="42.5452%" y="213" width="0.0693%" height="15" fill="rgb(236,97,10)" fg:x="6138" fg:w="10"/><text x="42.7952%" y="223.50"></text></g><g><title>libsystem_m.dylib`tan (6 samples, 0.04%)</title><rect x="42.6145%" y="213" width="0.0416%" height="15" fill="rgb(233,208,19)" fg:x="6148" fg:w="6"/><text x="42.8645%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.01%)</title><rect x="42.6561%" y="213" width="0.0139%" height="15" fill="rgb(216,164,2)" fg:x="6154" fg:w="2"/><text x="42.9061%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.01%)</title><rect x="42.9611%" y="197" width="0.0139%" height="15" fill="rgb(220,129,5)" fg:x="6198" fg:w="2"/><text x="43.2111%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="42.9750%" y="197" width="0.0139%" height="15" fill="rgb(242,17,10)" fg:x="6200" fg:w="2"/><text x="43.2250%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (27 samples, 0.19%)</title><rect x="44.2712%" y="181" width="0.1871%" height="15" fill="rgb(242,107,0)" fg:x="6387" fg:w="27"/><text x="44.5212%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (281 samples, 1.95%)</title><rect x="42.6700%" y="213" width="1.9477%" height="15" fill="rgb(251,28,31)" fg:x="6156" fg:w="281"/><text x="42.9200%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (235 samples, 1.63%)</title><rect x="42.9888%" y="197" width="1.6289%" height="15" fill="rgb(233,223,10)" fg:x="6202" fg:w="235"/><text x="43.2388%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (23 samples, 0.16%)</title><rect x="44.4583%" y="181" width="0.1594%" height="15" fill="rgb(215,21,27)" fg:x="6414" fg:w="23"/><text x="44.7083%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.02%)</title><rect x="44.6524%" y="197" width="0.0208%" height="15" fill="rgb(232,23,21)" fg:x="6442" fg:w="3"/><text x="44.9024%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.03%)</title><rect x="44.6732%" y="197" width="0.0347%" height="15" fill="rgb(244,5,23)" fg:x="6445" fg:w="5"/><text x="44.9232%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (11 samples, 0.08%)</title><rect x="44.7425%" y="181" width="0.0762%" height="15" fill="rgb(226,81,46)" fg:x="6455" fg:w="11"/><text x="44.9925%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (6 samples, 0.04%)</title><rect x="44.9019%" y="165" width="0.0416%" height="15" fill="rgb(247,70,30)" fg:x="6478" fg:w="6"/><text x="45.1519%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 0.34%)</title><rect x="44.6177%" y="213" width="0.3396%" height="15" fill="rgb(212,68,19)" fg:x="6437" fg:w="49"/><text x="44.8677%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (36 samples, 0.25%)</title><rect x="44.7078%" y="197" width="0.2495%" height="15" fill="rgb(240,187,13)" fg:x="6450" fg:w="36"/><text x="44.9578%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (20 samples, 0.14%)</title><rect x="44.8187%" y="181" width="0.1386%" height="15" fill="rgb(223,113,26)" fg:x="6466" fg:w="20"/><text x="45.0687%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.01%)</title><rect x="44.9435%" y="165" width="0.0139%" height="15" fill="rgb(206,192,2)" fg:x="6484" fg:w="2"/><text x="45.1935%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.07%)</title><rect x="44.9574%" y="213" width="0.0693%" height="15" fill="rgb(241,108,4)" fg:x="6486" fg:w="10"/><text x="45.2074%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::suggest_symbolic (2,082 samples, 14.43%)</title><rect x="30.7132%" y="229" width="14.4313%" height="15" fill="rgb(247,173,49)" fg:x="4431" fg:w="2082"/><text x="30.9632%" y="239.50">fekan`fekan::kan_layer..</text></g><g><title>libsystem_platform.dylib`_platform_memset (17 samples, 0.12%)</title><rect x="45.0267%" y="213" width="0.1178%" height="15" fill="rgb(224,114,35)" fg:x="6496" fg:w="17"/><text x="45.2767%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.03%)</title><rect x="45.1445%" y="229" width="0.0277%" height="15" fill="rgb(245,159,27)" fg:x="6513" fg:w="4"/><text x="45.3945%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.07%)</title><rect x="45.1722%" y="229" width="0.0693%" height="15" fill="rgb(245,172,44)" fg:x="6517" fg:w="10"/><text x="45.4222%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="45.2416%" y="229" width="0.0277%" height="15" fill="rgb(236,23,11)" fg:x="6527" fg:w="4"/><text x="45.4916%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="45.2762%" y="229" width="0.0139%" height="15" fill="rgb(205,117,38)" fg:x="6532" fg:w="2"/><text x="45.5262%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="45.2901%" y="229" width="0.0208%" height="15" fill="rgb(237,72,25)" fg:x="6534" fg:w="3"/><text x="45.5401%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::test_and_set_symbolic (2,650 samples, 18.37%)</title><rect x="26.9564%" y="261" width="18.3683%" height="15" fill="rgb(244,70,9)" fg:x="3889" fg:w="2650"/><text x="27.2064%" y="271.50">fekan`fekan::kan::Kan::test_a..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::test_and_set_symbolic (2,650 samples, 18.37%)</title><rect x="26.9564%" y="245" width="18.3683%" height="15" fill="rgb(217,125,39)" fg:x="3889" fg:w="2650"/><text x="27.2064%" y="255.50">fekan`fekan::kan_layer::KanLa..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="45.3109%" y="229" width="0.0139%" height="15" fill="rgb(235,36,10)" fg:x="6537" fg:w="2"/><text x="45.5609%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (61 samples, 0.42%)</title><rect x="46.7041%" y="181" width="0.4228%" height="15" fill="rgb(251,123,47)" fg:x="6738" fg:w="61"/><text x="46.9541%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (35 samples, 0.24%)</title><rect x="46.8843%" y="165" width="0.2426%" height="15" fill="rgb(221,13,13)" fg:x="6764" fg:w="35"/><text x="47.1343%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (35 samples, 0.24%)</title><rect x="47.1269%" y="181" width="0.2426%" height="15" fill="rgb(238,131,9)" fg:x="6799" fg:w="35"/><text x="47.3769%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (251 samples, 1.74%)</title><rect x="45.9070%" y="197" width="1.7398%" height="15" fill="rgb(211,50,8)" fg:x="6623" fg:w="251"/><text x="46.1570%" y="207.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (40 samples, 0.28%)</title><rect x="47.3695%" y="181" width="0.2773%" height="15" fill="rgb(245,182,24)" fg:x="6834" fg:w="40"/><text x="47.6195%" y="191.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.03%)</title><rect x="47.6190%" y="165" width="0.0277%" height="15" fill="rgb(242,14,37)" fg:x="6870" fg:w="4"/><text x="47.8690%" y="175.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (53 samples, 0.37%)</title><rect x="48.1389%" y="181" width="0.3674%" height="15" fill="rgb(246,228,12)" fg:x="6945" fg:w="53"/><text x="48.3889%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.01%)</title><rect x="48.4924%" y="165" width="0.0139%" height="15" fill="rgb(213,55,15)" fg:x="6996" fg:w="2"/><text x="48.7424%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="48.4924%" y="149" width="0.0139%" height="15" fill="rgb(209,9,3)" fg:x="6996" fg:w="2"/><text x="48.7424%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (436 samples, 3.02%)</title><rect x="45.4980%" y="213" width="3.0221%" height="15" fill="rgb(230,59,30)" fg:x="6564" fg:w="436"/><text x="45.7480%" y="223.50">fek..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (126 samples, 0.87%)</title><rect x="47.6468%" y="197" width="0.8734%" height="15" fill="rgb(209,121,21)" fg:x="6874" fg:w="126"/><text x="47.8968%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="48.5063%" y="181" width="0.0139%" height="15" fill="rgb(220,109,13)" fg:x="6998" fg:w="2"/><text x="48.7563%" y="191.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.06%)</title><rect x="48.5201%" y="213" width="0.0555%" height="15" fill="rgb(232,18,1)" fg:x="7000" fg:w="8"/><text x="48.7701%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (468 samples, 3.24%)</title><rect x="45.3525%" y="229" width="3.2439%" height="15" fill="rgb(215,41,42)" fg:x="6543" fg:w="468"/><text x="45.6025%" y="239.50">fek..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.02%)</title><rect x="48.5756%" y="213" width="0.0208%" height="15" fill="rgb(224,123,36)" fg:x="7008" fg:w="3"/><text x="48.8256%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (16 samples, 0.11%)</title><rect x="48.5964%" y="229" width="0.1109%" height="15" fill="rgb(240,125,3)" fg:x="7011" fg:w="16"/><text x="48.8464%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="48.7142%" y="229" width="0.0139%" height="15" fill="rgb(205,98,50)" fg:x="7028" fg:w="2"/><text x="48.9642%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (489 samples, 3.39%)</title><rect x="45.3455%" y="245" width="3.3895%" height="15" fill="rgb(205,185,37)" fg:x="6542" fg:w="489"/><text x="45.5955%" y="255.50">fek..</text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.06%)</title><rect x="48.8459%" y="117" width="0.0555%" height="15" fill="rgb(238,207,15)" fg:x="7047" fg:w="8"/><text x="49.0959%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.06%)</title><rect x="48.8459%" y="101" width="0.0555%" height="15" fill="rgb(213,199,42)" fg:x="7047" fg:w="8"/><text x="49.0959%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.03%)</title><rect x="48.8667%" y="85" width="0.0347%" height="15" fill="rgb(235,201,11)" fg:x="7050" fg:w="5"/><text x="49.1167%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.01%)</title><rect x="48.8875%" y="69" width="0.0139%" height="15" fill="rgb(207,46,11)" fg:x="7053" fg:w="2"/><text x="49.1375%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.01%)</title><rect x="48.8875%" y="53" width="0.0139%" height="15" fill="rgb(241,35,35)" fg:x="7053" fg:w="2"/><text x="49.1375%" y="63.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.01%)</title><rect x="48.8875%" y="37" width="0.0139%" height="15" fill="rgb(243,32,47)" fg:x="7053" fg:w="2"/><text x="49.1375%" y="47.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (22 samples, 0.15%)</title><rect x="48.7558%" y="229" width="0.1525%" height="15" fill="rgb(247,202,23)" fg:x="7034" fg:w="22"/><text x="49.0058%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (22 samples, 0.15%)</title><rect x="48.7558%" y="213" width="0.1525%" height="15" fill="rgb(219,102,11)" fg:x="7034" fg:w="22"/><text x="49.0058%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (22 samples, 0.15%)</title><rect x="48.7558%" y="197" width="0.1525%" height="15" fill="rgb(243,110,44)" fg:x="7034" fg:w="22"/><text x="49.0058%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (20 samples, 0.14%)</title><rect x="48.7697%" y="181" width="0.1386%" height="15" fill="rgb(222,74,54)" fg:x="7036" fg:w="20"/><text x="49.0197%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (19 samples, 0.13%)</title><rect x="48.7766%" y="165" width="0.1317%" height="15" fill="rgb(216,99,12)" fg:x="7037" fg:w="19"/><text x="49.0266%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (17 samples, 0.12%)</title><rect x="48.7905%" y="149" width="0.1178%" height="15" fill="rgb(226,22,26)" fg:x="7039" fg:w="17"/><text x="49.0405%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (14 samples, 0.10%)</title><rect x="48.8113%" y="133" width="0.0970%" height="15" fill="rgb(217,163,10)" fg:x="7042" fg:w="14"/><text x="49.0613%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (25 samples, 0.17%)</title><rect x="48.7419%" y="245" width="0.1733%" height="15" fill="rgb(213,25,53)" fg:x="7032" fg:w="25"/><text x="48.9919%" y="255.50"></text></g><g><title>fekan`fekan::preset_knot_ranges (518 samples, 3.59%)</title><rect x="45.3317%" y="261" width="3.5905%" height="15" fill="rgb(252,105,26)" fg:x="6540" fg:w="518"/><text x="45.5817%" y="271.50">feka..</text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (414 samples, 2.87%)</title><rect x="48.9707%" y="213" width="2.8696%" height="15" fill="rgb(220,39,43)" fg:x="7065" fg:w="414"/><text x="49.2207%" y="223.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (409 samples, 2.83%)</title><rect x="49.0053%" y="197" width="2.8350%" height="15" fill="rgb(229,68,48)" fg:x="7070" fg:w="409"/><text x="49.2553%" y="207.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (362 samples, 2.51%)</title><rect x="49.3311%" y="181" width="2.5092%" height="15" fill="rgb(252,8,32)" fg:x="7117" fg:w="362"/><text x="49.5811%" y="191.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (271 samples, 1.88%)</title><rect x="49.9619%" y="165" width="1.8784%" height="15" fill="rgb(223,20,43)" fg:x="7208" fg:w="271"/><text x="50.2119%" y="175.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (84 samples, 0.58%)</title><rect x="51.2581%" y="149" width="0.5822%" height="15" fill="rgb(229,81,49)" fg:x="7395" fg:w="84"/><text x="51.5081%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (21 samples, 0.15%)</title><rect x="51.8403%" y="213" width="0.1456%" height="15" fill="rgb(236,28,36)" fg:x="7479" fg:w="21"/><text x="52.0903%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (441 samples, 3.06%)</title><rect x="48.9430%" y="229" width="3.0568%" height="15" fill="rgb(249,185,26)" fg:x="7061" fg:w="441"/><text x="49.1930%" y="239.50">fek..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="51.9859%" y="213" width="0.0139%" height="15" fill="rgb(249,174,33)" fg:x="7500" fg:w="2"/><text x="52.2359%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (445 samples, 3.08%)</title><rect x="48.9291%" y="245" width="3.0845%" height="15" fill="rgb(233,201,37)" fg:x="7059" fg:w="445"/><text x="49.1791%" y="255.50">fek..</text></g><g><title>fekan`fekan::validate_model (447 samples, 3.10%)</title><rect x="48.9222%" y="261" width="3.0984%" height="15" fill="rgb(221,78,26)" fg:x="7058" fg:w="447"/><text x="49.1722%" y="271.50">fek..</text></g><g><title>fekan`rand::rng::Rng::gen_range (5 samples, 0.03%)</title><rect x="52.0205%" y="261" width="0.0347%" height="15" fill="rgb(250,127,30)" fg:x="7505" fg:w="5"/><text x="52.2705%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="52.0621%" y="261" width="0.0277%" height="15" fill="rgb(230,49,44)" fg:x="7511" fg:w="4"/><text x="52.3121%" y="271.50"></text></g><g><title>fekan`fekan::train_model (4,070 samples, 28.21%)</title><rect x="23.8927%" y="277" width="28.2110%" height="15" fill="rgb(229,67,23)" fg:x="3447" fg:w="4070"/><text x="24.1427%" y="287.50">fekan`fekan::train_model</text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.01%)</title><rect x="52.1106%" y="277" width="0.0139%" height="15" fill="rgb(249,83,47)" fg:x="7518" fg:w="2"/><text x="52.3606%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.03%)</title><rect x="52.1314%" y="277" width="0.0347%" height="15" fill="rgb(215,43,3)" fg:x="7521" fg:w="5"/><text x="52.3814%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="52.1661%" y="277" width="0.0208%" height="15" fill="rgb(238,154,13)" fg:x="7526" fg:w="3"/><text x="52.4161%" y="287.50"></text></g><g><title>fekan`main (7,530 samples, 52.19%)</title><rect x="0.0000%" y="357" width="52.1938%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="7530"/><text x="0.2500%" y="367.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (7,530 samples, 52.19%)</title><rect x="0.0000%" y="341" width="52.1938%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="7530"/><text x="0.2500%" y="351.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (7,530 samples, 52.19%)</title><rect x="0.0000%" y="325" width="52.1938%" height="15" fill="rgb(235,30,7)" fg:x="0" fg:w="7530"/><text x="0.2500%" y="335.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (7,530 samples, 52.19%)</title><rect x="0.0000%" y="309" width="52.1938%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="7530"/><text x="0.2500%" y="319.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (7,530 samples, 52.19%)</title><rect x="0.0000%" y="293" width="52.1938%" height="15" fill="rgb(211,146,34)" fg:x="0" fg:w="7530"/><text x="0.2500%" y="303.50">fekan`fekan::main</text></g><g><title>dyld`start (7,531 samples, 52.20%)</title><rect x="0.0000%" y="373" width="52.2007%" height="15" fill="rgb(228,22,38)" fg:x="0" fg:w="7531"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.02%)</title><rect x="52.2007%" y="373" width="0.0208%" height="15" fill="rgb(235,168,5)" fg:x="7531" fg:w="3"/><text x="52.4507%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (6 samples, 0.04%)</title><rect x="52.2285%" y="373" width="0.0416%" height="15" fill="rgb(221,155,16)" fg:x="7535" fg:w="6"/><text x="52.4785%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.12%)</title><rect x="52.2700%" y="373" width="0.1178%" height="15" fill="rgb(215,215,53)" fg:x="7541" fg:w="17"/><text x="52.5200%" y="383.50"></text></g><g><title>fekan`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="52.9563%" y="293" width="0.0208%" height="15" fill="rgb(223,4,10)" fg:x="7640" fg:w="3"/><text x="53.2063%" y="303.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (840 samples, 5.82%)</title><rect x="53.1365%" y="261" width="5.8224%" height="15" fill="rgb(234,103,6)" fg:x="7666" fg:w="840"/><text x="53.3865%" y="271.50">fekan`f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (497 samples, 3.44%)</title><rect x="55.5140%" y="245" width="3.4449%" height="15" fill="rgb(227,97,0)" fg:x="8009" fg:w="497"/><text x="55.7640%" y="255.50">fek..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (216 samples, 1.50%)</title><rect x="58.9589%" y="261" width="1.4972%" height="15" fill="rgb(234,150,53)" fg:x="8506" fg:w="216"/><text x="59.2089%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (1,077 samples, 7.47%)</title><rect x="53.0533%" y="277" width="7.4652%" height="15" fill="rgb(228,201,54)" fg:x="7654" fg:w="1077"/><text x="53.3033%" y="287.50">fekan`feka..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (9 samples, 0.06%)</title><rect x="60.4561%" y="261" width="0.0624%" height="15" fill="rgb(222,22,37)" fg:x="8722" fg:w="9"/><text x="60.7061%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (5 samples, 0.03%)</title><rect x="60.5185%" y="277" width="0.0347%" height="15" fill="rgb(237,53,32)" fg:x="8731" fg:w="5"/><text x="60.7685%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="60.5531%" y="277" width="0.0208%" height="15" fill="rgb(233,25,53)" fg:x="8736" fg:w="3"/><text x="60.8031%" y="287.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (1,100 samples, 7.62%)</title><rect x="52.9771%" y="293" width="7.6246%" height="15" fill="rgb(210,40,34)" fg:x="7643" fg:w="1100"/><text x="53.2271%" y="303.50">fekan`feka..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="60.5739%" y="277" width="0.0277%" height="15" fill="rgb(241,220,44)" fg:x="8739" fg:w="4"/><text x="60.8239%" y="287.50"></text></g><g><title>fekan`__rdl_alloc (3 samples, 0.02%)</title><rect x="60.8027%" y="277" width="0.0208%" height="15" fill="rgb(235,28,35)" fg:x="8772" fg:w="3"/><text x="61.0527%" y="287.50"></text></g><g><title>fekan`__rdl_alloc_zeroed (4 samples, 0.03%)</title><rect x="60.8235%" y="277" width="0.0277%" height="15" fill="rgb(210,56,17)" fg:x="8775" fg:w="4"/><text x="61.0735%" y="287.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.03%)</title><rect x="61.4057%" y="261" width="0.0347%" height="15" fill="rgb(224,130,29)" fg:x="8859" fg:w="5"/><text x="61.6557%" y="271.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (5 samples, 0.03%)</title><rect x="61.4057%" y="245" width="0.0347%" height="15" fill="rgb(235,212,8)" fg:x="8859" fg:w="5"/><text x="61.6557%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.03%)</title><rect x="61.4057%" y="229" width="0.0347%" height="15" fill="rgb(223,33,50)" fg:x="8859" fg:w="5"/><text x="61.6557%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.03%)</title><rect x="61.4057%" y="213" width="0.0347%" height="15" fill="rgb(219,149,13)" fg:x="8859" fg:w="5"/><text x="61.6557%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.03%)</title><rect x="61.4057%" y="197" width="0.0347%" height="15" fill="rgb(250,156,29)" fg:x="8859" fg:w="5"/><text x="61.6557%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (5 samples, 0.03%)</title><rect x="61.4057%" y="181" width="0.0347%" height="15" fill="rgb(216,193,19)" fg:x="8859" fg:w="5"/><text x="61.6557%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (5 samples, 0.03%)</title><rect x="61.4057%" y="165" width="0.0347%" height="15" fill="rgb(216,135,14)" fg:x="8859" fg:w="5"/><text x="61.6557%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (916 samples, 6.35%)</title><rect x="76.1350%" y="229" width="6.3492%" height="15" fill="rgb(241,47,5)" fg:x="10984" fg:w="916"/><text x="76.3850%" y="239.50">fekan`fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (610 samples, 4.23%)</title><rect x="78.2560%" y="213" width="4.2282%" height="15" fill="rgb(233,42,35)" fg:x="11290" fg:w="610"/><text x="78.5060%" y="223.50">fekan..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (283 samples, 1.96%)</title><rect x="82.4842%" y="229" width="1.9616%" height="15" fill="rgb(231,13,6)" fg:x="11900" fg:w="283"/><text x="82.7342%" y="239.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (3,157 samples, 21.88%)</title><rect x="67.6163%" y="245" width="21.8826%" height="15" fill="rgb(207,181,40)" fg:x="9755" fg:w="3157"/><text x="67.8663%" y="255.50">fekan`fekan::kan_layer::edge::basis..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (729 samples, 5.05%)</title><rect x="84.4458%" y="229" width="5.0530%" height="15" fill="rgb(254,173,49)" fg:x="12183" fg:w="729"/><text x="84.6958%" y="239.50">fekan`..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (7 samples, 0.05%)</title><rect x="89.4503%" y="213" width="0.0485%" height="15" fill="rgb(221,1,38)" fg:x="12905" fg:w="7"/><text x="89.7003%" y="223.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.07%)</title><rect x="95.1757%" y="229" width="0.0693%" height="15" fill="rgb(206,124,46)" fg:x="13731" fg:w="10"/><text x="95.4257%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (4,878 samples, 33.81%)</title><rect x="61.4404%" y="261" width="33.8116%" height="15" fill="rgb(249,21,11)" fg:x="8864" fg:w="4878"/><text x="61.6904%" y="271.50">fekan`fekan::kan_layer::edge::basis_cached</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (830 samples, 5.75%)</title><rect x="89.4989%" y="245" width="5.7531%" height="15" fill="rgb(222,201,40)" fg:x="12912" fg:w="830"/><text x="89.7489%" y="255.50">fekan`h..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (62 samples, 0.43%)</title><rect x="95.2520%" y="261" width="0.4297%" height="15" fill="rgb(235,61,29)" fg:x="13742" fg:w="62"/><text x="95.5020%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (5,029 samples, 34.86%)</title><rect x="60.8512%" y="277" width="34.8583%" height="15" fill="rgb(219,207,3)" fg:x="8779" fg:w="5029"/><text x="61.1012%" y="287.50">fekan`fekan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (4 samples, 0.03%)</title><rect x="95.6817%" y="261" width="0.0277%" height="15" fill="rgb(222,56,46)" fg:x="13804" fg:w="4"/><text x="95.9317%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (87 samples, 0.60%)</title><rect x="95.7094%" y="277" width="0.6030%" height="15" fill="rgb(239,76,54)" fg:x="13808" fg:w="87"/><text x="95.9594%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (7 samples, 0.05%)</title><rect x="96.3125%" y="277" width="0.0485%" height="15" fill="rgb(231,124,27)" fg:x="13895" fg:w="7"/><text x="96.5625%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="96.3610%" y="277" width="0.0277%" height="15" fill="rgb(249,195,6)" fg:x="13902" fg:w="4"/><text x="96.6110%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.06%)</title><rect x="96.3887%" y="277" width="0.0624%" height="15" fill="rgb(237,174,47)" fg:x="13906" fg:w="9"/><text x="96.6387%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.10%)</title><rect x="96.4511%" y="277" width="0.1040%" height="15" fill="rgb(206,201,31)" fg:x="13915" fg:w="15"/><text x="96.7011%" y="287.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (5,190 samples, 35.97%)</title><rect x="60.6016%" y="293" width="35.9742%" height="15" fill="rgb(231,57,52)" fg:x="8743" fg:w="5190"/><text x="60.8516%" y="303.50">fekan`fekan::kan::Kan::forward</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="96.5551%" y="277" width="0.0208%" height="15" fill="rgb(248,177,22)" fg:x="13930" fg:w="3"/><text x="96.8051%" y="287.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (6 samples, 0.04%)</title><rect x="96.5759%" y="293" width="0.0416%" height="15" fill="rgb(215,211,37)" fg:x="13933" fg:w="6"/><text x="96.8259%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.01%)</title><rect x="96.8670%" y="213" width="0.0139%" height="15" fill="rgb(241,128,51)" fg:x="13975" fg:w="2"/><text x="97.1170%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.02%)</title><rect x="96.8878%" y="213" width="0.0208%" height="15" fill="rgb(227,165,31)" fg:x="13978" fg:w="3"/><text x="97.1378%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (7 samples, 0.05%)</title><rect x="96.8670%" y="229" width="0.0485%" height="15" fill="rgb(228,167,24)" fg:x="13975" fg:w="7"/><text x="97.1170%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 0.06%)</title><rect x="96.8670%" y="277" width="0.0555%" height="15" fill="rgb(228,143,12)" fg:x="13975" fg:w="8"/><text x="97.1170%" y="287.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (8 samples, 0.06%)</title><rect x="96.8670%" y="261" width="0.0555%" height="15" fill="rgb(249,149,8)" fg:x="13975" fg:w="8"/><text x="97.1170%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (8 samples, 0.06%)</title><rect x="96.8670%" y="245" width="0.0555%" height="15" fill="rgb(243,35,44)" fg:x="13975" fg:w="8"/><text x="97.1170%" y="255.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="97.0749%" y="229" width="0.0139%" height="15" fill="rgb(246,89,9)" fg:x="14005" fg:w="2"/><text x="97.3249%" y="239.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="97.0749%" y="213" width="0.0139%" height="15" fill="rgb(233,213,13)" fg:x="14005" fg:w="2"/><text x="97.3249%" y="223.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.02%)</title><rect x="97.2482%" y="213" width="0.0208%" height="15" fill="rgb(233,141,41)" fg:x="14030" fg:w="3"/><text x="97.4982%" y="223.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (4 samples, 0.03%)</title><rect x="97.5601%" y="181" width="0.0277%" height="15" fill="rgb(239,167,4)" fg:x="14075" fg:w="4"/><text x="97.8101%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.02%)</title><rect x="97.5671%" y="165" width="0.0208%" height="15" fill="rgb(209,217,16)" fg:x="14076" fg:w="3"/><text x="97.8171%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="97.5740%" y="149" width="0.0139%" height="15" fill="rgb(219,88,35)" fg:x="14077" fg:w="2"/><text x="97.8240%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.01%)</title><rect x="97.8374%" y="133" width="0.0139%" height="15" fill="rgb(220,193,23)" fg:x="14115" fg:w="2"/><text x="98.0874%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.01%)</title><rect x="97.9552%" y="117" width="0.0139%" height="15" fill="rgb(230,90,52)" fg:x="14132" fg:w="2"/><text x="98.2052%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.01%)</title><rect x="98.0453%" y="101" width="0.0139%" height="15" fill="rgb(252,106,19)" fg:x="14145" fg:w="2"/><text x="98.2953%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.02%)</title><rect x="98.1008%" y="85" width="0.0208%" height="15" fill="rgb(206,74,20)" fg:x="14153" fg:w="3"/><text x="98.3508%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.01%)</title><rect x="98.1077%" y="69" width="0.0139%" height="15" fill="rgb(230,138,44)" fg:x="14154" fg:w="2"/><text x="98.3577%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (30 samples, 0.21%)</title><rect x="97.9691%" y="117" width="0.2079%" height="15" fill="rgb(235,182,43)" fg:x="14134" fg:w="30"/><text x="98.2191%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (17 samples, 0.12%)</title><rect x="98.0592%" y="101" width="0.1178%" height="15" fill="rgb(242,16,51)" fg:x="14147" fg:w="17"/><text x="98.3092%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.06%)</title><rect x="98.1216%" y="85" width="0.0555%" height="15" fill="rgb(248,9,4)" fg:x="14156" fg:w="8"/><text x="98.3716%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.03%)</title><rect x="98.1424%" y="69" width="0.0347%" height="15" fill="rgb(210,31,22)" fg:x="14159" fg:w="5"/><text x="98.3924%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.02%)</title><rect x="98.1562%" y="53" width="0.0208%" height="15" fill="rgb(239,54,39)" fg:x="14161" fg:w="3"/><text x="98.4062%" y="63.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (49 samples, 0.34%)</title><rect x="97.8513%" y="133" width="0.3396%" height="15" fill="rgb(230,99,41)" fg:x="14117" fg:w="49"/><text x="98.1013%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="98.1770%" y="117" width="0.0139%" height="15" fill="rgb(253,106,12)" fg:x="14164" fg:w="2"/><text x="98.4270%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (134 samples, 0.93%)</title><rect x="97.2690%" y="213" width="0.9288%" height="15" fill="rgb(213,46,41)" fg:x="14033" fg:w="134"/><text x="97.5190%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (111 samples, 0.77%)</title><rect x="97.4284%" y="197" width="0.7694%" height="15" fill="rgb(215,133,35)" fg:x="14056" fg:w="111"/><text x="97.6784%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (88 samples, 0.61%)</title><rect x="97.5879%" y="181" width="0.6100%" height="15" fill="rgb(213,28,5)" fg:x="14079" fg:w="88"/><text x="97.8379%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (78 samples, 0.54%)</title><rect x="97.6572%" y="165" width="0.5407%" height="15" fill="rgb(215,77,49)" fg:x="14089" fg:w="78"/><text x="97.9072%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (68 samples, 0.47%)</title><rect x="97.7265%" y="149" width="0.4713%" height="15" fill="rgb(248,100,22)" fg:x="14099" fg:w="68"/><text x="97.9765%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (160 samples, 1.11%)</title><rect x="97.0957%" y="229" width="1.1090%" height="15" fill="rgb(208,67,9)" fg:x="14008" fg:w="160"/><text x="97.3457%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (188 samples, 1.30%)</title><rect x="96.9294%" y="245" width="1.3031%" height="15" fill="rgb(219,133,21)" fg:x="13984" fg:w="188"/><text x="97.1794%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="98.2048%" y="229" width="0.0277%" height="15" fill="rgb(246,46,29)" fg:x="14168" fg:w="4"/><text x="98.4548%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (191 samples, 1.32%)</title><rect x="96.9224%" y="261" width="1.3239%" height="15" fill="rgb(246,185,52)" fg:x="13983" fg:w="191"/><text x="97.1724%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="98.2325%" y="245" width="0.0139%" height="15" fill="rgb(252,136,11)" fg:x="14172" fg:w="2"/><text x="98.4825%" y="255.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (192 samples, 1.33%)</title><rect x="96.9224%" y="277" width="1.3308%" height="15" fill="rgb(219,138,53)" fg:x="13983" fg:w="192"/><text x="97.1724%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.01%)</title><rect x="98.2671%" y="229" width="0.0139%" height="15" fill="rgb(211,51,23)" fg:x="14177" fg:w="2"/><text x="98.5171%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.01%)</title><rect x="98.2671%" y="213" width="0.0139%" height="15" fill="rgb(247,221,28)" fg:x="14177" fg:w="2"/><text x="98.5171%" y="223.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (3 samples, 0.02%)</title><rect x="98.2671%" y="245" width="0.0208%" height="15" fill="rgb(251,222,45)" fg:x="14177" fg:w="3"/><text x="98.5171%" y="255.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.03%)</title><rect x="98.2671%" y="261" width="0.0277%" height="15" fill="rgb(217,162,53)" fg:x="14177" fg:w="4"/><text x="98.5171%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::update_knots_from_samples (7 samples, 0.05%)</title><rect x="98.2533%" y="277" width="0.0485%" height="15" fill="rgb(229,93,14)" fg:x="14175" fg:w="7"/><text x="98.5033%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="98.3226%" y="277" width="0.0139%" height="15" fill="rgb(209,67,49)" fg:x="14185" fg:w="2"/><text x="98.5726%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="98.3365%" y="277" width="0.0139%" height="15" fill="rgb(213,87,29)" fg:x="14187" fg:w="2"/><text x="98.5865%" y="287.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (355 samples, 2.46%)</title><rect x="96.6244%" y="293" width="2.4607%" height="15" fill="rgb(205,151,52)" fg:x="13940" fg:w="355"/><text x="96.8744%" y="303.50">fe..</text></g><g><title>libsystem_platform.dylib`_platform_memset (106 samples, 0.73%)</title><rect x="98.3503%" y="277" width="0.7347%" height="15" fill="rgb(253,215,39)" fg:x="14189" fg:w="106"/><text x="98.6003%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (4 samples, 0.03%)</title><rect x="99.0920%" y="245" width="0.0277%" height="15" fill="rgb(221,220,41)" fg:x="14296" fg:w="4"/><text x="99.3420%" y="255.50"></text></g><g><title>fekan`indicatif::progress_bar::TickerControl::run (6 samples, 0.04%)</title><rect x="99.0850%" y="293" width="0.0416%" height="15" fill="rgb(218,133,21)" fg:x="14295" fg:w="6"/><text x="99.3350%" y="303.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait_timeout_while (5 samples, 0.03%)</title><rect x="99.0920%" y="277" width="0.0347%" height="15" fill="rgb(221,193,43)" fg:x="14296" fg:w="5"/><text x="99.3420%" y="287.50"></text></g><g><title>fekan`std::sys::sync::condvar::pthread::Condvar::wait_timeout (5 samples, 0.03%)</title><rect x="99.0920%" y="261" width="0.0347%" height="15" fill="rgb(240,128,52)" fg:x="14296" fg:w="5"/><text x="99.3420%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.03%)</title><rect x="99.1266%" y="293" width="0.0347%" height="15" fill="rgb(253,114,12)" fg:x="14301" fg:w="5"/><text x="99.3766%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (50 samples, 0.35%)</title><rect x="99.1613%" y="293" width="0.3466%" height="15" fill="rgb(215,223,47)" fg:x="14306" fg:w="50"/><text x="99.4113%" y="303.50"></text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (6,804 samples, 47.16%)</title><rect x="52.4156%" y="309" width="47.1616%" height="15" fill="rgb(248,225,23)" fg:x="7562" fg:w="6804"/><text x="52.6656%" y="319.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (10 samples, 0.07%)</title><rect x="99.5079%" y="293" width="0.0693%" height="15" fill="rgb(250,108,0)" fg:x="14356" fg:w="10"/><text x="99.7579%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (10 samples, 0.07%)</title><rect x="99.5079%" y="277" width="0.0693%" height="15" fill="rgb(228,208,7)" fg:x="14356" fg:w="10"/><text x="99.7579%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.07%)</title><rect x="99.5079%" y="261" width="0.0693%" height="15" fill="rgb(244,45,10)" fg:x="14356" fg:w="10"/><text x="99.7579%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (15 samples, 0.10%)</title><rect x="99.5772%" y="309" width="0.1040%" height="15" fill="rgb(207,125,25)" fg:x="14366" fg:w="15"/><text x="99.8272%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.05%)</title><rect x="99.6812%" y="309" width="0.0485%" height="15" fill="rgb(210,195,18)" fg:x="14381" fg:w="7"/><text x="99.9312%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="99.7297%" y="309" width="0.0208%" height="15" fill="rgb(249,80,12)" fg:x="14388" fg:w="3"/><text x="99.9797%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.09%)</title><rect x="99.7574%" y="309" width="0.0901%" height="15" fill="rgb(221,65,9)" fg:x="14392" fg:w="13"/><text x="100.0074%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.02%)</title><rect x="99.8475%" y="309" width="0.0208%" height="15" fill="rgb(235,49,36)" fg:x="14405" fg:w="3"/><text x="100.0975%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="99.8683%" y="309" width="0.0277%" height="15" fill="rgb(225,32,20)" fg:x="14408" fg:w="4"/><text x="100.1183%" y="319.50"></text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,865 samples, 47.58%)</title><rect x="52.3879%" y="325" width="47.5844%" height="15" fill="rgb(215,141,46)" fg:x="7558" fg:w="6865"/><text x="52.6379%" y="335.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.08%)</title><rect x="99.8960%" y="309" width="0.0762%" height="15" fill="rgb(250,160,47)" fg:x="14412" fg:w="11"/><text x="100.1460%" y="319.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (6,866 samples, 47.59%)</title><rect x="52.3879%" y="341" width="47.5913%" height="15" fill="rgb(216,222,40)" fg:x="7558" fg:w="6866"/><text x="52.6379%" y="351.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (14,427 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="14427"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (6,869 samples, 47.61%)</title><rect x="52.3879%" y="373" width="47.6121%" height="15" fill="rgb(207,178,40)" fg:x="7558" fg:w="6869"/><text x="52.6379%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (6,869 samples, 47.61%)</title><rect x="52.3879%" y="357" width="47.6121%" height="15" fill="rgb(221,136,13)" fg:x="7558" fg:w="6869"/><text x="52.6379%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (2 samples, 0.01%)</title><rect x="99.9861%" y="341" width="0.0139%" height="15" fill="rgb(249,199,10)" fg:x="14425" fg:w="2"/><text x="100.2361%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (2 samples, 0.01%)</title><rect x="99.9861%" y="325" width="0.0139%" height="15" fill="rgb(249,222,13)" fg:x="14425" fg:w="2"/><text x="100.2361%" y="335.50"></text></g></svg></svg>