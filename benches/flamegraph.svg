<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="188676"><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (80 samples, 0.04%)</title><rect x="0.0085%" y="85" width="0.0424%" height="15" fill="rgb(227,0,7)" fg:x="16" fg:w="80"/><text x="0.2585%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.04%)</title><rect x="0.0090%" y="69" width="0.0419%" height="15" fill="rgb(217,0,24)" fg:x="17" fg:w="79"/><text x="0.2590%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (79 samples, 0.04%)</title><rect x="0.0090%" y="53" width="0.0419%" height="15" fill="rgb(221,193,54)" fg:x="17" fg:w="79"/><text x="0.2590%" y="63.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,421 samples, 0.75%)</title><rect x="0.0085%" y="101" width="0.7531%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="1421"/><text x="0.2585%" y="111.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,341 samples, 0.71%)</title><rect x="0.0509%" y="85" width="0.7107%" height="15" fill="rgb(208,68,35)" fg:x="96" fg:w="1341"/><text x="0.3009%" y="95.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,340 samples, 0.71%)</title><rect x="0.0514%" y="69" width="0.7102%" height="15" fill="rgb(232,128,0)" fg:x="97" fg:w="1340"/><text x="0.3014%" y="79.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,339 samples, 0.71%)</title><rect x="0.0519%" y="53" width="0.7097%" height="15" fill="rgb(207,160,47)" fg:x="98" fg:w="1339"/><text x="0.3019%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (1,331 samples, 0.71%)</title><rect x="0.0562%" y="37" width="0.7054%" height="15" fill="rgb(228,23,34)" fg:x="106" fg:w="1331"/><text x="0.3062%" y="47.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,549 samples, 0.82%)</title><rect x="0.0074%" y="133" width="0.8210%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="1549"/><text x="0.2574%" y="143.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,548 samples, 0.82%)</title><rect x="0.0080%" y="117" width="0.8205%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="1548"/><text x="0.2580%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.07%)</title><rect x="0.7616%" y="101" width="0.0668%" height="15" fill="rgb(250,228,42)" fg:x="1437" fg:w="126"/><text x="1.0116%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (126 samples, 0.07%)</title><rect x="0.7616%" y="85" width="0.0668%" height="15" fill="rgb(240,193,28)" fg:x="1437" fg:w="126"/><text x="1.0116%" y="95.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,639 samples, 0.87%)</title><rect x="0.0069%" y="149" width="0.8687%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="1639"/><text x="0.2569%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (89 samples, 0.05%)</title><rect x="0.8284%" y="133" width="0.0472%" height="15" fill="rgb(206,188,39)" fg:x="1563" fg:w="89"/><text x="1.0784%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (94 samples, 0.05%)</title><rect x="0.8756%" y="133" width="0.0498%" height="15" fill="rgb(217,207,13)" fg:x="1652" fg:w="94"/><text x="1.1256%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (94 samples, 0.05%)</title><rect x="0.8756%" y="117" width="0.0498%" height="15" fill="rgb(231,73,38)" fg:x="1652" fg:w="94"/><text x="1.1256%" y="127.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (34 samples, 0.02%)</title><rect x="0.9254%" y="133" width="0.0180%" height="15" fill="rgb(225,20,46)" fg:x="1746" fg:w="34"/><text x="1.1754%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="0.9254%" y="117" width="0.0180%" height="15" fill="rgb(210,31,41)" fg:x="1746" fg:w="34"/><text x="1.1754%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (34 samples, 0.02%)</title><rect x="0.9254%" y="101" width="0.0180%" height="15" fill="rgb(221,200,47)" fg:x="1746" fg:w="34"/><text x="1.1754%" y="111.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (851 samples, 0.45%)</title><rect x="0.8756%" y="149" width="0.4510%" height="15" fill="rgb(226,26,5)" fg:x="1652" fg:w="851"/><text x="1.1256%" y="159.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (723 samples, 0.38%)</title><rect x="0.9434%" y="133" width="0.3832%" height="15" fill="rgb(249,33,26)" fg:x="1780" fg:w="723"/><text x="1.1934%" y="143.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (722 samples, 0.38%)</title><rect x="0.9439%" y="117" width="0.3827%" height="15" fill="rgb(235,183,28)" fg:x="1781" fg:w="722"/><text x="1.1939%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (717 samples, 0.38%)</title><rect x="0.9466%" y="101" width="0.3800%" height="15" fill="rgb(221,5,38)" fg:x="1786" fg:w="717"/><text x="1.1966%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (710 samples, 0.38%)</title><rect x="0.9503%" y="85" width="0.3763%" height="15" fill="rgb(247,18,42)" fg:x="1793" fg:w="710"/><text x="1.2003%" y="95.50"></text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (601 samples, 0.32%)</title><rect x="1.3266%" y="149" width="0.3185%" height="15" fill="rgb(241,131,45)" fg:x="2503" fg:w="601"/><text x="1.5766%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (601 samples, 0.32%)</title><rect x="1.3266%" y="133" width="0.3185%" height="15" fill="rgb(249,31,29)" fg:x="2503" fg:w="601"/><text x="1.5766%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (596 samples, 0.32%)</title><rect x="1.3293%" y="117" width="0.3159%" height="15" fill="rgb(225,111,53)" fg:x="2508" fg:w="596"/><text x="1.5793%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (156 samples, 0.08%)</title><rect x="1.6451%" y="149" width="0.0827%" height="15" fill="rgb(238,160,17)" fg:x="3104" fg:w="156"/><text x="1.8951%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (153 samples, 0.08%)</title><rect x="1.6467%" y="133" width="0.0811%" height="15" fill="rgb(214,148,48)" fg:x="3107" fg:w="153"/><text x="1.8967%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,327 samples, 1.76%)</title><rect x="0.0053%" y="165" width="1.7633%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="3327"/><text x="0.2553%" y="175.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (77 samples, 0.04%)</title><rect x="1.7278%" y="149" width="0.0408%" height="15" fill="rgb(209,103,24)" fg:x="3260" fg:w="77"/><text x="1.9778%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (75 samples, 0.04%)</title><rect x="1.7289%" y="133" width="0.0398%" height="15" fill="rgb(229,88,8)" fg:x="3262" fg:w="75"/><text x="1.9789%" y="143.50"></text></g><g><title>fekan`fekan::load_regression_data (3,442 samples, 1.82%)</title><rect x="0.0037%" y="245" width="1.8243%" height="15" fill="rgb(213,181,19)" fg:x="7" fg:w="3442"/><text x="0.2537%" y="255.50">f..</text></g><g><title>fekan`serde_json::de::from_trait (3,440 samples, 1.82%)</title><rect x="0.0048%" y="229" width="1.8232%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="3440"/><text x="0.2548%" y="239.50">f..</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,440 samples, 1.82%)</title><rect x="0.0048%" y="213" width="1.8232%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="3440"/><text x="0.2548%" y="223.50">f..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,440 samples, 1.82%)</title><rect x="0.0048%" y="197" width="1.8232%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="3440"/><text x="0.2548%" y="207.50">f..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,440 samples, 1.82%)</title><rect x="0.0048%" y="181" width="1.8232%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="3440"/><text x="0.2548%" y="191.50">f..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (112 samples, 0.06%)</title><rect x="1.7686%" y="165" width="0.0594%" height="15" fill="rgb(245,192,40)" fg:x="3337" fg:w="112"/><text x="2.0186%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (112 samples, 0.06%)</title><rect x="1.7686%" y="149" width="0.0594%" height="15" fill="rgb(238,167,29)" fg:x="3337" fg:w="112"/><text x="2.0186%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (46,094 samples, 24.43%)</title><rect x="1.8434%" y="197" width="24.4302%" height="15" fill="rgb(232,182,51)" fg:x="3478" fg:w="46094"/><text x="2.0934%" y="207.50">fekan`fekan::kan_layer::spline::Spline:..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (37,775 samples, 20.02%)</title><rect x="6.2525%" y="181" width="20.0211%" height="15" fill="rgb(231,60,39)" fg:x="11797" fg:w="37775"/><text x="6.5025%" y="191.50">fekan`fekan::kan_layer::spline:..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (7,989 samples, 4.23%)</title><rect x="26.2736%" y="197" width="4.2342%" height="15" fill="rgb(208,69,12)" fg:x="49572" fg:w="7989"/><text x="26.5236%" y="207.50">fekan..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (54,115 samples, 28.68%)</title><rect x="1.8360%" y="213" width="28.6814%" height="15" fill="rgb(235,93,37)" fg:x="3464" fg:w="54115"/><text x="2.0860%" y="223.50">fekan`fekan::kan_layer::KanLayer::backward</text></g><g><title>fekan`fekan::kan::Kan::backward (54,152 samples, 28.70%)</title><rect x="1.8328%" y="229" width="28.7011%" height="15" fill="rgb(213,116,39)" fg:x="3458" fg:w="54152"/><text x="2.0828%" y="239.50">fekan`fekan::kan::Kan::backward</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (8,676 samples, 4.60%)</title><rect x="63.1177%" y="165" width="4.5984%" height="15" fill="rgb(222,207,29)" fg:x="119088" fg:w="8676"/><text x="63.3677%" y="175.50">fekan..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (4,952 samples, 2.62%)</title><rect x="65.0915%" y="149" width="2.6246%" height="15" fill="rgb(206,96,30)" fg:x="122812" fg:w="4952"/><text x="65.3415%" y="159.50">fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (8,683 samples, 4.60%)</title><rect x="67.7161%" y="165" width="4.6021%" height="15" fill="rgb(218,138,4)" fg:x="127764" fg:w="8683"/><text x="67.9661%" y="175.50">fekan..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (68,205 samples, 36.15%)</title><rect x="39.3712%" y="181" width="36.1493%" height="15" fill="rgb(250,191,14)" fg:x="74284" fg:w="68205"/><text x="39.6212%" y="191.50">fekan`fekan::kan_layer::spline::basis_cached</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,042 samples, 3.20%)</title><rect x="72.3182%" y="165" width="3.2023%" height="15" fill="rgb(239,60,40)" fg:x="136447" fg:w="6042"/><text x="72.5682%" y="175.50">fek..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (98,766 samples, 52.35%)</title><rect x="30.9308%" y="197" width="52.3469%" height="15" fill="rgb(206,27,48)" fg:x="58359" fg:w="98766"/><text x="31.1808%" y="207.50">fekan`fekan::kan_layer::spline::basis_cached</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14,636 samples, 7.76%)</title><rect x="75.5205%" y="181" width="7.7572%" height="15" fill="rgb(225,35,8)" fg:x="142489" fg:w="14636"/><text x="75.7705%" y="191.50">fekan`hashb..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,506 samples, 1.86%)</title><rect x="83.2777%" y="197" width="1.8582%" height="15" fill="rgb(250,213,24)" fg:x="157125" fg:w="3506"/><text x="83.5277%" y="207.50">f..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (103,019 samples, 54.60%)</title><rect x="30.5423%" y="213" width="54.6010%" height="15" fill="rgb(247,123,22)" fg:x="57626" fg:w="103019"/><text x="30.7923%" y="223.50">fekan`fekan::kan_layer::KanLayer::forward</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (5,567 samples, 2.95%)</title><rect x="85.1433%" y="213" width="2.9506%" height="15" fill="rgb(231,138,38)" fg:x="160645" fg:w="5567"/><text x="85.3933%" y="223.50">fek..</text></g><g><title>fekan`fekan::kan::Kan::forward (108,626 samples, 57.57%)</title><rect x="30.5370%" y="229" width="57.5728%" height="15" fill="rgb(231,145,46)" fg:x="57616" fg:w="108626"/><text x="30.7870%" y="239.50">fekan`fekan::kan::Kan::forward</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="88.2455%" y="197" width="0.0101%" height="15" fill="rgb(251,118,11)" fg:x="166498" fg:w="19"/><text x="88.4955%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (24 samples, 0.01%)</title><rect x="88.2555%" y="197" width="0.0127%" height="15" fill="rgb(217,147,25)" fg:x="166517" fg:w="24"/><text x="88.5055%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (24 samples, 0.01%)</title><rect x="88.2555%" y="181" width="0.0127%" height="15" fill="rgb(247,81,37)" fg:x="166517" fg:w="24"/><text x="88.5055%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (24 samples, 0.01%)</title><rect x="88.2555%" y="165" width="0.0127%" height="15" fill="rgb(209,12,38)" fg:x="166517" fg:w="24"/><text x="88.5055%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (66 samples, 0.03%)</title><rect x="88.2682%" y="197" width="0.0350%" height="15" fill="rgb(227,1,9)" fg:x="166541" fg:w="66"/><text x="88.5182%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (57 samples, 0.03%)</title><rect x="88.2730%" y="181" width="0.0302%" height="15" fill="rgb(248,47,43)" fg:x="166550" fg:w="57"/><text x="88.5230%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (44 samples, 0.02%)</title><rect x="88.2799%" y="165" width="0.0233%" height="15" fill="rgb(221,10,30)" fg:x="166563" fg:w="44"/><text x="88.5299%" y="175.50"></text></g><g><title>fekan`nalgebra::linalg::householder::clear_column_unchecked (252 samples, 0.13%)</title><rect x="88.3318%" y="165" width="0.1336%" height="15" fill="rgb(210,229,1)" fg:x="166661" fg:w="252"/><text x="88.5818%" y="175.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_with_sign (250 samples, 0.13%)</title><rect x="88.3329%" y="149" width="0.1325%" height="15" fill="rgb(222,148,37)" fg:x="166663" fg:w="250"/><text x="88.5829%" y="159.50"></text></g><g><title>fekan`nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::new (478 samples, 0.25%)</title><rect x="88.3318%" y="181" width="0.2533%" height="15" fill="rgb(234,67,33)" fg:x="166661" fg:w="478"/><text x="88.5818%" y="191.50"></text></g><g><title>fekan`nalgebra::linalg::householder::clear_row_unchecked (226 samples, 0.12%)</title><rect x="88.4654%" y="165" width="0.1198%" height="15" fill="rgb(247,98,35)" fg:x="166913" fg:w="226"/><text x="88.7154%" y="175.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_rows_with_sign (210 samples, 0.11%)</title><rect x="88.4739%" y="149" width="0.1113%" height="15" fill="rgb(247,138,52)" fg:x="166929" fg:w="210"/><text x="88.7239%" y="159.50"></text></g><g><title>fekan`nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::u (264 samples, 0.14%)</title><rect x="88.5852%" y="181" width="0.1399%" height="15" fill="rgb(213,79,30)" fg:x="167139" fg:w="264"/><text x="88.8352%" y="191.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_with_sign (262 samples, 0.14%)</title><rect x="88.5863%" y="165" width="0.1389%" height="15" fill="rgb(246,177,23)" fg:x="167141" fg:w="262"/><text x="88.8363%" y="175.50"></text></g><g><title>fekan`nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::v_t (217 samples, 0.12%)</title><rect x="88.7251%" y="181" width="0.1150%" height="15" fill="rgb(230,62,27)" fg:x="167403" fg:w="217"/><text x="88.9751%" y="191.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_rows_with_sign (207 samples, 0.11%)</title><rect x="88.7304%" y="165" width="0.1097%" height="15" fill="rgb(216,154,8)" fg:x="167413" fg:w="207"/><text x="88.9804%" y="175.50"></text></g><g><title>fekan`nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::new (1,020 samples, 0.54%)</title><rect x="88.3032%" y="197" width="0.5406%" height="15" fill="rgb(244,35,45)" fg:x="166607" fg:w="1020"/><text x="88.5532%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::set_knot_length (1,389 samples, 0.74%)</title><rect x="88.1103%" y="213" width="0.7362%" height="15" fill="rgb(251,115,12)" fg:x="166243" fg:w="1389"/><text x="88.3603%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::set_knot_length (1,392 samples, 0.74%)</title><rect x="88.1103%" y="229" width="0.7378%" height="15" fill="rgb(240,54,50)" fg:x="166243" fg:w="1392"/><text x="88.3603%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::update (265 samples, 0.14%)</title><rect x="88.8481%" y="229" width="0.1405%" height="15" fill="rgb(233,84,52)" fg:x="167635" fg:w="265"/><text x="89.0981%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (24 samples, 0.01%)</title><rect x="89.0002%" y="149" width="0.0127%" height="15" fill="rgb(207,117,47)" fg:x="167922" fg:w="24"/><text x="89.2502%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (34 samples, 0.02%)</title><rect x="88.9954%" y="197" width="0.0180%" height="15" fill="rgb(249,43,39)" fg:x="167913" fg:w="34"/><text x="89.2454%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (34 samples, 0.02%)</title><rect x="88.9954%" y="181" width="0.0180%" height="15" fill="rgb(209,38,44)" fg:x="167913" fg:w="34"/><text x="89.2454%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (32 samples, 0.02%)</title><rect x="88.9965%" y="165" width="0.0170%" height="15" fill="rgb(236,212,23)" fg:x="167915" fg:w="32"/><text x="89.2465%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::update_knots_from_samples (41 samples, 0.02%)</title><rect x="89.0134%" y="197" width="0.0217%" height="15" fill="rgb(242,79,21)" fg:x="167947" fg:w="41"/><text x="89.2634%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (161 samples, 0.09%)</title><rect x="88.9885%" y="229" width="0.0853%" height="15" fill="rgb(211,96,35)" fg:x="167900" fg:w="161"/><text x="89.2385%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (161 samples, 0.09%)</title><rect x="88.9885%" y="213" width="0.0853%" height="15" fill="rgb(253,215,40)" fg:x="167900" fg:w="161"/><text x="89.2385%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (69 samples, 0.04%)</title><rect x="89.0373%" y="197" width="0.0366%" height="15" fill="rgb(211,81,21)" fg:x="167992" fg:w="69"/><text x="89.2873%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (19,189 samples, 10.17%)</title><rect x="89.1640%" y="181" width="10.1703%" height="15" fill="rgb(208,190,38)" fg:x="168231" fg:w="19189"/><text x="89.4140%" y="191.50">fekan`fekan::ka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (17,077 samples, 9.05%)</title><rect x="90.2833%" y="165" width="9.0510%" height="15" fill="rgb(235,213,38)" fg:x="170343" fg:w="17077"/><text x="90.5333%" y="175.50">fekan`fekan::..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (12,281 samples, 6.51%)</title><rect x="92.8253%" y="149" width="6.5090%" height="15" fill="rgb(237,122,38)" fg:x="175139" fg:w="12281"/><text x="93.0753%" y="159.50">fekan`fek..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (3,521 samples, 1.87%)</title><rect x="97.4681%" y="133" width="1.8662%" height="15" fill="rgb(244,218,35)" fg:x="183899" fg:w="3521"/><text x="97.7181%" y="143.50">f..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (19,356 samples, 10.26%)</title><rect x="89.0786%" y="197" width="10.2589%" height="15" fill="rgb(240,68,47)" fg:x="168070" fg:w="19356"/><text x="89.3286%" y="207.50">fekan`fekan::ka..</text></g><g><title>fekan`fekan::kan::Kan::infer (20,228 samples, 10.72%)</title><rect x="89.0786%" y="213" width="10.7210%" height="15" fill="rgb(210,16,53)" fg:x="168070" fg:w="20228"/><text x="89.3286%" y="223.50">fekan`fekan::kan..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (872 samples, 0.46%)</title><rect x="99.3375%" y="197" width="0.4622%" height="15" fill="rgb(235,124,12)" fg:x="187426" fg:w="872"/><text x="99.5875%" y="207.50"></text></g><g><title>fekan`fekan::validate_model (20,259 samples, 10.74%)</title><rect x="89.0781%" y="229" width="10.7375%" height="15" fill="rgb(224,169,11)" fg:x="168069" fg:w="20259"/><text x="89.3281%" y="239.50">fekan`fekan::val..</text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (22 samples, 0.01%)</title><rect x="99.8039%" y="213" width="0.0117%" height="15" fill="rgb(250,166,2)" fg:x="188306" fg:w="22"/><text x="100.0539%" y="223.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (22 samples, 0.01%)</title><rect x="99.8039%" y="197" width="0.0117%" height="15" fill="rgb(242,216,29)" fg:x="188306" fg:w="22"/><text x="100.0539%" y="207.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (22 samples, 0.01%)</title><rect x="99.8039%" y="181" width="0.0117%" height="15" fill="rgb(230,116,27)" fg:x="188306" fg:w="22"/><text x="100.0539%" y="191.50"></text></g><g><title>fekan`std::sys::pal::unix::time::Timespec::now (27 samples, 0.01%)</title><rect x="99.8161%" y="213" width="0.0143%" height="15" fill="rgb(228,99,48)" fg:x="188329" fg:w="27"/><text x="100.0661%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (27 samples, 0.01%)</title><rect x="99.8161%" y="197" width="0.0143%" height="15" fill="rgb(253,11,6)" fg:x="188329" fg:w="27"/><text x="100.0661%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (27 samples, 0.01%)</title><rect x="99.8161%" y="181" width="0.0143%" height="15" fill="rgb(247,143,39)" fg:x="188329" fg:w="27"/><text x="100.0661%" y="191.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::inc (29 samples, 0.02%)</title><rect x="99.8156%" y="229" width="0.0154%" height="15" fill="rgb(236,97,10)" fg:x="188328" fg:w="29"/><text x="100.0656%" y="239.50"></text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (31 samples, 0.02%)</title><rect x="99.8330%" y="181" width="0.0164%" height="15" fill="rgb(233,208,19)" fg:x="188361" fg:w="31"/><text x="100.0830%" y="191.50"></text></g><g><title>libsystem_c.dylib`isatty (91 samples, 0.05%)</title><rect x="99.8505%" y="149" width="0.0482%" height="15" fill="rgb(216,164,2)" fg:x="188394" fg:w="91"/><text x="100.1005%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (91 samples, 0.05%)</title><rect x="99.8505%" y="133" width="0.0482%" height="15" fill="rgb(220,129,5)" fg:x="188394" fg:w="91"/><text x="100.1005%" y="143.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (138 samples, 0.07%)</title><rect x="99.8500%" y="181" width="0.0731%" height="15" fill="rgb(242,17,10)" fg:x="188393" fg:w="138"/><text x="100.1000%" y="191.50"></text></g><g><title>fekan`console::unix_term::terminal_size (137 samples, 0.07%)</title><rect x="99.8505%" y="165" width="0.0726%" height="15" fill="rgb(242,107,0)" fg:x="188394" fg:w="137"/><text x="100.1005%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (46 samples, 0.02%)</title><rect x="99.8988%" y="149" width="0.0244%" height="15" fill="rgb(251,28,31)" fg:x="188485" fg:w="46"/><text x="100.1488%" y="159.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (191 samples, 0.10%)</title><rect x="99.8330%" y="197" width="0.1012%" height="15" fill="rgb(233,223,10)" fg:x="188361" fg:w="191"/><text x="100.0830%" y="207.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (198 samples, 0.10%)</title><rect x="99.8315%" y="213" width="0.1049%" height="15" fill="rgb(215,21,27)" fg:x="188358" fg:w="198"/><text x="100.0815%" y="223.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (200 samples, 0.11%)</title><rect x="99.8309%" y="229" width="0.1060%" height="15" fill="rgb(232,23,21)" fg:x="188357" fg:w="200"/><text x="100.0809%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (88 samples, 0.05%)</title><rect x="99.9481%" y="229" width="0.0466%" height="15" fill="rgb(244,5,23)" fg:x="188578" fg:w="88"/><text x="100.1981%" y="239.50"></text></g><g><title>fekan`fekan::train_model (185,218 samples, 98.17%)</title><rect x="1.8280%" y="245" width="98.1672%" height="15" fill="rgb(226,81,46)" fg:x="3449" fg:w="185218"/><text x="2.0780%" y="255.50">fekan`fekan::train_model</text></g><g><title>dyld`start (188,675 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9995%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="188675"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>fekan`main (188,675 samples, 100.00%)</title><rect x="0.0000%" y="325" width="99.9995%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="188675"/><text x="0.2500%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (188,675 samples, 100.00%)</title><rect x="0.0000%" y="309" width="99.9995%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="188675"/><text x="0.2500%" y="319.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (188,674 samples, 100.00%)</title><rect x="0.0005%" y="293" width="99.9989%" height="15" fill="rgb(223,113,26)" fg:x="1" fg:w="188674"/><text x="0.2505%" y="303.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (188,674 samples, 100.00%)</title><rect x="0.0005%" y="277" width="99.9989%" height="15" fill="rgb(206,192,2)" fg:x="1" fg:w="188674"/><text x="0.2505%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (188,674 samples, 100.00%)</title><rect x="0.0005%" y="261" width="99.9989%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="188674"/><text x="0.2505%" y="271.50">fekan`fekan::main</text></g><g><title>all (188,676 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="188676"/><text x="0.2500%" y="367.50"></text></g></svg></svg>