<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="28503"><g><title>fekan`DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0140%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="303.50"></text></g><g><title>fekan`__rdl_alloc (4 samples, 0.01%)</title><rect x="0.0211%" y="293" width="0.0140%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="4"/><text x="0.2711%" y="303.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (3 samples, 0.01%)</title><rect x="0.0386%" y="293" width="0.0105%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="3"/><text x="0.2886%" y="303.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (3 samples, 0.01%)</title><rect x="0.0386%" y="277" width="0.0105%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="3"/><text x="0.2886%" y="287.50"></text></g><g><title>fekan`fekan::calculate_mse_and_gradient (4 samples, 0.01%)</title><rect x="0.0491%" y="293" width="0.0140%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="4"/><text x="0.2991%" y="303.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (3 samples, 0.01%)</title><rect x="0.0632%" y="293" width="0.0105%" height="15" fill="rgb(232,128,0)" fg:x="18" fg:w="3"/><text x="0.3132%" y="303.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (4 samples, 0.01%)</title><rect x="0.0772%" y="293" width="0.0140%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="4"/><text x="0.3272%" y="303.50"></text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (3 samples, 0.01%)</title><rect x="0.0912%" y="293" width="0.0105%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="3"/><text x="0.3412%" y="303.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (67 samples, 0.24%)</title><rect x="0.1228%" y="133" width="0.2351%" height="15" fill="rgb(218,30,26)" fg:x="35" fg:w="67"/><text x="0.3728%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.24%)</title><rect x="0.1228%" y="117" width="0.2351%" height="15" fill="rgb(220,122,19)" fg:x="35" fg:w="67"/><text x="0.3728%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (67 samples, 0.24%)</title><rect x="0.1228%" y="101" width="0.2351%" height="15" fill="rgb(250,228,42)" fg:x="35" fg:w="67"/><text x="0.3728%" y="111.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.01%)</title><rect x="0.3789%" y="85" width="0.0140%" height="15" fill="rgb(240,193,28)" fg:x="108" fg:w="4"/><text x="0.6289%" y="95.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,395 samples, 4.89%)</title><rect x="0.1193%" y="149" width="4.8942%" height="15" fill="rgb(216,20,37)" fg:x="34" fg:w="1395"/><text x="0.3693%" y="159.50">fekan`..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,327 samples, 4.66%)</title><rect x="0.3579%" y="133" width="4.6557%" height="15" fill="rgb(206,188,39)" fg:x="102" fg:w="1327"/><text x="0.6079%" y="143.50">fekan..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,325 samples, 4.65%)</title><rect x="0.3649%" y="117" width="4.6486%" height="15" fill="rgb(217,207,13)" fg:x="104" fg:w="1325"/><text x="0.6149%" y="127.50">fekan..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,325 samples, 4.65%)</title><rect x="0.3649%" y="101" width="4.6486%" height="15" fill="rgb(231,73,38)" fg:x="104" fg:w="1325"/><text x="0.6149%" y="111.50">fekan..</text></g><g><title>libsystem_kernel.dylib`read (1,315 samples, 4.61%)</title><rect x="0.4000%" y="85" width="4.6135%" height="15" fill="rgb(225,20,46)" fg:x="114" fg:w="1315"/><text x="0.6500%" y="95.50">libsy..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,523 samples, 5.34%)</title><rect x="0.1193%" y="165" width="5.3433%" height="15" fill="rgb(210,31,41)" fg:x="34" fg:w="1523"/><text x="0.3693%" y="175.50">fekan`&lt;..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (128 samples, 0.45%)</title><rect x="5.0135%" y="149" width="0.4491%" height="15" fill="rgb(221,200,47)" fg:x="1429" fg:w="128"/><text x="5.2635%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (128 samples, 0.45%)</title><rect x="5.0135%" y="133" width="0.4491%" height="15" fill="rgb(226,26,5)" fg:x="1429" fg:w="128"/><text x="5.2635%" y="143.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,524 samples, 5.35%)</title><rect x="0.1193%" y="181" width="5.3468%" height="15" fill="rgb(249,33,26)" fg:x="34" fg:w="1524"/><text x="0.3693%" y="191.50">fekan`&lt;..</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,599 samples, 5.61%)</title><rect x="0.1193%" y="197" width="5.6099%" height="15" fill="rgb(235,183,28)" fg:x="34" fg:w="1599"/><text x="0.3693%" y="207.50">fekan`&lt;..</text></g><g><title>libsystem_kernel.dylib`read (74 samples, 0.26%)</title><rect x="5.4696%" y="181" width="0.2596%" height="15" fill="rgb(221,5,38)" fg:x="1559" fg:w="74"/><text x="5.7196%" y="191.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.27%)</title><rect x="5.7362%" y="181" width="0.2737%" height="15" fill="rgb(247,18,42)" fg:x="1635" fg:w="78"/><text x="5.9862%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (77 samples, 0.27%)</title><rect x="5.7397%" y="165" width="0.2701%" height="15" fill="rgb(241,131,45)" fg:x="1636" fg:w="77"/><text x="5.9897%" y="175.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (38 samples, 0.13%)</title><rect x="6.0099%" y="181" width="0.1333%" height="15" fill="rgb(249,31,29)" fg:x="1713" fg:w="38"/><text x="6.2599%" y="191.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.13%)</title><rect x="6.0099%" y="165" width="0.1333%" height="15" fill="rgb(225,111,53)" fg:x="1713" fg:w="38"/><text x="6.2599%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (38 samples, 0.13%)</title><rect x="6.0099%" y="149" width="0.1333%" height="15" fill="rgb(238,160,17)" fg:x="1713" fg:w="38"/><text x="6.2599%" y="159.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (797 samples, 2.80%)</title><rect x="5.7292%" y="197" width="2.7962%" height="15" fill="rgb(214,148,48)" fg:x="1633" fg:w="797"/><text x="5.9792%" y="207.50">fe..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (679 samples, 2.38%)</title><rect x="6.1432%" y="181" width="2.3822%" height="15" fill="rgb(232,36,49)" fg:x="1751" fg:w="679"/><text x="6.3932%" y="191.50">fe..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (679 samples, 2.38%)</title><rect x="6.1432%" y="165" width="2.3822%" height="15" fill="rgb(209,103,24)" fg:x="1751" fg:w="679"/><text x="6.3932%" y="175.50">fe..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (676 samples, 2.37%)</title><rect x="6.1537%" y="149" width="2.3717%" height="15" fill="rgb(229,88,8)" fg:x="1754" fg:w="676"/><text x="6.4037%" y="159.50">fe..</text></g><g><title>libsystem_kernel.dylib`read (669 samples, 2.35%)</title><rect x="6.1783%" y="133" width="2.3471%" height="15" fill="rgb(213,181,19)" fg:x="1761" fg:w="669"/><text x="6.4283%" y="143.50">l..</text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (604 samples, 2.12%)</title><rect x="8.5254%" y="197" width="2.1191%" height="15" fill="rgb(254,191,54)" fg:x="2430" fg:w="604"/><text x="8.7754%" y="207.50">f..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (600 samples, 2.11%)</title><rect x="8.5395%" y="181" width="2.1050%" height="15" fill="rgb(241,83,37)" fg:x="2434" fg:w="600"/><text x="8.7895%" y="191.50">f..</text></g><g><title>libsystem_kernel.dylib`read (596 samples, 2.09%)</title><rect x="8.5535%" y="165" width="2.0910%" height="15" fill="rgb(233,36,39)" fg:x="2438" fg:w="596"/><text x="8.8035%" y="175.50">l..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 0.54%)</title><rect x="10.6445%" y="197" width="0.5438%" height="15" fill="rgb(226,3,54)" fg:x="3034" fg:w="155"/><text x="10.8945%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (154 samples, 0.54%)</title><rect x="10.6480%" y="181" width="0.5403%" height="15" fill="rgb(245,192,40)" fg:x="3035" fg:w="154"/><text x="10.8980%" y="191.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,245 samples, 11.38%)</title><rect x="0.1123%" y="213" width="11.3848%" height="15" fill="rgb(238,167,29)" fg:x="32" fg:w="3245"/><text x="0.3623%" y="223.50">fekan`&lt;&amp;mut serde..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (88 samples, 0.31%)</title><rect x="11.1883%" y="197" width="0.3087%" height="15" fill="rgb(232,182,51)" fg:x="3189" fg:w="88"/><text x="11.4383%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (87 samples, 0.31%)</title><rect x="11.1918%" y="181" width="0.3052%" height="15" fill="rgb(231,60,39)" fg:x="3190" fg:w="87"/><text x="11.4418%" y="191.50"></text></g><g><title>fekan`fekan::load_regression_data (3,368 samples, 11.82%)</title><rect x="0.1017%" y="293" width="11.8163%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="3368"/><text x="0.3517%" y="303.50">fekan`fekan::load_..</text></g><g><title>fekan`serde_json::de::from_trait (3,366 samples, 11.81%)</title><rect x="0.1088%" y="277" width="11.8093%" height="15" fill="rgb(235,93,37)" fg:x="31" fg:w="3366"/><text x="0.3588%" y="287.50">fekan`serde_json::..</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,366 samples, 11.81%)</title><rect x="0.1088%" y="261" width="11.8093%" height="15" fill="rgb(213,116,39)" fg:x="31" fg:w="3366"/><text x="0.3588%" y="271.50">fekan`&lt;&amp;mut serde_..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,366 samples, 11.81%)</title><rect x="0.1088%" y="245" width="11.8093%" height="15" fill="rgb(222,207,29)" fg:x="31" fg:w="3366"/><text x="0.3588%" y="255.50">fekan`&lt;serde::de::..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,366 samples, 11.81%)</title><rect x="0.1088%" y="229" width="11.8093%" height="15" fill="rgb(206,96,30)" fg:x="31" fg:w="3366"/><text x="0.3588%" y="239.50">fekan`&lt;serde_json:..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 0.42%)</title><rect x="11.4970%" y="213" width="0.4210%" height="15" fill="rgb(218,138,4)" fg:x="3277" fg:w="120"/><text x="11.7470%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`read (120 samples, 0.42%)</title><rect x="11.4970%" y="197" width="0.4210%" height="15" fill="rgb(250,191,14)" fg:x="3277" fg:w="120"/><text x="11.7470%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$bzero (15 samples, 0.05%)</title><rect x="11.9777%" y="277" width="0.0526%" height="15" fill="rgb(239,60,40)" fg:x="3414" fg:w="15"/><text x="12.2277%" y="287.50"></text></g><g><title>fekan`DYLD-STUB$$free (20 samples, 0.07%)</title><rect x="12.0303%" y="277" width="0.0702%" height="15" fill="rgb(206,27,48)" fg:x="3429" fg:w="20"/><text x="12.2803%" y="287.50"></text></g><g><title>fekan`__rdl_alloc_zeroed (5 samples, 0.02%)</title><rect x="12.1917%" y="261" width="0.0175%" height="15" fill="rgb(225,35,8)" fg:x="3475" fg:w="5"/><text x="12.4417%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (1,267 samples, 4.45%)</title><rect x="12.5110%" y="245" width="4.4451%" height="15" fill="rgb(250,213,24)" fg:x="3566" fg:w="1267"/><text x="12.7610%" y="255.50">fekan..</text></g><g><title>fekan`fekan::kan_layer::spline::b (640 samples, 2.25%)</title><rect x="14.7107%" y="229" width="2.2454%" height="15" fill="rgb(247,123,22)" fg:x="4193" fg:w="640"/><text x="14.9607%" y="239.50">f..</text></g><g><title>fekan`fekan::kan_layer::spline::b (792 samples, 2.78%)</title><rect x="16.9561%" y="245" width="2.7787%" height="15" fill="rgb(231,138,38)" fg:x="4833" fg:w="792"/><text x="17.2061%" y="255.50">fe..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (2,192 samples, 7.69%)</title><rect x="12.2092%" y="261" width="7.6904%" height="15" fill="rgb(231,145,46)" fg:x="3480" fg:w="2192"/><text x="12.4592%" y="271.50">fekan`fekan..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (47 samples, 0.16%)</title><rect x="19.7348%" y="245" width="0.1649%" height="15" fill="rgb(251,118,11)" fg:x="5625" fg:w="47"/><text x="19.9848%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (61 samples, 0.21%)</title><rect x="19.8997%" y="261" width="0.2140%" height="15" fill="rgb(217,147,25)" fg:x="5672" fg:w="61"/><text x="20.1497%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (16 samples, 0.06%)</title><rect x="20.1137%" y="261" width="0.0561%" height="15" fill="rgb(247,81,37)" fg:x="5733" fg:w="16"/><text x="20.3637%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (52 samples, 0.18%)</title><rect x="20.1698%" y="261" width="0.1824%" height="15" fill="rgb(209,12,38)" fg:x="5749" fg:w="52"/><text x="20.4198%" y="271.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (2,354 samples, 8.26%)</title><rect x="12.1040%" y="277" width="8.2588%" height="15" fill="rgb(227,1,9)" fg:x="3450" fg:w="2354"/><text x="12.3540%" y="287.50">fekan`fekan..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.01%)</title><rect x="20.3522%" y="261" width="0.0105%" height="15" fill="rgb(248,47,43)" fg:x="5801" fg:w="3"/><text x="20.6022%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (55 samples, 0.19%)</title><rect x="20.3943%" y="261" width="0.1930%" height="15" fill="rgb(221,10,30)" fg:x="5813" fg:w="55"/><text x="20.6443%" y="271.50"></text></g><g><title>fekan`fekan::kan::Kan::clear_samples (68 samples, 0.24%)</title><rect x="20.3628%" y="277" width="0.2386%" height="15" fill="rgb(210,229,1)" fg:x="5804" fg:w="68"/><text x="20.6128%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (4 samples, 0.01%)</title><rect x="20.5873%" y="261" width="0.0140%" height="15" fill="rgb(222,148,37)" fg:x="5868" fg:w="4"/><text x="20.8373%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (4 samples, 0.01%)</title><rect x="20.5873%" y="245" width="0.0140%" height="15" fill="rgb(234,67,33)" fg:x="5868" fg:w="4"/><text x="20.8373%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="20.5873%" y="229" width="0.0140%" height="15" fill="rgb(247,98,35)" fg:x="5868" fg:w="4"/><text x="20.8373%" y="239.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (5 samples, 0.02%)</title><rect x="20.8083%" y="261" width="0.0175%" height="15" fill="rgb(247,138,52)" fg:x="5931" fg:w="5"/><text x="21.0583%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$memcpy (7 samples, 0.02%)</title><rect x="20.8259%" y="261" width="0.0246%" height="15" fill="rgb(213,79,30)" fg:x="5936" fg:w="7"/><text x="21.0759%" y="271.50"></text></g><g><title>fekan`__rdl_alloc (5 samples, 0.02%)</title><rect x="20.8504%" y="261" width="0.0175%" height="15" fill="rgb(246,177,23)" fg:x="5943" fg:w="5"/><text x="21.1004%" y="271.50"></text></g><g><title>fekan`__rdl_alloc_zeroed (6 samples, 0.02%)</title><rect x="20.8680%" y="261" width="0.0211%" height="15" fill="rgb(230,62,27)" fg:x="5948" fg:w="6"/><text x="21.1180%" y="271.50"></text></g><g><title>fekan`__rdl_dealloc (8 samples, 0.03%)</title><rect x="20.8890%" y="261" width="0.0281%" height="15" fill="rgb(216,154,8)" fg:x="5954" fg:w="8"/><text x="21.1390%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (2,301 samples, 8.07%)</title><rect x="44.3322%" y="197" width="8.0728%" height="15" fill="rgb(244,35,45)" fg:x="12636" fg:w="2301"/><text x="44.5822%" y="207.50">fekan`fekan..</text></g><g><title>fekan`fekan::kan_layer::spline::b (5,758 samples, 20.20%)</title><rect x="35.1226%" y="213" width="20.2014%" height="15" fill="rgb(251,115,12)" fg:x="10011" fg:w="5758"/><text x="35.3726%" y="223.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (832 samples, 2.92%)</title><rect x="52.4050%" y="197" width="2.9190%" height="15" fill="rgb(240,54,50)" fg:x="14937" fg:w="832"/><text x="52.6550%" y="207.50">fe..</text></g><g><title>fekan`fekan::kan_layer::spline::b (9,431 samples, 33.09%)</title><rect x="27.9339%" y="229" width="33.0877%" height="15" fill="rgb(233,84,52)" fg:x="7962" fg:w="9431"/><text x="28.1839%" y="239.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,624 samples, 5.70%)</title><rect x="55.3240%" y="213" width="5.6976%" height="15" fill="rgb(207,117,47)" fg:x="15769" fg:w="1624"/><text x="55.5740%" y="223.50">fekan`h..</text></g><g><title>fekan`fekan::kan_layer::spline::b (13,247 samples, 46.48%)</title><rect x="22.6643%" y="245" width="46.4758%" height="15" fill="rgb(249,43,39)" fg:x="6460" fg:w="13247"/><text x="22.9143%" y="255.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,314 samples, 8.12%)</title><rect x="61.0216%" y="229" width="8.1184%" height="15" fill="rgb(209,38,44)" fg:x="17393" fg:w="2314"/><text x="61.2716%" y="239.50">fekan`hashb..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (651 samples, 2.28%)</title><rect x="69.1401%" y="245" width="2.2840%" height="15" fill="rgb(236,212,23)" fg:x="19707" fg:w="651"/><text x="69.3901%" y="255.50">f..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (14,447 samples, 50.69%)</title><rect x="20.9171%" y="261" width="50.6859%" height="15" fill="rgb(242,79,21)" fg:x="5962" fg:w="14447"/><text x="21.1671%" y="271.50">fekan`fekan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (51 samples, 0.18%)</title><rect x="71.4241%" y="245" width="0.1789%" height="15" fill="rgb(211,96,35)" fg:x="20358" fg:w="51"/><text x="71.6741%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (439 samples, 1.54%)</title><rect x="71.6030%" y="261" width="1.5402%" height="15" fill="rgb(253,215,40)" fg:x="20409" fg:w="439"/><text x="71.8530%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (50 samples, 0.18%)</title><rect x="73.1432%" y="261" width="0.1754%" height="15" fill="rgb(211,81,21)" fg:x="20848" fg:w="50"/><text x="73.3932%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (13 samples, 0.05%)</title><rect x="73.3186%" y="261" width="0.0456%" height="15" fill="rgb(208,190,38)" fg:x="20898" fg:w="13"/><text x="73.5686%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (44 samples, 0.15%)</title><rect x="73.3642%" y="261" width="0.1544%" height="15" fill="rgb(235,213,38)" fg:x="20911" fg:w="44"/><text x="73.6142%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (8 samples, 0.03%)</title><rect x="73.5256%" y="261" width="0.0281%" height="15" fill="rgb(237,122,38)" fg:x="20957" fg:w="8"/><text x="73.7756%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (36 samples, 0.13%)</title><rect x="73.5537%" y="261" width="0.1263%" height="15" fill="rgb(244,218,35)" fg:x="20965" fg:w="36"/><text x="73.8037%" y="271.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (15,143 samples, 53.13%)</title><rect x="20.6013%" y="277" width="53.1277%" height="15" fill="rgb(240,68,47)" fg:x="5872" fg:w="15143"/><text x="20.8513%" y="287.50">fekan`fekan::kan::Kan::forward</text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.05%)</title><rect x="73.6800%" y="261" width="0.0491%" height="15" fill="rgb(210,16,53)" fg:x="21001" fg:w="14"/><text x="73.9300%" y="271.50"></text></g><g><title>fekan`fekan::kan::Kan::update (120 samples, 0.42%)</title><rect x="73.7291%" y="277" width="0.4210%" height="15" fill="rgb(235,124,12)" fg:x="21015" fg:w="120"/><text x="73.9791%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.03%)</title><rect x="74.3852%" y="165" width="0.0281%" height="15" fill="rgb(224,169,11)" fg:x="21202" fg:w="8"/><text x="74.6352%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="74.4132%" y="165" width="0.0105%" height="15" fill="rgb(250,166,2)" fg:x="21210" fg:w="3"/><text x="74.6632%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="74.4132%" y="149" width="0.0105%" height="15" fill="rgb(242,216,29)" fg:x="21210" fg:w="3"/><text x="74.6632%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="74.4132%" y="133" width="0.0105%" height="15" fill="rgb(230,116,27)" fg:x="21210" fg:w="3"/><text x="74.6632%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (18 samples, 0.06%)</title><rect x="74.3641%" y="197" width="0.0632%" height="15" fill="rgb(228,99,48)" fg:x="21196" fg:w="18"/><text x="74.6141%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (12 samples, 0.04%)</title><rect x="74.3852%" y="181" width="0.0421%" height="15" fill="rgb(253,11,6)" fg:x="21202" fg:w="12"/><text x="74.6352%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (21 samples, 0.07%)</title><rect x="74.3571%" y="213" width="0.0737%" height="15" fill="rgb(247,143,39)" fg:x="21194" fg:w="21"/><text x="74.6071%" y="223.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (24 samples, 0.08%)</title><rect x="74.3536%" y="229" width="0.0842%" height="15" fill="rgb(236,97,10)" fg:x="21193" fg:w="24"/><text x="74.6036%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (27 samples, 0.09%)</title><rect x="74.3466%" y="245" width="0.0947%" height="15" fill="rgb(233,208,19)" fg:x="21191" fg:w="27"/><text x="74.5966%" y="255.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (53 samples, 0.19%)</title><rect x="74.6132%" y="197" width="0.1859%" height="15" fill="rgb(216,164,2)" fg:x="21267" fg:w="53"/><text x="74.8632%" y="207.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (4 samples, 0.01%)</title><rect x="74.7851%" y="181" width="0.0140%" height="15" fill="rgb(220,129,5)" fg:x="21316" fg:w="4"/><text x="75.0351%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (3 samples, 0.01%)</title><rect x="75.1956%" y="165" width="0.0105%" height="15" fill="rgb(242,17,10)" fg:x="21433" fg:w="3"/><text x="75.4456%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (95 samples, 0.33%)</title><rect x="74.9219%" y="181" width="0.3333%" height="15" fill="rgb(242,107,0)" fg:x="21355" fg:w="95"/><text x="75.1719%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (14 samples, 0.05%)</title><rect x="75.2061%" y="165" width="0.0491%" height="15" fill="rgb(251,28,31)" fg:x="21436" fg:w="14"/><text x="75.4561%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (10 samples, 0.04%)</title><rect x="75.2202%" y="149" width="0.0351%" height="15" fill="rgb(233,223,10)" fg:x="21440" fg:w="10"/><text x="75.4702%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (58 samples, 0.20%)</title><rect x="75.3149%" y="165" width="0.2035%" height="15" fill="rgb(215,21,27)" fg:x="21467" fg:w="58"/><text x="75.5649%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (12 samples, 0.04%)</title><rect x="75.4763%" y="149" width="0.0421%" height="15" fill="rgb(232,23,21)" fg:x="21513" fg:w="12"/><text x="75.7263%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (11 samples, 0.04%)</title><rect x="75.4798%" y="133" width="0.0386%" height="15" fill="rgb(244,5,23)" fg:x="21514" fg:w="11"/><text x="75.7298%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (17 samples, 0.06%)</title><rect x="75.5780%" y="149" width="0.0596%" height="15" fill="rgb(226,81,46)" fg:x="21542" fg:w="17"/><text x="75.8280%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.01%)</title><rect x="75.6938%" y="133" width="0.0105%" height="15" fill="rgb(247,70,30)" fg:x="21575" fg:w="3"/><text x="75.9438%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7 samples, 0.02%)</title><rect x="75.7043%" y="133" width="0.0246%" height="15" fill="rgb(212,68,19)" fg:x="21578" fg:w="7"/><text x="75.9543%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.01%)</title><rect x="75.7183%" y="117" width="0.0105%" height="15" fill="rgb(240,187,13)" fg:x="21582" fg:w="3"/><text x="75.9683%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (15 samples, 0.05%)</title><rect x="75.7534%" y="117" width="0.0526%" height="15" fill="rgb(223,113,26)" fg:x="21592" fg:w="15"/><text x="76.0034%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.01%)</title><rect x="75.7955%" y="101" width="0.0105%" height="15" fill="rgb(206,192,2)" fg:x="21604" fg:w="3"/><text x="76.0455%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8 samples, 0.03%)</title><rect x="75.8096%" y="101" width="0.0281%" height="15" fill="rgb(241,108,4)" fg:x="21608" fg:w="8"/><text x="76.0596%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (5 samples, 0.02%)</title><rect x="75.8446%" y="85" width="0.0175%" height="15" fill="rgb(247,173,49)" fg:x="21618" fg:w="5"/><text x="76.0946%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (70 samples, 0.25%)</title><rect x="75.6377%" y="149" width="0.2456%" height="15" fill="rgb(224,114,35)" fg:x="21559" fg:w="70"/><text x="75.8877%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (44 samples, 0.15%)</title><rect x="75.7289%" y="133" width="0.1544%" height="15" fill="rgb(245,159,27)" fg:x="21585" fg:w="44"/><text x="75.9789%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (22 samples, 0.08%)</title><rect x="75.8061%" y="117" width="0.0772%" height="15" fill="rgb(245,172,44)" fg:x="21607" fg:w="22"/><text x="76.0561%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (13 samples, 0.05%)</title><rect x="75.8376%" y="101" width="0.0456%" height="15" fill="rgb(236,23,11)" fg:x="21616" fg:w="13"/><text x="76.0876%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.02%)</title><rect x="75.8622%" y="85" width="0.0211%" height="15" fill="rgb(205,117,38)" fg:x="21623" fg:w="6"/><text x="76.1122%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.02%)</title><rect x="75.8657%" y="69" width="0.0175%" height="15" fill="rgb(237,72,25)" fg:x="21624" fg:w="5"/><text x="76.1157%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.01%)</title><rect x="75.8727%" y="53" width="0.0105%" height="15" fill="rgb(244,70,9)" fg:x="21626" fg:w="3"/><text x="76.1227%" y="63.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3 samples, 0.01%)</title><rect x="75.8727%" y="37" width="0.0105%" height="15" fill="rgb(217,125,39)" fg:x="21626" fg:w="3"/><text x="76.1227%" y="47.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (311 samples, 1.09%)</title><rect x="74.7991%" y="197" width="1.0911%" height="15" fill="rgb(235,36,10)" fg:x="21320" fg:w="311"/><text x="75.0491%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (181 samples, 0.64%)</title><rect x="75.2552%" y="181" width="0.6350%" height="15" fill="rgb(251,123,47)" fg:x="21450" fg:w="181"/><text x="75.5052%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (105 samples, 0.37%)</title><rect x="75.5219%" y="165" width="0.3684%" height="15" fill="rgb(221,13,13)" fg:x="21526" fg:w="105"/><text x="75.7719%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (414 samples, 1.45%)</title><rect x="74.4623%" y="213" width="1.4525%" height="15" fill="rgb(238,131,9)" fg:x="21224" fg:w="414"/><text x="74.7123%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.02%)</title><rect x="75.8903%" y="197" width="0.0246%" height="15" fill="rgb(211,50,8)" fg:x="21631" fg:w="7"/><text x="76.1403%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (424 samples, 1.49%)</title><rect x="74.4413%" y="245" width="1.4876%" height="15" fill="rgb(245,182,24)" fg:x="21218" fg:w="424"/><text x="74.6913%" y="255.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (423 samples, 1.48%)</title><rect x="74.4448%" y="229" width="1.4841%" height="15" fill="rgb(242,14,37)" fg:x="21219" fg:w="423"/><text x="74.6948%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.01%)</title><rect x="75.9148%" y="213" width="0.0140%" height="15" fill="rgb(246,228,12)" fg:x="21638" fg:w="4"/><text x="76.1648%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.04%)</title><rect x="75.9569%" y="229" width="0.0386%" height="15" fill="rgb(213,55,15)" fg:x="21650" fg:w="11"/><text x="76.2069%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::update_knots_from_samples (20 samples, 0.07%)</title><rect x="75.9288%" y="245" width="0.0702%" height="15" fill="rgb(209,9,3)" fg:x="21642" fg:w="20"/><text x="76.1788%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="76.0166%" y="245" width="0.0105%" height="15" fill="rgb(230,59,30)" fg:x="21667" fg:w="3"/><text x="76.2666%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.02%)</title><rect x="76.0271%" y="245" width="0.0246%" height="15" fill="rgb(209,121,21)" fg:x="21670" fg:w="7"/><text x="76.2771%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="76.0516%" y="245" width="0.0105%" height="15" fill="rgb(220,109,13)" fg:x="21677" fg:w="3"/><text x="76.3016%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="76.0516%" y="229" width="0.0105%" height="15" fill="rgb(232,18,1)" fg:x="21677" fg:w="3"/><text x="76.3016%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (2,652 samples, 9.30%)</title><rect x="74.1501%" y="277" width="9.3043%" height="15" fill="rgb(215,41,42)" fg:x="21135" fg:w="2652"/><text x="74.4001%" y="287.50">fekan`fekan::..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (2,649 samples, 9.29%)</title><rect x="74.1606%" y="261" width="9.2938%" height="15" fill="rgb(224,123,36)" fg:x="21138" fg:w="2649"/><text x="74.4106%" y="271.50">fekan`fekan::..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2,107 samples, 7.39%)</title><rect x="76.0622%" y="245" width="7.3922%" height="15" fill="rgb(240,125,3)" fg:x="21680" fg:w="2107"/><text x="76.3122%" y="255.50">libsystem_..</text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (42 samples, 0.15%)</title><rect x="83.4544%" y="277" width="0.1474%" height="15" fill="rgb(205,98,50)" fg:x="23787" fg:w="42"/><text x="83.7044%" y="287.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (14 samples, 0.05%)</title><rect x="83.6017%" y="277" width="0.0491%" height="15" fill="rgb(205,185,37)" fg:x="23829" fg:w="14"/><text x="83.8517%" y="287.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (16 samples, 0.06%)</title><rect x="83.6508%" y="277" width="0.0561%" height="15" fill="rgb(238,207,15)" fg:x="23843" fg:w="16"/><text x="83.9008%" y="287.50"></text></g><g><title>fekan`__rdl_alloc_zeroed (3 samples, 0.01%)</title><rect x="83.7736%" y="245" width="0.0105%" height="15" fill="rgb(213,199,42)" fg:x="23878" fg:w="3"/><text x="84.0236%" y="255.50"></text></g><g><title>fekan`__rdl_dealloc (3 samples, 0.01%)</title><rect x="83.7842%" y="245" width="0.0105%" height="15" fill="rgb(235,201,11)" fg:x="23881" fg:w="3"/><text x="84.0342%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (627 samples, 2.20%)</title><rect x="90.1449%" y="181" width="2.1998%" height="15" fill="rgb(207,46,11)" fg:x="25694" fg:w="627"/><text x="90.3949%" y="191.50">f..</text></g><g><title>fekan`fekan::kan_layer::spline::b (1,531 samples, 5.37%)</title><rect x="87.7346%" y="197" width="5.3714%" height="15" fill="rgb(241,35,35)" fg:x="25007" fg:w="1531"/><text x="87.9846%" y="207.50">fekan`f..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (217 samples, 0.76%)</title><rect x="92.3447%" y="181" width="0.7613%" height="15" fill="rgb(243,32,47)" fg:x="26321" fg:w="217"/><text x="92.5947%" y="191.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (18 samples, 0.06%)</title><rect x="94.6392%" y="181" width="0.0632%" height="15" fill="rgb(247,202,23)" fg:x="26975" fg:w="18"/><text x="94.8892%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (2,539 samples, 8.91%)</title><rect x="85.7980%" y="213" width="8.9078%" height="15" fill="rgb(219,102,11)" fg:x="24455" fg:w="2539"/><text x="86.0480%" y="223.50">fekan`fekan::..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (456 samples, 1.60%)</title><rect x="93.1060%" y="197" width="1.5998%" height="15" fill="rgb(243,110,44)" fg:x="26538" fg:w="456"/><text x="93.3560%" y="207.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (36 samples, 0.13%)</title><rect x="96.7547%" y="197" width="0.1263%" height="15" fill="rgb(222,74,54)" fg:x="27578" fg:w="36"/><text x="97.0047%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (3,591 samples, 12.60%)</title><rect x="84.2894%" y="229" width="12.5987%" height="15" fill="rgb(216,99,12)" fg:x="24025" fg:w="3591"/><text x="84.5394%" y="239.50">fekan`fekan::kan_la..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (622 samples, 2.18%)</title><rect x="94.7058%" y="213" width="2.1822%" height="15" fill="rgb(226,22,26)" fg:x="26994" fg:w="622"/><text x="94.9558%" y="223.50">f..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (156 samples, 0.55%)</title><rect x="96.8880%" y="229" width="0.5473%" height="15" fill="rgb(217,163,10)" fg:x="27616" fg:w="156"/><text x="97.1380%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.02%)</title><rect x="97.4354%" y="229" width="0.0211%" height="15" fill="rgb(213,25,53)" fg:x="27772" fg:w="6"/><text x="97.6854%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (3,908 samples, 13.71%)</title><rect x="83.7947%" y="245" width="13.7108%" height="15" fill="rgb(252,105,26)" fg:x="23884" fg:w="3908"/><text x="84.0447%" y="255.50">fekan`fekan::kan_laye..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (14 samples, 0.05%)</title><rect x="97.4564%" y="229" width="0.0491%" height="15" fill="rgb(220,39,43)" fg:x="27778" fg:w="14"/><text x="97.7064%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (124 samples, 0.44%)</title><rect x="97.5055%" y="245" width="0.4350%" height="15" fill="rgb(229,68,48)" fg:x="27792" fg:w="124"/><text x="97.7555%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (4 samples, 0.01%)</title><rect x="97.9406%" y="245" width="0.0140%" height="15" fill="rgb(252,8,32)" fg:x="27916" fg:w="4"/><text x="98.1906%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="97.9546%" y="245" width="0.0211%" height="15" fill="rgb(223,20,43)" fg:x="27920" fg:w="6"/><text x="98.2046%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (14 samples, 0.05%)</title><rect x="97.9757%" y="245" width="0.0491%" height="15" fill="rgb(229,81,49)" fg:x="27926" fg:w="14"/><text x="98.2257%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.02%)</title><rect x="98.0283%" y="245" width="0.0211%" height="15" fill="rgb(236,28,36)" fg:x="27941" fg:w="6"/><text x="98.2783%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (4,090 samples, 14.35%)</title><rect x="83.7245%" y="261" width="14.3494%" height="15" fill="rgb(249,185,26)" fg:x="23864" fg:w="4090"/><text x="83.9745%" y="271.50">fekan`fekan::kan::Kan:..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.02%)</title><rect x="98.0493%" y="245" width="0.0246%" height="15" fill="rgb(249,174,33)" fg:x="27947" fg:w="7"/><text x="98.2993%" y="255.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (117 samples, 0.41%)</title><rect x="98.0949%" y="229" width="0.4105%" height="15" fill="rgb(233,201,37)" fg:x="27960" fg:w="117"/><text x="98.3449%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (115 samples, 0.40%)</title><rect x="98.1020%" y="213" width="0.4035%" height="15" fill="rgb(221,78,26)" fg:x="27962" fg:w="115"/><text x="98.3520%" y="223.50"></text></g><g><title>fekan`std::sys::pal::unix::time::Timespec::now (119 samples, 0.42%)</title><rect x="98.0949%" y="245" width="0.4175%" height="15" fill="rgb(250,127,30)" fg:x="27960" fg:w="119"/><text x="98.3449%" y="255.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::inc (124 samples, 0.44%)</title><rect x="98.0809%" y="261" width="0.4350%" height="15" fill="rgb(230,49,44)" fg:x="27956" fg:w="124"/><text x="98.3309%" y="271.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (3 samples, 0.01%)</title><rect x="98.5195%" y="213" width="0.0105%" height="15" fill="rgb(229,67,23)" fg:x="28081" fg:w="3"/><text x="98.7695%" y="223.50"></text></g><g><title>fekan`console::unix_term::terminal_size (3 samples, 0.01%)</title><rect x="98.5195%" y="197" width="0.0105%" height="15" fill="rgb(249,83,47)" fg:x="28081" fg:w="3"/><text x="98.7695%" y="207.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (5 samples, 0.02%)</title><rect x="98.5159%" y="261" width="0.0175%" height="15" fill="rgb(215,43,3)" fg:x="28080" fg:w="5"/><text x="98.7659%" y="271.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (5 samples, 0.02%)</title><rect x="98.5159%" y="245" width="0.0175%" height="15" fill="rgb(238,154,13)" fg:x="28080" fg:w="5"/><text x="98.7659%" y="255.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (5 samples, 0.02%)</title><rect x="98.5159%" y="229" width="0.0175%" height="15" fill="rgb(219,56,2)" fg:x="28080" fg:w="5"/><text x="98.7659%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.02%)</title><rect x="98.5335%" y="261" width="0.0175%" height="15" fill="rgb(233,0,4)" fg:x="28085" fg:w="5"/><text x="98.7835%" y="271.50"></text></g><g><title>fekan`fekan::validate_model (4,237 samples, 14.87%)</title><rect x="83.7105%" y="277" width="14.8651%" height="15" fill="rgb(235,30,7)" fg:x="23860" fg:w="4237"/><text x="83.9605%" y="287.50">fekan`fekan::validate_m..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.02%)</title><rect x="98.5510%" y="261" width="0.0246%" height="15" fill="rgb(250,79,13)" fg:x="28090" fg:w="7"/><text x="98.8010%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$clock_gettime (3 samples, 0.01%)</title><rect x="98.6142%" y="261" width="0.0105%" height="15" fill="rgb(211,146,34)" fg:x="28108" fg:w="3"/><text x="98.8642%" y="271.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (5 samples, 0.02%)</title><rect x="98.6422%" y="229" width="0.0175%" height="15" fill="rgb(228,22,38)" fg:x="28116" fg:w="5"/><text x="98.8922%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (82 samples, 0.29%)</title><rect x="98.6598%" y="229" width="0.2877%" height="15" fill="rgb(235,168,5)" fg:x="28121" fg:w="82"/><text x="98.9098%" y="239.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (92 samples, 0.32%)</title><rect x="98.6317%" y="245" width="0.3228%" height="15" fill="rgb(221,155,16)" fg:x="28113" fg:w="92"/><text x="98.8817%" y="255.50"></text></g><g><title>fekan`std::sys::pal::unix::time::Timespec::now (97 samples, 0.34%)</title><rect x="98.6247%" y="261" width="0.3403%" height="15" fill="rgb(215,215,53)" fg:x="28111" fg:w="97"/><text x="98.8747%" y="271.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (3 samples, 0.01%)</title><rect x="98.9545%" y="245" width="0.0105%" height="15" fill="rgb(223,4,10)" fg:x="28205" fg:w="3"/><text x="99.2045%" y="255.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::inc (115 samples, 0.40%)</title><rect x="98.5756%" y="277" width="0.4035%" height="15" fill="rgb(234,103,6)" fg:x="28097" fg:w="115"/><text x="98.8256%" y="287.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.01%)</title><rect x="98.9650%" y="261" width="0.0140%" height="15" fill="rgb(227,97,0)" fg:x="28208" fg:w="4"/><text x="99.2150%" y="271.50"></text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (4 samples, 0.01%)</title><rect x="98.9826%" y="229" width="0.0140%" height="15" fill="rgb(234,150,53)" fg:x="28213" fg:w="4"/><text x="99.2326%" y="239.50"></text></g><g><title>libsystem_c.dylib`isatty (9 samples, 0.03%)</title><rect x="99.0001%" y="197" width="0.0316%" height="15" fill="rgb(228,201,54)" fg:x="28218" fg:w="9"/><text x="99.2501%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (9 samples, 0.03%)</title><rect x="99.0001%" y="181" width="0.0316%" height="15" fill="rgb(222,22,37)" fg:x="28218" fg:w="9"/><text x="99.2501%" y="191.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (15 samples, 0.05%)</title><rect x="99.0001%" y="229" width="0.0526%" height="15" fill="rgb(237,53,32)" fg:x="28218" fg:w="15"/><text x="99.2501%" y="239.50"></text></g><g><title>fekan`console::unix_term::terminal_size (15 samples, 0.05%)</title><rect x="99.0001%" y="213" width="0.0526%" height="15" fill="rgb(233,25,53)" fg:x="28218" fg:w="15"/><text x="99.2501%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (6 samples, 0.02%)</title><rect x="99.0317%" y="197" width="0.0211%" height="15" fill="rgb(210,40,34)" fg:x="28227" fg:w="6"/><text x="99.2817%" y="207.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (24 samples, 0.08%)</title><rect x="98.9791%" y="277" width="0.0842%" height="15" fill="rgb(241,220,44)" fg:x="28212" fg:w="24"/><text x="99.2291%" y="287.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (24 samples, 0.08%)</title><rect x="98.9791%" y="261" width="0.0842%" height="15" fill="rgb(235,28,35)" fg:x="28212" fg:w="24"/><text x="99.2291%" y="271.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (23 samples, 0.08%)</title><rect x="98.9826%" y="245" width="0.0807%" height="15" fill="rgb(210,56,17)" fg:x="28213" fg:w="23"/><text x="99.2326%" y="255.50"></text></g><g><title>fekan`indicatif::style::ProgressStyle::format_state (3 samples, 0.01%)</title><rect x="99.0527%" y="229" width="0.0105%" height="15" fill="rgb(224,130,29)" fg:x="28233" fg:w="3"/><text x="99.3027%" y="239.50"></text></g><g><title>fekan`core::fmt::write (3 samples, 0.01%)</title><rect x="99.0527%" y="213" width="0.0105%" height="15" fill="rgb(235,212,8)" fg:x="28233" fg:w="3"/><text x="99.3027%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (81 samples, 0.28%)</title><rect x="99.0633%" y="277" width="0.2842%" height="15" fill="rgb(223,33,50)" fg:x="28236" fg:w="81"/><text x="99.3133%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (48 samples, 0.17%)</title><rect x="99.3509%" y="277" width="0.1684%" height="15" fill="rgb(219,149,13)" fg:x="28318" fg:w="48"/><text x="99.6009%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (17 samples, 0.06%)</title><rect x="99.5193%" y="277" width="0.0596%" height="15" fill="rgb(250,156,29)" fg:x="28366" fg:w="17"/><text x="99.7693%" y="287.50"></text></g><g><title>fekan`fekan::train_model (25,063 samples, 87.93%)</title><rect x="11.9180%" y="293" width="87.9311%" height="15" fill="rgb(216,193,19)" fg:x="3397" fg:w="25063"/><text x="12.1680%" y="303.50">fekan`fekan::train_model</text></g><g><title>libsystem_platform.dylib`_platform_memset (77 samples, 0.27%)</title><rect x="99.5790%" y="277" width="0.2701%" height="15" fill="rgb(216,135,14)" fg:x="28383" fg:w="77"/><text x="99.8290%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (13 samples, 0.05%)</title><rect x="99.8491%" y="293" width="0.0456%" height="15" fill="rgb(241,47,5)" fg:x="28460" fg:w="13"/><text x="100.0991%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.03%)</title><rect x="99.8947%" y="293" width="0.0281%" height="15" fill="rgb(233,42,35)" fg:x="28473" fg:w="8"/><text x="100.1447%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.01%)</title><rect x="99.9228%" y="293" width="0.0140%" height="15" fill="rgb(231,13,6)" fg:x="28481" fg:w="4"/><text x="100.1728%" y="303.50"></text></g><g><title>fekan`main (28,501 samples, 99.99%)</title><rect x="0.0000%" y="373" width="99.9930%" height="15" fill="rgb(207,181,40)" fg:x="0" fg:w="28501"/><text x="0.2500%" y="383.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (28,501 samples, 99.99%)</title><rect x="0.0000%" y="357" width="99.9930%" height="15" fill="rgb(254,173,49)" fg:x="0" fg:w="28501"/><text x="0.2500%" y="367.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (28,501 samples, 99.99%)</title><rect x="0.0000%" y="341" width="99.9930%" height="15" fill="rgb(221,1,38)" fg:x="0" fg:w="28501"/><text x="0.2500%" y="351.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (28,501 samples, 99.99%)</title><rect x="0.0000%" y="325" width="99.9930%" height="15" fill="rgb(206,124,46)" fg:x="0" fg:w="28501"/><text x="0.2500%" y="335.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (28,501 samples, 99.99%)</title><rect x="0.0000%" y="309" width="99.9930%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="28501"/><text x="0.2500%" y="319.50">fekan`fekan::main</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.06%)</title><rect x="99.9368%" y="293" width="0.0561%" height="15" fill="rgb(222,201,40)" fg:x="28485" fg:w="16"/><text x="100.1868%" y="303.50"></text></g><g><title>dyld`start (28,502 samples, 100.00%)</title><rect x="0.0000%" y="389" width="99.9965%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="28502"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>all (28,503 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="28503"/><text x="0.2500%" y="415.50"></text></g></svg></svg>