<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="16422"><g><title>fekan`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="0.0061%" y="245" width="0.0183%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2561%" y="255.50"></text></g><g><title>fekan`__rdl_alloc (2 samples, 0.01%)</title><rect x="0.0304%" y="245" width="0.0122%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="2"/><text x="0.2804%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (2 samples, 0.01%)</title><rect x="0.0548%" y="245" width="0.0122%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="2"/><text x="0.3048%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (6 samples, 0.04%)</title><rect x="0.0731%" y="245" width="0.0365%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="6"/><text x="0.3231%" y="255.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (144 samples, 0.88%)</title><rect x="0.2192%" y="85" width="0.8769%" height="15" fill="rgb(208,68,35)" fg:x="36" fg:w="144"/><text x="0.4692%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (141 samples, 0.86%)</title><rect x="0.2375%" y="69" width="0.8586%" height="15" fill="rgb(232,128,0)" fg:x="39" fg:w="141"/><text x="0.4875%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (140 samples, 0.85%)</title><rect x="0.2436%" y="53" width="0.8525%" height="15" fill="rgb(207,160,47)" fg:x="40" fg:w="140"/><text x="0.4936%" y="63.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="1.0961%" y="69" width="0.0122%" height="15" fill="rgb(228,23,34)" fg:x="180" fg:w="2"/><text x="1.3461%" y="79.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="1.1570%" y="37" width="0.0183%" height="15" fill="rgb(218,30,26)" fg:x="190" fg:w="3"/><text x="1.4070%" y="47.50"></text></g><g><title>fekan`DYLD-STUB$$read (4 samples, 0.02%)</title><rect x="1.1753%" y="37" width="0.0244%" height="15" fill="rgb(220,122,19)" fg:x="193" fg:w="4"/><text x="1.4253%" y="47.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,525 samples, 15.38%)</title><rect x="0.2070%" y="101" width="15.3757%" height="15" fill="rgb(250,228,42)" fg:x="34" fg:w="2525"/><text x="0.4570%" y="111.50">fekan`&lt;core::marker::Pha..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (2,379 samples, 14.49%)</title><rect x="1.0961%" y="85" width="14.4867%" height="15" fill="rgb(240,193,28)" fg:x="180" fg:w="2379"/><text x="1.3461%" y="95.50">fekan`serde_json::de::..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (2,377 samples, 14.47%)</title><rect x="1.1083%" y="69" width="14.4745%" height="15" fill="rgb(216,20,37)" fg:x="182" fg:w="2377"/><text x="1.3583%" y="79.50">fekan`serde_json::de::..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,373 samples, 14.45%)</title><rect x="1.1326%" y="53" width="14.4501%" height="15" fill="rgb(206,188,39)" fg:x="186" fg:w="2373"/><text x="1.3826%" y="63.50">fekan`&lt;std::io::Bytes&lt;..</text></g><g><title>libsystem_kernel.dylib`read (2,362 samples, 14.38%)</title><rect x="1.1996%" y="37" width="14.3831%" height="15" fill="rgb(217,207,13)" fg:x="197" fg:w="2362"/><text x="1.4496%" y="47.50">libsystem_kernel.dylib..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,708 samples, 16.49%)</title><rect x="0.1888%" y="117" width="16.4901%" height="15" fill="rgb(231,73,38)" fg:x="31" fg:w="2708"/><text x="0.4388%" y="127.50">fekan`&lt;serde_json::de::Se..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (180 samples, 1.10%)</title><rect x="15.5828%" y="101" width="1.0961%" height="15" fill="rgb(225,20,46)" fg:x="2559" fg:w="180"/><text x="15.8328%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (179 samples, 1.09%)</title><rect x="15.5888%" y="85" width="1.0900%" height="15" fill="rgb(210,31,41)" fg:x="2560" fg:w="179"/><text x="15.8388%" y="95.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2,713 samples, 16.52%)</title><rect x="0.1705%" y="133" width="16.5205%" height="15" fill="rgb(221,200,47)" fg:x="28" fg:w="2713"/><text x="0.4205%" y="143.50">fekan`&lt;serde::de::impls::&lt;..</text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.01%)</title><rect x="16.6788%" y="117" width="0.0122%" height="15" fill="rgb(226,26,5)" fg:x="2739" fg:w="2"/><text x="16.9288%" y="127.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (2,844 samples, 17.32%)</title><rect x="0.1583%" y="149" width="17.3182%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="2844"/><text x="0.4083%" y="159.50">fekan`&lt;&amp;mut serde_json::de:..</text></g><g><title>libsystem_kernel.dylib`read (127 samples, 0.77%)</title><rect x="16.7032%" y="133" width="0.7734%" height="15" fill="rgb(235,183,28)" fg:x="2743" fg:w="127"/><text x="16.9532%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (130 samples, 0.79%)</title><rect x="17.5009%" y="133" width="0.7916%" height="15" fill="rgb(221,5,38)" fg:x="2874" fg:w="130"/><text x="17.7509%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (130 samples, 0.79%)</title><rect x="17.5009%" y="117" width="0.7916%" height="15" fill="rgb(247,18,42)" fg:x="2874" fg:w="130"/><text x="17.7509%" y="127.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (52 samples, 0.32%)</title><rect x="18.2925%" y="133" width="0.3166%" height="15" fill="rgb(241,131,45)" fg:x="3004" fg:w="52"/><text x="18.5425%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.32%)</title><rect x="18.2925%" y="117" width="0.3166%" height="15" fill="rgb(249,31,29)" fg:x="3004" fg:w="52"/><text x="18.5425%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (51 samples, 0.31%)</title><rect x="18.2986%" y="101" width="0.3106%" height="15" fill="rgb(225,111,53)" fg:x="3005" fg:w="51"/><text x="18.5486%" y="111.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (7 samples, 0.04%)</title><rect x="18.6640%" y="85" width="0.0426%" height="15" fill="rgb(238,160,17)" fg:x="3065" fg:w="7"/><text x="18.9140%" y="95.50"></text></g><g><title>fekan`DYLD-STUB$$read (3 samples, 0.02%)</title><rect x="18.7066%" y="85" width="0.0183%" height="15" fill="rgb(214,148,48)" fg:x="3072" fg:w="3"/><text x="18.9566%" y="95.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,368 samples, 8.33%)</title><rect x="17.4766%" y="149" width="8.3303%" height="15" fill="rgb(232,36,49)" fg:x="2870" fg:w="1368"/><text x="17.7266%" y="159.50">fekan`&lt;core:..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,182 samples, 7.20%)</title><rect x="18.6092%" y="133" width="7.1977%" height="15" fill="rgb(209,103,24)" fg:x="3056" fg:w="1182"/><text x="18.8592%" y="143.50">fekan`serd..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,181 samples, 7.19%)</title><rect x="18.6153%" y="117" width="7.1916%" height="15" fill="rgb(229,88,8)" fg:x="3057" fg:w="1181"/><text x="18.8653%" y="127.50">fekan`serd..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,179 samples, 7.18%)</title><rect x="18.6275%" y="101" width="7.1794%" height="15" fill="rgb(213,181,19)" fg:x="3059" fg:w="1179"/><text x="18.8775%" y="111.50">fekan`&lt;std..</text></g><g><title>libsystem_kernel.dylib`read (1,163 samples, 7.08%)</title><rect x="18.7249%" y="85" width="7.0820%" height="15" fill="rgb(254,191,54)" fg:x="3075" fg:w="1163"/><text x="18.9749%" y="95.50">libsystem_..</text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="25.8312%" y="117" width="0.0122%" height="15" fill="rgb(241,83,37)" fg:x="4242" fg:w="2"/><text x="26.0812%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$read (3 samples, 0.02%)</title><rect x="25.8434%" y="117" width="0.0183%" height="15" fill="rgb(233,36,39)" fg:x="4244" fg:w="3"/><text x="26.0934%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,009 samples, 6.14%)</title><rect x="25.8251%" y="133" width="6.1442%" height="15" fill="rgb(226,3,54)" fg:x="4241" fg:w="1009"/><text x="26.0751%" y="143.50">fekan`&lt;s..</text></g><g><title>libsystem_kernel.dylib`read (1,003 samples, 6.11%)</title><rect x="25.8616%" y="117" width="6.1077%" height="15" fill="rgb(245,192,40)" fg:x="4247" fg:w="1003"/><text x="26.1116%" y="127.50">libsyste..</text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1,015 samples, 6.18%)</title><rect x="25.8068%" y="149" width="6.1807%" height="15" fill="rgb(238,167,29)" fg:x="4238" fg:w="1015"/><text x="26.0568%" y="159.50">fekan`&lt;s..</text></g><g><title>fekan`core::str::converts::from_utf8 (3 samples, 0.02%)</title><rect x="31.9693%" y="133" width="0.0183%" height="15" fill="rgb(232,182,51)" fg:x="5250" fg:w="3"/><text x="32.2193%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (285 samples, 1.74%)</title><rect x="31.9937%" y="149" width="1.7355%" height="15" fill="rgb(231,60,39)" fg:x="5254" fg:w="285"/><text x="32.2437%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (283 samples, 1.72%)</title><rect x="32.0058%" y="133" width="1.7233%" height="15" fill="rgb(208,69,12)" fg:x="5256" fg:w="283"/><text x="32.2558%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (5,681 samples, 34.59%)</title><rect x="0.1401%" y="165" width="34.5938%" height="15" fill="rgb(235,93,37)" fg:x="23" fg:w="5681"/><text x="0.3901%" y="175.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (164 samples, 1.00%)</title><rect x="33.7352%" y="149" width="0.9987%" height="15" fill="rgb(213,116,39)" fg:x="5540" fg:w="164"/><text x="33.9852%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (163 samples, 0.99%)</title><rect x="33.7413%" y="133" width="0.9926%" height="15" fill="rgb(222,207,29)" fg:x="5541" fg:w="163"/><text x="33.9913%" y="143.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="34.7400%" y="149" width="0.0183%" height="15" fill="rgb(206,96,30)" fg:x="5705" fg:w="3"/><text x="34.9900%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (195 samples, 1.19%)</title><rect x="34.7339%" y="165" width="1.1874%" height="15" fill="rgb(218,138,4)" fg:x="5704" fg:w="195"/><text x="34.9839%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (190 samples, 1.16%)</title><rect x="34.7643%" y="149" width="1.1570%" height="15" fill="rgb(250,191,14)" fg:x="5709" fg:w="190"/><text x="35.0143%" y="159.50"></text></g><g><title>fekan`serde_json::de::from_trait (5,880 samples, 35.81%)</title><rect x="0.1218%" y="229" width="35.8056%" height="15" fill="rgb(239,60,40)" fg:x="20" fg:w="5880"/><text x="0.3718%" y="239.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (5,880 samples, 35.81%)</title><rect x="0.1218%" y="213" width="35.8056%" height="15" fill="rgb(206,27,48)" fg:x="20" fg:w="5880"/><text x="0.3718%" y="223.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (5,880 samples, 35.81%)</title><rect x="0.1218%" y="197" width="35.8056%" height="15" fill="rgb(225,35,8)" fg:x="20" fg:w="5880"/><text x="0.3718%" y="207.50">fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for ..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (5,879 samples, 35.80%)</title><rect x="0.1279%" y="181" width="35.7995%" height="15" fill="rgb(250,213,24)" fg:x="21" fg:w="5879"/><text x="0.3779%" y="191.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAcces..</text></g><g><title>fekan`fekan::load_regression_data (5,883 samples, 35.82%)</title><rect x="0.1096%" y="245" width="35.8239%" height="15" fill="rgb(247,123,22)" fg:x="18" fg:w="5883"/><text x="0.3596%" y="255.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`DYLD-STUB$$bzero (17 samples, 0.10%)</title><rect x="35.9761%" y="229" width="0.1035%" height="15" fill="rgb(231,138,38)" fg:x="5908" fg:w="17"/><text x="36.2261%" y="239.50"></text></g><g><title>fekan`DYLD-STUB$$free (11 samples, 0.07%)</title><rect x="36.0796%" y="229" width="0.0670%" height="15" fill="rgb(231,145,46)" fg:x="5925" fg:w="11"/><text x="36.3296%" y="239.50"></text></g><g><title>fekan`__rdl_dealloc (2 samples, 0.01%)</title><rect x="36.1466%" y="229" width="0.0122%" height="15" fill="rgb(251,118,11)" fg:x="5936" fg:w="2"/><text x="36.3966%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (1,003 samples, 6.11%)</title><rect x="36.8286%" y="197" width="6.1077%" height="15" fill="rgb(217,147,25)" fg:x="6048" fg:w="1003"/><text x="37.0786%" y="207.50">fekan`fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (494 samples, 3.01%)</title><rect x="39.9281%" y="181" width="3.0082%" height="15" fill="rgb(247,81,37)" fg:x="6557" fg:w="494"/><text x="40.1781%" y="191.50">fek..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (415 samples, 2.53%)</title><rect x="42.9363%" y="197" width="2.5271%" height="15" fill="rgb(209,12,38)" fg:x="7051" fg:w="415"/><text x="43.1863%" y="207.50">fe..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (1,536 samples, 9.35%)</title><rect x="36.3659%" y="213" width="9.3533%" height="15" fill="rgb(227,1,9)" fg:x="5972" fg:w="1536"/><text x="36.6159%" y="223.50">fekan`fekan::..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (42 samples, 0.26%)</title><rect x="45.4634%" y="197" width="0.2558%" height="15" fill="rgb(248,47,43)" fg:x="7466" fg:w="42"/><text x="45.7134%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (37 samples, 0.23%)</title><rect x="45.7192%" y="213" width="0.2253%" height="15" fill="rgb(221,10,30)" fg:x="7508" fg:w="37"/><text x="45.9692%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (16 samples, 0.10%)</title><rect x="45.9445%" y="213" width="0.0974%" height="15" fill="rgb(210,229,1)" fg:x="7545" fg:w="16"/><text x="46.1945%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (30 samples, 0.18%)</title><rect x="46.0419%" y="213" width="0.1827%" height="15" fill="rgb(222,148,37)" fg:x="7561" fg:w="30"/><text x="46.2919%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (1,655 samples, 10.08%)</title><rect x="36.1588%" y="229" width="10.0779%" height="15" fill="rgb(234,67,33)" fg:x="5938" fg:w="1655"/><text x="36.4088%" y="239.50">fekan`fekan::ka..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="46.2246%" y="213" width="0.0122%" height="15" fill="rgb(247,98,35)" fg:x="7591" fg:w="2"/><text x="46.4746%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::clear_samples (39 samples, 0.24%)</title><rect x="46.2368%" y="229" width="0.2375%" height="15" fill="rgb(247,138,52)" fg:x="7593" fg:w="39"/><text x="46.4868%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (35 samples, 0.21%)</title><rect x="46.2611%" y="213" width="0.2131%" height="15" fill="rgb(213,79,30)" fg:x="7597" fg:w="35"/><text x="46.5111%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$calloc (5 samples, 0.03%)</title><rect x="46.5230%" y="213" width="0.0304%" height="15" fill="rgb(246,177,23)" fg:x="7640" fg:w="5"/><text x="46.7730%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="46.5534%" y="213" width="0.0122%" height="15" fill="rgb(230,62,27)" fg:x="7645" fg:w="2"/><text x="46.8034%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$memcpy (4 samples, 0.02%)</title><rect x="46.5656%" y="213" width="0.0244%" height="15" fill="rgb(216,154,8)" fg:x="7647" fg:w="4"/><text x="46.8156%" y="223.50"></text></g><g><title>fekan`__rdl_alloc_zeroed (6 samples, 0.04%)</title><rect x="46.5899%" y="213" width="0.0365%" height="15" fill="rgb(244,35,45)" fg:x="7651" fg:w="6"/><text x="46.8399%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (1,180 samples, 7.19%)</title><rect x="66.3196%" y="165" width="7.1855%" height="15" fill="rgb(251,115,12)" fg:x="10891" fg:w="1180"/><text x="66.5696%" y="175.50">fekan`feka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (940 samples, 5.72%)</title><rect x="67.7810%" y="149" width="5.7240%" height="15" fill="rgb(240,54,50)" fg:x="11131" fg:w="940"/><text x="68.0310%" y="159.50">fekan`f..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (768 samples, 4.68%)</title><rect x="73.5051%" y="165" width="4.6767%" height="15" fill="rgb(233,84,52)" fg:x="12071" fg:w="768"/><text x="73.7551%" y="175.50">fekan..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (4,539 samples, 27.64%)</title><rect x="53.4953%" y="181" width="27.6398%" height="15" fill="rgb(207,117,47)" fg:x="8785" fg:w="4539"/><text x="53.7453%" y="191.50">fekan`fekan::kan_layer::spline::basis_cached</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (485 samples, 2.95%)</title><rect x="78.1817%" y="165" width="2.9534%" height="15" fill="rgb(249,43,39)" fg:x="12839" fg:w="485"/><text x="78.4317%" y="175.50">fek..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (5,898 samples, 35.92%)</title><rect x="48.6299%" y="197" width="35.9152%" height="15" fill="rgb(209,38,44)" fg:x="7986" fg:w="5898"/><text x="48.8799%" y="207.50">fekan`fekan::kan_layer::spline::basis_cached</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (560 samples, 3.41%)</title><rect x="81.1351%" y="181" width="3.4101%" height="15" fill="rgb(236,212,23)" fg:x="13324" fg:w="560"/><text x="81.3851%" y="191.50">fek..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (145 samples, 0.88%)</title><rect x="84.5451%" y="197" width="0.8830%" height="15" fill="rgb(242,79,21)" fg:x="13884" fg:w="145"/><text x="84.7951%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (6,409 samples, 39.03%)</title><rect x="46.6265%" y="213" width="39.0269%" height="15" fill="rgb(211,96,35)" fg:x="7657" fg:w="6409"/><text x="46.8765%" y="223.50">fekan`fekan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (37 samples, 0.23%)</title><rect x="85.4281%" y="197" width="0.2253%" height="15" fill="rgb(253,215,40)" fg:x="14029" fg:w="37"/><text x="85.6781%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (195 samples, 1.19%)</title><rect x="85.6534%" y="213" width="1.1874%" height="15" fill="rgb(211,81,21)" fg:x="14066" fg:w="195"/><text x="85.9034%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (29 samples, 0.18%)</title><rect x="86.8408%" y="213" width="0.1766%" height="15" fill="rgb(208,190,38)" fg:x="14261" fg:w="29"/><text x="87.0908%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (21 samples, 0.13%)</title><rect x="87.0174%" y="213" width="0.1279%" height="15" fill="rgb(235,213,38)" fg:x="14290" fg:w="21"/><text x="87.2674%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (30 samples, 0.18%)</title><rect x="87.1453%" y="213" width="0.1827%" height="15" fill="rgb(237,122,38)" fg:x="14311" fg:w="30"/><text x="87.3953%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (10 samples, 0.06%)</title><rect x="87.3341%" y="213" width="0.0609%" height="15" fill="rgb(244,218,35)" fg:x="14342" fg:w="10"/><text x="87.5841%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (26 samples, 0.16%)</title><rect x="87.3950%" y="213" width="0.1583%" height="15" fill="rgb(240,68,47)" fg:x="14352" fg:w="26"/><text x="87.6450%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (6,757 samples, 41.15%)</title><rect x="46.4742%" y="229" width="41.1460%" height="15" fill="rgb(210,16,53)" fg:x="7632" fg:w="6757"/><text x="46.7242%" y="239.50">fekan`fekan::kan::Kan::forward</text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.07%)</title><rect x="87.5533%" y="213" width="0.0670%" height="15" fill="rgb(235,124,12)" fg:x="14378" fg:w="11"/><text x="87.8033%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::update (87 samples, 0.53%)</title><rect x="87.6203%" y="229" width="0.5298%" height="15" fill="rgb(224,169,11)" fg:x="14389" fg:w="87"/><text x="87.8703%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (2 samples, 0.01%)</title><rect x="88.1561%" y="213" width="0.0122%" height="15" fill="rgb(250,166,2)" fg:x="14477" fg:w="2"/><text x="88.4061%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="88.3632%" y="133" width="0.0122%" height="15" fill="rgb(242,216,29)" fg:x="14511" fg:w="2"/><text x="88.6132%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="88.3875%" y="117" width="0.0122%" height="15" fill="rgb(230,116,27)" fg:x="14515" fg:w="2"/><text x="88.6375%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (4 samples, 0.02%)</title><rect x="88.3814%" y="133" width="0.0244%" height="15" fill="rgb(228,99,48)" fg:x="14514" fg:w="4"/><text x="88.6314%" y="143.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (10 samples, 0.06%)</title><rect x="88.3510%" y="181" width="0.0609%" height="15" fill="rgb(253,11,6)" fg:x="14509" fg:w="10"/><text x="88.6010%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (8 samples, 0.05%)</title><rect x="88.3632%" y="165" width="0.0487%" height="15" fill="rgb(247,143,39)" fg:x="14511" fg:w="8"/><text x="88.6132%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (8 samples, 0.05%)</title><rect x="88.3632%" y="149" width="0.0487%" height="15" fill="rgb(236,97,10)" fg:x="14511" fg:w="8"/><text x="88.6132%" y="159.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (18 samples, 0.11%)</title><rect x="88.3084%" y="197" width="0.1096%" height="15" fill="rgb(233,208,19)" fg:x="14502" fg:w="18"/><text x="88.5584%" y="207.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (7 samples, 0.04%)</title><rect x="88.7833%" y="149" width="0.0426%" height="15" fill="rgb(216,164,2)" fg:x="14580" fg:w="7"/><text x="89.0333%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="88.8138%" y="133" width="0.0122%" height="15" fill="rgb(220,129,5)" fg:x="14585" fg:w="2"/><text x="89.0638%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (26 samples, 0.16%)</title><rect x="88.8260%" y="149" width="0.1583%" height="15" fill="rgb(242,17,10)" fg:x="14587" fg:w="26"/><text x="89.0760%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.02%)</title><rect x="88.9660%" y="133" width="0.0183%" height="15" fill="rgb(242,107,0)" fg:x="14610" fg:w="3"/><text x="89.2160%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="89.1487%" y="133" width="0.0122%" height="15" fill="rgb(251,28,31)" fg:x="14640" fg:w="2"/><text x="89.3987%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (70 samples, 0.43%)</title><rect x="89.1609%" y="133" width="0.4263%" height="15" fill="rgb(233,223,10)" fg:x="14642" fg:w="70"/><text x="89.4109%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (14 samples, 0.09%)</title><rect x="89.5019%" y="117" width="0.0853%" height="15" fill="rgb(215,21,27)" fg:x="14698" fg:w="14"/><text x="89.7519%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (8 samples, 0.05%)</title><rect x="89.5384%" y="101" width="0.0487%" height="15" fill="rgb(232,23,21)" fg:x="14704" fg:w="8"/><text x="89.7884%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (41 samples, 0.25%)</title><rect x="89.6359%" y="117" width="0.2497%" height="15" fill="rgb(244,5,23)" fg:x="14720" fg:w="41"/><text x="89.8859%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (9 samples, 0.05%)</title><rect x="89.8307%" y="101" width="0.0548%" height="15" fill="rgb(226,81,46)" fg:x="14752" fg:w="9"/><text x="90.0807%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (5 samples, 0.03%)</title><rect x="89.8551%" y="85" width="0.0304%" height="15" fill="rgb(247,70,30)" fg:x="14756" fg:w="5"/><text x="90.1051%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (14 samples, 0.09%)</title><rect x="89.8855%" y="101" width="0.0853%" height="15" fill="rgb(212,68,19)" fg:x="14761" fg:w="14"/><text x="90.1355%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (66 samples, 0.40%)</title><rect x="89.5871%" y="133" width="0.4019%" height="15" fill="rgb(240,187,13)" fg:x="14712" fg:w="66"/><text x="89.8371%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (17 samples, 0.10%)</title><rect x="89.8855%" y="117" width="0.1035%" height="15" fill="rgb(223,113,26)" fg:x="14761" fg:w="17"/><text x="90.1355%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.02%)</title><rect x="89.9708%" y="101" width="0.0183%" height="15" fill="rgb(206,192,2)" fg:x="14775" fg:w="3"/><text x="90.2208%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3 samples, 0.02%)</title><rect x="89.9708%" y="85" width="0.0183%" height="15" fill="rgb(241,108,4)" fg:x="14775" fg:w="3"/><text x="90.2208%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.01%)</title><rect x="89.9769%" y="69" width="0.0122%" height="15" fill="rgb(247,173,49)" fg:x="14776" fg:w="2"/><text x="90.2269%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (166 samples, 1.01%)</title><rect x="88.9843%" y="149" width="1.0108%" height="15" fill="rgb(224,114,35)" fg:x="14613" fg:w="166"/><text x="89.2343%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (250 samples, 1.52%)</title><rect x="88.4850%" y="165" width="1.5223%" height="15" fill="rgb(245,159,27)" fg:x="14531" fg:w="250"/><text x="88.7350%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="89.9951%" y="149" width="0.0122%" height="15" fill="rgb(245,172,44)" fg:x="14779" fg:w="2"/><text x="90.2451%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (265 samples, 1.61%)</title><rect x="88.4180%" y="197" width="1.6137%" height="15" fill="rgb(236,23,11)" fg:x="14520" fg:w="265"/><text x="88.6680%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (264 samples, 1.61%)</title><rect x="88.4241%" y="181" width="1.6076%" height="15" fill="rgb(205,117,38)" fg:x="14521" fg:w="264"/><text x="88.6741%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.02%)</title><rect x="90.0073%" y="165" width="0.0244%" height="15" fill="rgb(237,72,25)" fg:x="14781" fg:w="4"/><text x="90.2573%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::generate_uniform_knots (2 samples, 0.01%)</title><rect x="90.0560%" y="181" width="0.0122%" height="15" fill="rgb(244,70,9)" fg:x="14789" fg:w="2"/><text x="90.3060%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.02%)</title><rect x="90.0682%" y="181" width="0.0244%" height="15" fill="rgb(217,125,39)" fg:x="14791" fg:w="4"/><text x="90.3182%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::update_knots_from_samples (13 samples, 0.08%)</title><rect x="90.0317%" y="197" width="0.0792%" height="15" fill="rgb(235,36,10)" fg:x="14785" fg:w="13"/><text x="90.2817%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::generate_uniform_knots (2 samples, 0.01%)</title><rect x="90.1108%" y="197" width="0.0122%" height="15" fill="rgb(251,123,47)" fg:x="14798" fg:w="2"/><text x="90.3608%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="90.1291%" y="197" width="0.0122%" height="15" fill="rgb(221,13,13)" fg:x="14801" fg:w="2"/><text x="90.3791%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="90.1474%" y="197" width="0.0122%" height="15" fill="rgb(238,131,9)" fg:x="14804" fg:w="2"/><text x="90.3974%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (339 samples, 2.06%)</title><rect x="88.1683%" y="213" width="2.0643%" height="15" fill="rgb(211,50,8)" fg:x="14479" fg:w="339"/><text x="88.4183%" y="223.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memset (11 samples, 0.07%)</title><rect x="90.1656%" y="197" width="0.0670%" height="15" fill="rgb(245,182,24)" fg:x="14807" fg:w="11"/><text x="90.4156%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (343 samples, 2.09%)</title><rect x="88.1500%" y="229" width="2.0887%" height="15" fill="rgb(242,14,37)" fg:x="14476" fg:w="343"/><text x="88.4000%" y="239.50">f..</text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (38 samples, 0.23%)</title><rect x="90.2387%" y="229" width="0.2314%" height="15" fill="rgb(246,228,12)" fg:x="14819" fg:w="38"/><text x="90.4887%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (13 samples, 0.08%)</title><rect x="90.4701%" y="229" width="0.0792%" height="15" fill="rgb(213,55,15)" fg:x="14857" fg:w="13"/><text x="90.7201%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (13 samples, 0.08%)</title><rect x="90.5493%" y="229" width="0.0792%" height="15" fill="rgb(209,9,3)" fg:x="14870" fg:w="13"/><text x="90.7993%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (1,050 samples, 6.39%)</title><rect x="91.1217%" y="181" width="6.3939%" height="15" fill="rgb(230,59,30)" fg:x="14964" fg:w="1050"/><text x="91.3717%" y="191.50">fekan`fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (949 samples, 5.78%)</title><rect x="91.7367%" y="165" width="5.7788%" height="15" fill="rgb(209,121,21)" fg:x="15065" fg:w="949"/><text x="91.9867%" y="175.50">fekan`f..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (727 samples, 4.43%)</title><rect x="93.0885%" y="149" width="4.4270%" height="15" fill="rgb(220,109,13)" fg:x="15287" fg:w="727"/><text x="93.3385%" y="159.50">fekan..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (291 samples, 1.77%)</title><rect x="95.7435%" y="133" width="1.7720%" height="15" fill="rgb(232,18,1)" fg:x="15723" fg:w="291"/><text x="95.9935%" y="143.50">f..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (1,139 samples, 6.94%)</title><rect x="90.6589%" y="197" width="6.9358%" height="15" fill="rgb(215,41,42)" fg:x="14888" fg:w="1139"/><text x="90.9089%" y="207.50">fekan`fek..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (13 samples, 0.08%)</title><rect x="97.5155%" y="181" width="0.0792%" height="15" fill="rgb(224,123,36)" fg:x="16014" fg:w="13"/><text x="97.7655%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (46 samples, 0.28%)</title><rect x="97.5947%" y="197" width="0.2801%" height="15" fill="rgb(240,125,3)" fg:x="16027" fg:w="46"/><text x="97.8447%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="97.8748%" y="197" width="0.0183%" height="15" fill="rgb(205,98,50)" fg:x="16073" fg:w="3"/><text x="98.1248%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (1,201 samples, 7.31%)</title><rect x="90.6345%" y="213" width="7.3134%" height="15" fill="rgb(205,185,37)" fg:x="14884" fg:w="1201"/><text x="90.8845%" y="223.50">fekan`feka..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.05%)</title><rect x="97.8931%" y="197" width="0.0548%" height="15" fill="rgb(238,207,15)" fg:x="16076" fg:w="9"/><text x="98.1431%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (2 samples, 0.01%)</title><rect x="97.9479%" y="213" width="0.0122%" height="15" fill="rgb(213,199,42)" fg:x="16085" fg:w="2"/><text x="98.1979%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (2 samples, 0.01%)</title><rect x="97.9905%" y="165" width="0.0122%" height="15" fill="rgb(235,201,11)" fg:x="16092" fg:w="2"/><text x="98.2405%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (17 samples, 0.10%)</title><rect x="98.0027%" y="165" width="0.1035%" height="15" fill="rgb(207,46,11)" fg:x="16094" fg:w="17"/><text x="98.2527%" y="175.50"></text></g><g><title>fekan`std::sys::pal::unix::time::Timespec::now (22 samples, 0.13%)</title><rect x="97.9783%" y="197" width="0.1340%" height="15" fill="rgb(241,35,35)" fg:x="16090" fg:w="22"/><text x="98.2283%" y="207.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (21 samples, 0.13%)</title><rect x="97.9844%" y="181" width="0.1279%" height="15" fill="rgb(243,32,47)" fg:x="16091" fg:w="21"/><text x="98.2344%" y="191.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::inc (26 samples, 0.16%)</title><rect x="97.9601%" y="213" width="0.1583%" height="15" fill="rgb(247,202,23)" fg:x="16087" fg:w="26"/><text x="98.2101%" y="223.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (2 samples, 0.01%)</title><rect x="98.1184%" y="213" width="0.0122%" height="15" fill="rgb(219,102,11)" fg:x="16113" fg:w="2"/><text x="98.3684%" y="223.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (2 samples, 0.01%)</title><rect x="98.1184%" y="197" width="0.0122%" height="15" fill="rgb(243,110,44)" fg:x="16113" fg:w="2"/><text x="98.3684%" y="207.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (2 samples, 0.01%)</title><rect x="98.1184%" y="181" width="0.0122%" height="15" fill="rgb(222,74,54)" fg:x="16113" fg:w="2"/><text x="98.3684%" y="191.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (2 samples, 0.01%)</title><rect x="98.1184%" y="165" width="0.0122%" height="15" fill="rgb(216,99,12)" fg:x="16113" fg:w="2"/><text x="98.3684%" y="175.50"></text></g><g><title>fekan`console::unix_term::terminal_size (2 samples, 0.01%)</title><rect x="98.1184%" y="149" width="0.0122%" height="15" fill="rgb(226,22,26)" fg:x="16113" fg:w="2"/><text x="98.3684%" y="159.50"></text></g><g><title>libsystem_c.dylib`isatty (2 samples, 0.01%)</title><rect x="98.1184%" y="133" width="0.0122%" height="15" fill="rgb(217,163,10)" fg:x="16113" fg:w="2"/><text x="98.3684%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (2 samples, 0.01%)</title><rect x="98.1184%" y="117" width="0.0122%" height="15" fill="rgb(213,25,53)" fg:x="16113" fg:w="2"/><text x="98.3684%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_free (8 samples, 0.05%)</title><rect x="98.1306%" y="213" width="0.0487%" height="15" fill="rgb(252,105,26)" fg:x="16115" fg:w="8"/><text x="98.3806%" y="223.50"></text></g><g><title>fekan`fekan::validate_model (1,242 samples, 7.56%)</title><rect x="90.6284%" y="229" width="7.5630%" height="15" fill="rgb(220,39,43)" fg:x="14883" fg:w="1242"/><text x="90.8784%" y="239.50">fekan`feka..</text></g><g><title>fekan`DYLD-STUB$$clock_gettime (3 samples, 0.02%)</title><rect x="98.2280%" y="213" width="0.0183%" height="15" fill="rgb(229,68,48)" fg:x="16131" fg:w="3"/><text x="98.4780%" y="223.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (4 samples, 0.02%)</title><rect x="98.2645%" y="181" width="0.0244%" height="15" fill="rgb(252,8,32)" fg:x="16137" fg:w="4"/><text x="98.5145%" y="191.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (62 samples, 0.38%)</title><rect x="98.2463%" y="197" width="0.3775%" height="15" fill="rgb(223,20,43)" fg:x="16134" fg:w="62"/><text x="98.4963%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (55 samples, 0.33%)</title><rect x="98.2889%" y="181" width="0.3349%" height="15" fill="rgb(229,81,49)" fg:x="16141" fg:w="55"/><text x="98.5389%" y="191.50"></text></g><g><title>fekan`std::sys::pal::unix::time::Timespec::now (63 samples, 0.38%)</title><rect x="98.2463%" y="213" width="0.3836%" height="15" fill="rgb(236,28,36)" fg:x="16134" fg:w="63"/><text x="98.4963%" y="223.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::inc (73 samples, 0.44%)</title><rect x="98.1915%" y="229" width="0.4445%" height="15" fill="rgb(249,185,26)" fg:x="16125" fg:w="73"/><text x="98.4415%" y="239.50"></text></g><g><title>fekan`console::term::Term::flush (2 samples, 0.01%)</title><rect x="98.6421%" y="165" width="0.0122%" height="15" fill="rgb(249,174,33)" fg:x="16199" fg:w="2"/><text x="98.8921%" y="175.50"></text></g><g><title>fekan`console::term::Term::write_through (2 samples, 0.01%)</title><rect x="98.6421%" y="149" width="0.0122%" height="15" fill="rgb(233,201,37)" fg:x="16199" fg:w="2"/><text x="98.8921%" y="159.50"></text></g><g><title>fekan`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (2 samples, 0.01%)</title><rect x="98.6421%" y="133" width="0.0122%" height="15" fill="rgb(221,78,26)" fg:x="16199" fg:w="2"/><text x="98.8921%" y="143.50"></text></g><g><title>fekan`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (2 samples, 0.01%)</title><rect x="98.6421%" y="117" width="0.0122%" height="15" fill="rgb(250,127,30)" fg:x="16199" fg:w="2"/><text x="98.8921%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (2 samples, 0.01%)</title><rect x="98.6421%" y="101" width="0.0122%" height="15" fill="rgb(230,49,44)" fg:x="16199" fg:w="2"/><text x="98.8921%" y="111.50"></text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (3 samples, 0.02%)</title><rect x="98.6421%" y="181" width="0.0183%" height="15" fill="rgb(229,67,23)" fg:x="16199" fg:w="3"/><text x="98.8921%" y="191.50"></text></g><g><title>libsystem_c.dylib`isatty (2 samples, 0.01%)</title><rect x="98.6603%" y="149" width="0.0122%" height="15" fill="rgb(249,83,47)" fg:x="16202" fg:w="2"/><text x="98.9103%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (2 samples, 0.01%)</title><rect x="98.6603%" y="133" width="0.0122%" height="15" fill="rgb(215,43,3)" fg:x="16202" fg:w="2"/><text x="98.9103%" y="143.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (10 samples, 0.06%)</title><rect x="98.6603%" y="181" width="0.0609%" height="15" fill="rgb(238,154,13)" fg:x="16202" fg:w="10"/><text x="98.9103%" y="191.50"></text></g><g><title>fekan`console::unix_term::terminal_size (10 samples, 0.06%)</title><rect x="98.6603%" y="165" width="0.0609%" height="15" fill="rgb(219,56,2)" fg:x="16202" fg:w="10"/><text x="98.9103%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (8 samples, 0.05%)</title><rect x="98.6725%" y="149" width="0.0487%" height="15" fill="rgb(233,0,4)" fg:x="16204" fg:w="8"/><text x="98.9225%" y="159.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (14 samples, 0.09%)</title><rect x="98.6421%" y="197" width="0.0853%" height="15" fill="rgb(235,30,7)" fg:x="16199" fg:w="14"/><text x="98.8921%" y="207.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (16 samples, 0.10%)</title><rect x="98.6360%" y="229" width="0.0974%" height="15" fill="rgb(250,79,13)" fg:x="16198" fg:w="16"/><text x="98.8860%" y="239.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (15 samples, 0.09%)</title><rect x="98.6421%" y="213" width="0.0913%" height="15" fill="rgb(211,146,34)" fg:x="16199" fg:w="15"/><text x="98.8921%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (57 samples, 0.35%)</title><rect x="98.7334%" y="229" width="0.3471%" height="15" fill="rgb(228,22,38)" fg:x="16214" fg:w="57"/><text x="98.9834%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (38 samples, 0.23%)</title><rect x="99.0805%" y="229" width="0.2314%" height="15" fill="rgb(235,168,5)" fg:x="16271" fg:w="38"/><text x="99.3305%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="99.3119%" y="229" width="0.0122%" height="15" fill="rgb(221,155,16)" fg:x="16309" fg:w="2"/><text x="99.5619%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (12 samples, 0.07%)</title><rect x="99.3241%" y="229" width="0.0731%" height="15" fill="rgb(215,215,53)" fg:x="16311" fg:w="12"/><text x="99.5741%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="99.3972%" y="229" width="0.0183%" height="15" fill="rgb(223,4,10)" fg:x="16323" fg:w="3"/><text x="99.6472%" y="239.50"></text></g><g><title>fekan`fekan::train_model (10,479 samples, 63.81%)</title><rect x="35.9335%" y="245" width="63.8107%" height="15" fill="rgb(234,103,6)" fg:x="5901" fg:w="10479"/><text x="36.1835%" y="255.50">fekan`fekan::train_model</text></g><g><title>libsystem_platform.dylib`_platform_memset (54 samples, 0.33%)</title><rect x="99.4154%" y="229" width="0.3288%" height="15" fill="rgb(227,97,0)" fg:x="16326" fg:w="54"/><text x="99.6654%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (9 samples, 0.05%)</title><rect x="99.7442%" y="245" width="0.0548%" height="15" fill="rgb(234,150,53)" fg:x="16380" fg:w="9"/><text x="99.9942%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.07%)</title><rect x="99.7991%" y="245" width="0.0670%" height="15" fill="rgb(228,201,54)" fg:x="16389" fg:w="11"/><text x="100.0491%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="99.8660%" y="245" width="0.0183%" height="15" fill="rgb(222,22,37)" fg:x="16400" fg:w="3"/><text x="100.1160%" y="255.50"></text></g><g><title>dyld`start (16,421 samples, 99.99%)</title><rect x="0.0000%" y="341" width="99.9939%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="16421"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>fekan`main (16,420 samples, 99.99%)</title><rect x="0.0061%" y="325" width="99.9878%" height="15" fill="rgb(233,25,53)" fg:x="1" fg:w="16420"/><text x="0.2561%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (16,420 samples, 99.99%)</title><rect x="0.0061%" y="309" width="99.9878%" height="15" fill="rgb(210,40,34)" fg:x="1" fg:w="16420"/><text x="0.2561%" y="319.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (16,420 samples, 99.99%)</title><rect x="0.0061%" y="293" width="99.9878%" height="15" fill="rgb(241,220,44)" fg:x="1" fg:w="16420"/><text x="0.2561%" y="303.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (16,420 samples, 99.99%)</title><rect x="0.0061%" y="277" width="99.9878%" height="15" fill="rgb(235,28,35)" fg:x="1" fg:w="16420"/><text x="0.2561%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (16,420 samples, 99.99%)</title><rect x="0.0061%" y="261" width="99.9878%" height="15" fill="rgb(210,56,17)" fg:x="1" fg:w="16420"/><text x="0.2561%" y="271.50">fekan`fekan::main</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (18 samples, 0.11%)</title><rect x="99.8843%" y="245" width="0.1096%" height="15" fill="rgb(224,130,29)" fg:x="16403" fg:w="18"/><text x="100.1343%" y="255.50"></text></g><g><title>all (16,422 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="16422"/><text x="0.2500%" y="367.50"></text></g></svg></svg>