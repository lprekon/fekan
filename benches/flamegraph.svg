<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="14323"><g><title>fekan`fekan::split_data (2 samples, 0.01%)</title><rect x="0.0070%" y="245" width="0.0140%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2570%" y="255.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (90 samples, 0.63%)</title><rect x="0.0489%" y="101" width="0.6284%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="90"/><text x="0.2989%" y="111.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.63%)</title><rect x="0.0489%" y="85" width="0.6284%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="90"/><text x="0.2989%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (90 samples, 0.63%)</title><rect x="0.0489%" y="69" width="0.6284%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="90"/><text x="0.2989%" y="79.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="0.7121%" y="69" width="0.0209%" height="15" fill="rgb(208,68,35)" fg:x="102" fg:w="3"/><text x="0.9621%" y="79.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="0.7331%" y="53" width="0.0209%" height="15" fill="rgb(232,128,0)" fg:x="105" fg:w="3"/><text x="0.9831%" y="63.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.01%)</title><rect x="0.7540%" y="53" width="0.0140%" height="15" fill="rgb(207,160,47)" fg:x="108" fg:w="2"/><text x="1.0040%" y="63.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,489 samples, 10.40%)</title><rect x="0.0419%" y="117" width="10.3959%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1489"/><text x="0.2919%" y="127.50">fekan`&lt;core::ma..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,398 samples, 9.76%)</title><rect x="0.6772%" y="101" width="9.7605%" height="15" fill="rgb(218,30,26)" fg:x="97" fg:w="1398"/><text x="0.9272%" y="111.50">fekan`serde_js..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,398 samples, 9.76%)</title><rect x="0.6772%" y="85" width="9.7605%" height="15" fill="rgb(220,122,19)" fg:x="97" fg:w="1398"/><text x="0.9272%" y="95.50">fekan`serde_js..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,390 samples, 9.70%)</title><rect x="0.7331%" y="69" width="9.7047%" height="15" fill="rgb(250,228,42)" fg:x="105" fg:w="1390"/><text x="0.9831%" y="79.50">fekan`&lt;std::io..</text></g><g><title>libsystem_kernel.dylib`read (1,385 samples, 9.67%)</title><rect x="0.7680%" y="53" width="9.6698%" height="15" fill="rgb(240,193,28)" fg:x="110" fg:w="1385"/><text x="1.0180%" y="63.50">libsystem_kern..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,620 samples, 11.31%)</title><rect x="0.0349%" y="133" width="11.3105%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="1620"/><text x="0.2849%" y="143.50">fekan`&lt;serde_json..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (130 samples, 0.91%)</title><rect x="10.4378%" y="117" width="0.9076%" height="15" fill="rgb(206,188,39)" fg:x="1495" fg:w="130"/><text x="10.6878%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (129 samples, 0.90%)</title><rect x="10.4447%" y="101" width="0.9006%" height="15" fill="rgb(217,207,13)" fg:x="1496" fg:w="129"/><text x="10.6947%" y="111.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,621 samples, 11.32%)</title><rect x="0.0349%" y="149" width="11.3175%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="1621"/><text x="0.2849%" y="159.50">fekan`&lt;serde::de:..</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,692 samples, 11.81%)</title><rect x="0.0349%" y="165" width="11.8132%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1692"/><text x="0.2849%" y="175.50">fekan`&lt;&amp;mut serde_..</text></g><g><title>libsystem_kernel.dylib`read (70 samples, 0.49%)</title><rect x="11.3594%" y="149" width="0.4887%" height="15" fill="rgb(210,31,41)" fg:x="1627" fg:w="70"/><text x="11.6094%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.53%)</title><rect x="11.8620%" y="149" width="0.5306%" height="15" fill="rgb(221,200,47)" fg:x="1699" fg:w="76"/><text x="12.1120%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (76 samples, 0.53%)</title><rect x="11.8620%" y="133" width="0.5306%" height="15" fill="rgb(226,26,5)" fg:x="1699" fg:w="76"/><text x="12.1120%" y="143.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (34 samples, 0.24%)</title><rect x="12.3927%" y="149" width="0.2374%" height="15" fill="rgb(249,33,26)" fg:x="1775" fg:w="34"/><text x="12.6427%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.24%)</title><rect x="12.3927%" y="133" width="0.2374%" height="15" fill="rgb(235,183,28)" fg:x="1775" fg:w="34"/><text x="12.6427%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (34 samples, 0.24%)</title><rect x="12.3927%" y="117" width="0.2374%" height="15" fill="rgb(221,5,38)" fg:x="1775" fg:w="34"/><text x="12.6427%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$read (4 samples, 0.03%)</title><rect x="12.6719%" y="101" width="0.0279%" height="15" fill="rgb(247,18,42)" fg:x="1815" fg:w="4"/><text x="12.9219%" y="111.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (844 samples, 5.89%)</title><rect x="11.8481%" y="165" width="5.8926%" height="15" fill="rgb(241,131,45)" fg:x="1697" fg:w="844"/><text x="12.0981%" y="175.50">fekan`&lt;..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (732 samples, 5.11%)</title><rect x="12.6300%" y="149" width="5.1107%" height="15" fill="rgb(249,31,29)" fg:x="1809" fg:w="732"/><text x="12.8800%" y="159.50">fekan`..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (732 samples, 5.11%)</title><rect x="12.6300%" y="133" width="5.1107%" height="15" fill="rgb(225,111,53)" fg:x="1809" fg:w="732"/><text x="12.8800%" y="143.50">fekan`..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (726 samples, 5.07%)</title><rect x="12.6719%" y="117" width="5.0688%" height="15" fill="rgb(238,160,17)" fg:x="1815" fg:w="726"/><text x="12.9219%" y="127.50">fekan`..</text></g><g><title>libsystem_kernel.dylib`read (722 samples, 5.04%)</title><rect x="12.6999%" y="101" width="5.0408%" height="15" fill="rgb(214,148,48)" fg:x="1819" fg:w="722"/><text x="12.9499%" y="111.50">libsys..</text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (597 samples, 4.17%)</title><rect x="17.7407%" y="165" width="4.1681%" height="15" fill="rgb(232,36,49)" fg:x="2541" fg:w="597"/><text x="17.9907%" y="175.50">fekan..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (595 samples, 4.15%)</title><rect x="17.7547%" y="149" width="4.1542%" height="15" fill="rgb(209,103,24)" fg:x="2543" fg:w="595"/><text x="18.0047%" y="159.50">fekan..</text></g><g><title>libsystem_kernel.dylib`read (593 samples, 4.14%)</title><rect x="17.7686%" y="133" width="4.1402%" height="15" fill="rgb(229,88,8)" fg:x="2545" fg:w="593"/><text x="18.0186%" y="143.50">libsy..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 0.93%)</title><rect x="21.9088%" y="165" width="0.9286%" height="15" fill="rgb(213,181,19)" fg:x="3138" fg:w="133"/><text x="22.1588%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (133 samples, 0.93%)</title><rect x="21.9088%" y="149" width="0.9286%" height="15" fill="rgb(254,191,54)" fg:x="3138" fg:w="133"/><text x="22.1588%" y="159.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,343 samples, 23.34%)</title><rect x="0.0279%" y="181" width="23.3401%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="3343"/><text x="0.2779%" y="191.50">fekan`&lt;&amp;mut serde_json::de::Deseriali..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (76 samples, 0.53%)</title><rect x="22.8374%" y="165" width="0.5306%" height="15" fill="rgb(233,36,39)" fg:x="3271" fg:w="76"/><text x="23.0874%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (75 samples, 0.52%)</title><rect x="22.8444%" y="149" width="0.5236%" height="15" fill="rgb(226,3,54)" fg:x="3272" fg:w="75"/><text x="23.0944%" y="159.50"></text></g><g><title>fekan`fekan::load_regression_data (3,463 samples, 24.18%)</title><rect x="0.0070%" y="261" width="24.1779%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="3463"/><text x="0.2570%" y="271.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`serde_json::de::from_trait (3,461 samples, 24.16%)</title><rect x="0.0209%" y="245" width="24.1639%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="3461"/><text x="0.2709%" y="255.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,461 samples, 24.16%)</title><rect x="0.0209%" y="229" width="24.1639%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="3461"/><text x="0.2709%" y="239.50">fekan`&lt;&amp;mut serde_json::de::Deserializ..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,461 samples, 24.16%)</title><rect x="0.0209%" y="213" width="24.1639%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="3461"/><text x="0.2709%" y="223.50">fekan`&lt;serde::de::impls::&lt;impl serde::..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,460 samples, 24.16%)</title><rect x="0.0279%" y="197" width="24.1570%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="3460"/><text x="0.2779%" y="207.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.82%)</title><rect x="23.3680%" y="181" width="0.8169%" height="15" fill="rgb(235,93,37)" fg:x="3347" fg:w="117"/><text x="23.6180%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (117 samples, 0.82%)</title><rect x="23.3680%" y="165" width="0.8169%" height="15" fill="rgb(213,116,39)" fg:x="3347" fg:w="117"/><text x="23.6180%" y="175.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (24 samples, 0.17%)</title><rect x="24.2128%" y="213" width="0.1676%" height="15" fill="rgb(222,207,29)" fg:x="3468" fg:w="24"/><text x="24.4628%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.03%)</title><rect x="24.3455%" y="197" width="0.0349%" height="15" fill="rgb(206,96,30)" fg:x="3487" fg:w="5"/><text x="24.5955%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.01%)</title><rect x="24.3664%" y="181" width="0.0140%" height="15" fill="rgb(218,138,4)" fg:x="3490" fg:w="2"/><text x="24.6164%" y="191.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="24.3804%" y="213" width="0.0140%" height="15" fill="rgb(250,191,14)" fg:x="3492" fg:w="2"/><text x="24.6304%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="24.3943%" y="213" width="0.0419%" height="15" fill="rgb(239,60,40)" fg:x="3494" fg:w="6"/><text x="24.6443%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.07%)</title><rect x="24.4432%" y="213" width="0.0698%" height="15" fill="rgb(206,27,48)" fg:x="3501" fg:w="10"/><text x="24.6932%" y="223.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (294 samples, 2.05%)</title><rect x="24.2128%" y="245" width="2.0526%" height="15" fill="rgb(225,35,8)" fg:x="3468" fg:w="294"/><text x="24.4628%" y="255.50">f..</text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (294 samples, 2.05%)</title><rect x="24.2128%" y="229" width="2.0526%" height="15" fill="rgb(250,213,24)" fg:x="3468" fg:w="294"/><text x="24.4628%" y="239.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (251 samples, 1.75%)</title><rect x="24.5130%" y="213" width="1.7524%" height="15" fill="rgb(247,123,22)" fg:x="3511" fg:w="251"/><text x="24.7630%" y="223.50"></text></g><g><title>fekan`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (8 samples, 0.06%)</title><rect x="26.2654%" y="245" width="0.0559%" height="15" fill="rgb(231,138,38)" fg:x="3762" fg:w="8"/><text x="26.5154%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (17 samples, 0.12%)</title><rect x="26.3422%" y="181" width="0.1187%" height="15" fill="rgb(231,145,46)" fg:x="3773" fg:w="17"/><text x="26.5922%" y="191.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::edge::Edge&gt; (18 samples, 0.13%)</title><rect x="26.3422%" y="213" width="0.1257%" height="15" fill="rgb(251,118,11)" fg:x="3773" fg:w="18"/><text x="26.5922%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (18 samples, 0.13%)</title><rect x="26.3422%" y="197" width="0.1257%" height="15" fill="rgb(217,147,25)" fg:x="3773" fg:w="18"/><text x="26.5922%" y="207.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (21 samples, 0.15%)</title><rect x="26.3422%" y="229" width="0.1466%" height="15" fill="rgb(247,81,37)" fg:x="3773" fg:w="21"/><text x="26.5922%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="26.4679%" y="213" width="0.0209%" height="15" fill="rgb(209,12,38)" fg:x="3791" fg:w="3"/><text x="26.7179%" y="223.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (23 samples, 0.16%)</title><rect x="26.3353%" y="245" width="0.1606%" height="15" fill="rgb(227,1,9)" fg:x="3772" fg:w="23"/><text x="26.5853%" y="255.50"></text></g><g><title>fekan`alloc::vec::in_place_collect::from_iter_in_place (3 samples, 0.02%)</title><rect x="26.5098%" y="213" width="0.0209%" height="15" fill="rgb(248,47,43)" fg:x="3797" fg:w="3"/><text x="26.7598%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.02%)</title><rect x="26.5098%" y="197" width="0.0209%" height="15" fill="rgb(221,10,30)" fg:x="3797" fg:w="3"/><text x="26.7598%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="26.5098%" y="181" width="0.0209%" height="15" fill="rgb(210,229,1)" fg:x="3797" fg:w="3"/><text x="26.7598%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (34 samples, 0.24%)</title><rect x="26.5308%" y="181" width="0.2374%" height="15" fill="rgb(222,148,37)" fg:x="3800" fg:w="34"/><text x="26.7808%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (38 samples, 0.27%)</title><rect x="26.5308%" y="197" width="0.2653%" height="15" fill="rgb(234,67,33)" fg:x="3800" fg:w="38"/><text x="26.7808%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_large (4 samples, 0.03%)</title><rect x="26.7681%" y="181" width="0.0279%" height="15" fill="rgb(247,98,35)" fg:x="3834" fg:w="4"/><text x="27.0181%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (4 samples, 0.03%)</title><rect x="26.7681%" y="165" width="0.0279%" height="15" fill="rgb(247,138,52)" fg:x="3834" fg:w="4"/><text x="27.0181%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4 samples, 0.03%)</title><rect x="26.7681%" y="149" width="0.0279%" height="15" fill="rgb(213,79,30)" fg:x="3834" fg:w="4"/><text x="27.0181%" y="159.50"></text></g><g><title>fekan`fekan::kan::Kan::merge_models (43 samples, 0.30%)</title><rect x="26.5028%" y="245" width="0.3002%" height="15" fill="rgb(246,177,23)" fg:x="3796" fg:w="43"/><text x="26.7528%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::merge_layers (43 samples, 0.30%)</title><rect x="26.5028%" y="229" width="0.3002%" height="15" fill="rgb(230,62,27)" fg:x="3796" fg:w="43"/><text x="26.7528%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::merge_edges (39 samples, 0.27%)</title><rect x="26.5308%" y="213" width="0.2723%" height="15" fill="rgb(216,154,8)" fg:x="3800" fg:w="39"/><text x="26.7808%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="26.8030%" y="213" width="0.0140%" height="15" fill="rgb(244,35,45)" fg:x="3839" fg:w="2"/><text x="27.0530%" y="223.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="26.8170%" y="213" width="0.0209%" height="15" fill="rgb(251,115,12)" fg:x="3841" fg:w="3"/><text x="27.0670%" y="223.50"></text></g><g><title>fekan`__rdl_alloc (6 samples, 0.04%)</title><rect x="26.8380%" y="213" width="0.0419%" height="15" fill="rgb(240,54,50)" fg:x="3844" fg:w="6"/><text x="27.0880%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (511 samples, 3.57%)</title><rect x="26.8798%" y="213" width="3.5677%" height="15" fill="rgb(233,84,52)" fg:x="3850" fg:w="511"/><text x="27.1298%" y="223.50">feka..</text></g><g><title>fekan`DYLD-STUB$$cbrt (26 samples, 0.18%)</title><rect x="34.2177%" y="197" width="0.1815%" height="15" fill="rgb(207,117,47)" fg:x="4901" fg:w="26"/><text x="34.4677%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$exp (7 samples, 0.05%)</title><rect x="34.3992%" y="197" width="0.0489%" height="15" fill="rgb(249,43,39)" fg:x="4927" fg:w="7"/><text x="34.6492%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$log (9 samples, 0.06%)</title><rect x="34.4481%" y="197" width="0.0628%" height="15" fill="rgb(209,38,44)" fg:x="4934" fg:w="9"/><text x="34.6981%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$pow (15 samples, 0.10%)</title><rect x="34.5109%" y="197" width="0.1047%" height="15" fill="rgb(236,212,23)" fg:x="4943" fg:w="15"/><text x="34.7609%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$sin (16 samples, 0.11%)</title><rect x="34.6157%" y="197" width="0.1117%" height="15" fill="rgb(242,79,21)" fg:x="4958" fg:w="16"/><text x="34.8657%" y="207.50"></text></g><g><title>fekan`DYLD-STUB$$tan (6 samples, 0.04%)</title><rect x="34.7274%" y="197" width="0.0419%" height="15" fill="rgb(211,96,35)" fg:x="4974" fg:w="6"/><text x="34.9774%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bbe4 (18 samples, 0.13%)</title><rect x="38.0228%" y="181" width="0.1257%" height="15" fill="rgb(253,215,40)" fg:x="5446" fg:w="18"/><text x="38.2728%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bcfc (7 samples, 0.05%)</title><rect x="38.1484%" y="181" width="0.0489%" height="15" fill="rgb(211,81,21)" fg:x="5464" fg:w="7"/><text x="38.3984%" y="191.50"></text></g><g><title>libsystem_m.dylib`cbrt (42 samples, 0.29%)</title><rect x="38.1973%" y="181" width="0.2932%" height="15" fill="rgb(208,190,38)" fg:x="5471" fg:w="42"/><text x="38.4473%" y="191.50"></text></g><g><title>libsystem_m.dylib`exp (53 samples, 0.37%)</title><rect x="38.4905%" y="181" width="0.3700%" height="15" fill="rgb(235,213,38)" fg:x="5513" fg:w="53"/><text x="38.7405%" y="191.50"></text></g><g><title>libsystem_m.dylib`log (56 samples, 0.39%)</title><rect x="38.8606%" y="181" width="0.3910%" height="15" fill="rgb(237,122,38)" fg:x="5566" fg:w="56"/><text x="39.1106%" y="191.50"></text></g><g><title>libsystem_m.dylib`pow (307 samples, 2.14%)</title><rect x="39.2516%" y="181" width="2.1434%" height="15" fill="rgb(244,218,35)" fg:x="5622" fg:w="307"/><text x="39.5016%" y="191.50">l..</text></g><g><title>libsystem_m.dylib`sin (27 samples, 0.19%)</title><rect x="41.3950%" y="181" width="0.1885%" height="15" fill="rgb(240,68,47)" fg:x="5929" fg:w="27"/><text x="41.6450%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (1,085 samples, 7.58%)</title><rect x="34.7762%" y="197" width="7.5752%" height="15" fill="rgb(210,16,53)" fg:x="4981" fg:w="1085"/><text x="35.0262%" y="207.50">fekan`feka..</text></g><g><title>libsystem_m.dylib`tan (110 samples, 0.77%)</title><rect x="41.5835%" y="181" width="0.7680%" height="15" fill="rgb(235,124,12)" fg:x="5956" fg:w="110"/><text x="41.8335%" y="191.50"></text></g><g><title>libsystem_m.dylib`cbrt (22 samples, 0.15%)</title><rect x="42.3515%" y="197" width="0.1536%" height="15" fill="rgb(224,169,11)" fg:x="6066" fg:w="22"/><text x="42.6015%" y="207.50"></text></g><g><title>libsystem_m.dylib`sin (10 samples, 0.07%)</title><rect x="42.5051%" y="197" width="0.0698%" height="15" fill="rgb(250,166,2)" fg:x="6088" fg:w="10"/><text x="42.7551%" y="207.50"></text></g><g><title>libsystem_m.dylib`tan (6 samples, 0.04%)</title><rect x="42.5749%" y="197" width="0.0419%" height="15" fill="rgb(242,216,29)" fg:x="6098" fg:w="6"/><text x="42.8249%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (11 samples, 0.08%)</title><rect x="42.6238%" y="197" width="0.0768%" height="15" fill="rgb(230,116,27)" fg:x="6105" fg:w="11"/><text x="42.8738%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (5 samples, 0.03%)</title><rect x="43.0287%" y="181" width="0.0349%" height="15" fill="rgb(228,99,48)" fg:x="6163" fg:w="5"/><text x="43.2787%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.06%)</title><rect x="44.1458%" y="165" width="0.0628%" height="15" fill="rgb(253,11,6)" fg:x="6323" fg:w="9"/><text x="44.3958%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (220 samples, 1.54%)</title><rect x="42.7006%" y="197" width="1.5360%" height="15" fill="rgb(247,143,39)" fg:x="6116" fg:w="220"/><text x="42.9506%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (168 samples, 1.17%)</title><rect x="43.0636%" y="181" width="1.1729%" height="15" fill="rgb(236,97,10)" fg:x="6168" fg:w="168"/><text x="43.3136%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (4 samples, 0.03%)</title><rect x="44.2086%" y="165" width="0.0279%" height="15" fill="rgb(233,208,19)" fg:x="6332" fg:w="4"/><text x="44.4586%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.02%)</title><rect x="44.2505%" y="181" width="0.0209%" height="15" fill="rgb(216,164,2)" fg:x="6338" fg:w="3"/><text x="44.5005%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.05%)</title><rect x="44.2715%" y="181" width="0.0489%" height="15" fill="rgb(220,129,5)" fg:x="6341" fg:w="7"/><text x="44.5215%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.05%)</title><rect x="44.4111%" y="165" width="0.0489%" height="15" fill="rgb(242,17,10)" fg:x="6361" fg:w="7"/><text x="44.6611%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (54 samples, 0.38%)</title><rect x="44.2365%" y="197" width="0.3770%" height="15" fill="rgb(242,107,0)" fg:x="6336" fg:w="54"/><text x="44.4865%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (42 samples, 0.29%)</title><rect x="44.3203%" y="181" width="0.2932%" height="15" fill="rgb(251,28,31)" fg:x="6348" fg:w="42"/><text x="44.5703%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (22 samples, 0.15%)</title><rect x="44.4600%" y="165" width="0.1536%" height="15" fill="rgb(233,223,10)" fg:x="6368" fg:w="22"/><text x="44.7100%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (5 samples, 0.03%)</title><rect x="44.5786%" y="149" width="0.0349%" height="15" fill="rgb(215,21,27)" fg:x="6385" fg:w="5"/><text x="44.8286%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.08%)</title><rect x="44.6136%" y="197" width="0.0838%" height="15" fill="rgb(232,23,21)" fg:x="6390" fg:w="12"/><text x="44.8636%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.02%)</title><rect x="44.6973%" y="197" width="0.0209%" height="15" fill="rgb(244,5,23)" fg:x="6402" fg:w="3"/><text x="44.9473%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::suggest_symbolic (2,056 samples, 14.35%)</title><rect x="30.4475%" y="213" width="14.3545%" height="15" fill="rgb(226,81,46)" fg:x="4361" fg:w="2056"/><text x="30.6975%" y="223.50">fekan`fekan::kan_layer..</text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.08%)</title><rect x="44.7183%" y="197" width="0.0838%" height="15" fill="rgb(247,70,30)" fg:x="6405" fg:w="12"/><text x="44.9683%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.03%)</title><rect x="44.8021%" y="213" width="0.0349%" height="15" fill="rgb(212,68,19)" fg:x="6417" fg:w="5"/><text x="45.0521%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.03%)</title><rect x="44.8370%" y="213" width="0.0349%" height="15" fill="rgb(240,187,13)" fg:x="6422" fg:w="5"/><text x="45.0870%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.04%)</title><rect x="44.8719%" y="213" width="0.0419%" height="15" fill="rgb(223,113,26)" fg:x="6427" fg:w="6"/><text x="45.1219%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.02%)</title><rect x="44.9138%" y="213" width="0.0209%" height="15" fill="rgb(206,192,2)" fg:x="6433" fg:w="3"/><text x="45.1638%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.06%)</title><rect x="44.9347%" y="213" width="0.0628%" height="15" fill="rgb(241,108,4)" fg:x="6436" fg:w="9"/><text x="45.1847%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::test_and_set_symbolic (2,609 samples, 18.22%)</title><rect x="26.8030%" y="245" width="18.2155%" height="15" fill="rgb(247,173,49)" fg:x="3839" fg:w="2609"/><text x="27.0530%" y="255.50">fekan`fekan::kan::Kan::test_..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::test_and_set_symbolic (2,609 samples, 18.22%)</title><rect x="26.8030%" y="229" width="18.2155%" height="15" fill="rgb(224,114,35)" fg:x="3839" fg:w="2609"/><text x="27.0530%" y="239.50">fekan`fekan::kan_layer::KanL..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="45.0045%" y="213" width="0.0140%" height="15" fill="rgb(245,159,27)" fg:x="6446" fg:w="2"/><text x="45.2545%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (45 samples, 0.31%)</title><rect x="46.4917%" y="165" width="0.3142%" height="15" fill="rgb(245,172,44)" fg:x="6659" fg:w="45"/><text x="46.7417%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (25 samples, 0.17%)</title><rect x="46.6313%" y="149" width="0.1745%" height="15" fill="rgb(236,23,11)" fg:x="6679" fg:w="25"/><text x="46.8813%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (27 samples, 0.19%)</title><rect x="46.8058%" y="165" width="0.1885%" height="15" fill="rgb(205,117,38)" fg:x="6704" fg:w="27"/><text x="47.0558%" y="175.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.03%)</title><rect x="47.3015%" y="149" width="0.0279%" height="15" fill="rgb(237,72,25)" fg:x="6775" fg:w="4"/><text x="47.5515%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (237 samples, 1.65%)</title><rect x="45.6818%" y="181" width="1.6547%" height="15" fill="rgb(244,70,9)" fg:x="6543" fg:w="237"/><text x="45.9318%" y="191.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (49 samples, 0.34%)</title><rect x="46.9943%" y="165" width="0.3421%" height="15" fill="rgb(217,125,39)" fg:x="6731" fg:w="49"/><text x="47.2443%" y="175.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (59 samples, 0.41%)</title><rect x="47.8042%" y="165" width="0.4119%" height="15" fill="rgb(235,36,10)" fg:x="6847" fg:w="59"/><text x="48.0542%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (434 samples, 3.03%)</title><rect x="45.1930%" y="197" width="3.0301%" height="15" fill="rgb(251,123,47)" fg:x="6473" fg:w="434"/><text x="45.4430%" y="207.50">fek..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (127 samples, 0.89%)</title><rect x="47.3365%" y="181" width="0.8867%" height="15" fill="rgb(221,13,13)" fg:x="6780" fg:w="127"/><text x="47.5865%" y="191.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.09%)</title><rect x="48.2231%" y="197" width="0.0908%" height="15" fill="rgb(238,131,9)" fg:x="6907" fg:w="13"/><text x="48.4731%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (474 samples, 3.31%)</title><rect x="45.0255%" y="213" width="3.3094%" height="15" fill="rgb(211,50,8)" fg:x="6449" fg:w="474"/><text x="45.2755%" y="223.50">fek..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (3 samples, 0.02%)</title><rect x="48.3139%" y="197" width="0.0209%" height="15" fill="rgb(245,182,24)" fg:x="6920" fg:w="3"/><text x="48.5639%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (11 samples, 0.08%)</title><rect x="48.3348%" y="213" width="0.0768%" height="15" fill="rgb(242,14,37)" fg:x="6923" fg:w="11"/><text x="48.5848%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (488 samples, 3.41%)</title><rect x="45.0255%" y="229" width="3.4071%" height="15" fill="rgb(246,228,12)" fg:x="6449" fg:w="488"/><text x="45.2755%" y="239.50">fek..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="48.4116%" y="213" width="0.0209%" height="15" fill="rgb(213,55,15)" fg:x="6934" fg:w="3"/><text x="48.6616%" y="223.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="48.5164%" y="85" width="0.0140%" height="15" fill="rgb(209,9,3)" fg:x="6949" fg:w="2"/><text x="48.7664%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (2 samples, 0.01%)</title><rect x="48.5303%" y="85" width="0.0140%" height="15" fill="rgb(230,59,30)" fg:x="6951" fg:w="2"/><text x="48.7803%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (2 samples, 0.01%)</title><rect x="48.5443%" y="69" width="0.0140%" height="15" fill="rgb(209,121,21)" fg:x="6953" fg:w="2"/><text x="48.7943%" y="79.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (2 samples, 0.01%)</title><rect x="48.5792%" y="37" width="0.0140%" height="15" fill="rgb(220,109,13)" fg:x="6958" fg:w="2"/><text x="48.8292%" y="47.50"></text></g><g><title>fekan`fekan::preset_knot_ranges (513 samples, 3.58%)</title><rect x="45.0185%" y="245" width="3.5817%" height="15" fill="rgb(232,18,1)" fg:x="6448" fg:w="513"/><text x="45.2685%" y="255.50">feka..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (23 samples, 0.16%)</title><rect x="48.4396%" y="229" width="0.1606%" height="15" fill="rgb(215,41,42)" fg:x="6938" fg:w="23"/><text x="48.6896%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (22 samples, 0.15%)</title><rect x="48.4466%" y="213" width="0.1536%" height="15" fill="rgb(224,123,36)" fg:x="6939" fg:w="22"/><text x="48.6966%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (22 samples, 0.15%)</title><rect x="48.4466%" y="197" width="0.1536%" height="15" fill="rgb(240,125,3)" fg:x="6939" fg:w="22"/><text x="48.6966%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (22 samples, 0.15%)</title><rect x="48.4466%" y="181" width="0.1536%" height="15" fill="rgb(205,98,50)" fg:x="6939" fg:w="22"/><text x="48.6966%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (21 samples, 0.15%)</title><rect x="48.4535%" y="165" width="0.1466%" height="15" fill="rgb(205,185,37)" fg:x="6940" fg:w="21"/><text x="48.7035%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (20 samples, 0.14%)</title><rect x="48.4605%" y="149" width="0.1396%" height="15" fill="rgb(238,207,15)" fg:x="6941" fg:w="20"/><text x="48.7105%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (18 samples, 0.13%)</title><rect x="48.4745%" y="133" width="0.1257%" height="15" fill="rgb(213,199,42)" fg:x="6943" fg:w="18"/><text x="48.7245%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (16 samples, 0.11%)</title><rect x="48.4884%" y="117" width="0.1117%" height="15" fill="rgb(235,201,11)" fg:x="6945" fg:w="16"/><text x="48.7384%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (15 samples, 0.10%)</title><rect x="48.4954%" y="101" width="0.1047%" height="15" fill="rgb(207,46,11)" fg:x="6946" fg:w="15"/><text x="48.7454%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.06%)</title><rect x="48.5443%" y="85" width="0.0559%" height="15" fill="rgb(241,35,35)" fg:x="6953" fg:w="8"/><text x="48.7943%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.04%)</title><rect x="48.5583%" y="69" width="0.0419%" height="15" fill="rgb(243,32,47)" fg:x="6955" fg:w="6"/><text x="48.8083%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.03%)</title><rect x="48.5652%" y="53" width="0.0349%" height="15" fill="rgb(247,202,23)" fg:x="6956" fg:w="5"/><text x="48.8152%" y="63.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (421 samples, 2.94%)</title><rect x="48.6351%" y="197" width="2.9393%" height="15" fill="rgb(219,102,11)" fg:x="6966" fg:w="421"/><text x="48.8851%" y="207.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (410 samples, 2.86%)</title><rect x="48.7119%" y="181" width="2.8625%" height="15" fill="rgb(243,110,44)" fg:x="6977" fg:w="410"/><text x="48.9619%" y="191.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (373 samples, 2.60%)</title><rect x="48.9702%" y="165" width="2.6042%" height="15" fill="rgb(222,74,54)" fg:x="7014" fg:w="373"/><text x="49.2202%" y="175.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (284 samples, 1.98%)</title><rect x="49.5916%" y="149" width="1.9828%" height="15" fill="rgb(216,99,12)" fg:x="7103" fg:w="284"/><text x="49.8416%" y="159.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (76 samples, 0.53%)</title><rect x="51.0438%" y="133" width="0.5306%" height="15" fill="rgb(226,22,26)" fg:x="7311" fg:w="76"/><text x="51.2938%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (438 samples, 3.06%)</title><rect x="48.6002%" y="213" width="3.0580%" height="15" fill="rgb(217,163,10)" fg:x="6961" fg:w="438"/><text x="48.8502%" y="223.50">fek..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (12 samples, 0.08%)</title><rect x="51.5744%" y="197" width="0.0838%" height="15" fill="rgb(213,25,53)" fg:x="7387" fg:w="12"/><text x="51.8244%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (441 samples, 3.08%)</title><rect x="48.6002%" y="229" width="3.0790%" height="15" fill="rgb(252,105,26)" fg:x="6961" fg:w="441"/><text x="48.8502%" y="239.50">fek..</text></g><g><title>fekan`fekan::validate_model (443 samples, 3.09%)</title><rect x="48.6002%" y="245" width="3.0929%" height="15" fill="rgb(220,39,43)" fg:x="6961" fg:w="443"/><text x="48.8502%" y="255.50">fek..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="51.6791%" y="229" width="0.0140%" height="15" fill="rgb(229,68,48)" fg:x="7402" fg:w="2"/><text x="51.9291%" y="239.50"></text></g><g><title>fekan`log::__private_api::log_impl (2 samples, 0.01%)</title><rect x="51.6931%" y="245" width="0.0140%" height="15" fill="rgb(252,8,32)" fg:x="7404" fg:w="2"/><text x="51.9431%" y="255.50"></text></g><g><title>fekan`&lt;fekan::TrainingProgress as log::Log&gt;::log (2 samples, 0.01%)</title><rect x="51.6931%" y="229" width="0.0140%" height="15" fill="rgb(223,20,43)" fg:x="7404" fg:w="2"/><text x="51.9431%" y="239.50"></text></g><g><title>fekan`rand::rng::Rng::gen_range (5 samples, 0.03%)</title><rect x="51.7070%" y="245" width="0.0349%" height="15" fill="rgb(229,81,49)" fg:x="7406" fg:w="5"/><text x="51.9570%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="51.7420%" y="245" width="0.0140%" height="15" fill="rgb(236,28,36)" fg:x="7411" fg:w="2"/><text x="51.9920%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.01%)</title><rect x="51.7559%" y="245" width="0.0140%" height="15" fill="rgb(249,185,26)" fg:x="7413" fg:w="2"/><text x="52.0059%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="51.7699%" y="245" width="0.0209%" height="15" fill="rgb(249,174,33)" fg:x="7415" fg:w="3"/><text x="52.0199%" y="255.50"></text></g><g><title>fekan`fekan::train_model (3,955 samples, 27.61%)</title><rect x="24.1849%" y="261" width="27.6129%" height="15" fill="rgb(233,201,37)" fg:x="3464" fg:w="3955"/><text x="24.4349%" y="271.50">fekan`fekan::train_model</text></g><g><title>fekan`rand::rng::Rng::gen_range (2 samples, 0.01%)</title><rect x="51.7978%" y="261" width="0.0140%" height="15" fill="rgb(221,78,26)" fg:x="7419" fg:w="2"/><text x="52.0478%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.03%)</title><rect x="51.8118%" y="261" width="0.0349%" height="15" fill="rgb(250,127,30)" fg:x="7421" fg:w="5"/><text x="52.0618%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="51.8467%" y="261" width="0.0209%" height="15" fill="rgb(230,49,44)" fg:x="7426" fg:w="3"/><text x="52.0967%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="51.8676%" y="261" width="0.0209%" height="15" fill="rgb(229,67,23)" fg:x="7429" fg:w="3"/><text x="52.1176%" y="271.50"></text></g><g><title>fekan`main (7,436 samples, 51.92%)</title><rect x="0.0000%" y="341" width="51.9165%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="7436"/><text x="0.2500%" y="351.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (7,436 samples, 51.92%)</title><rect x="0.0000%" y="325" width="51.9165%" height="15" fill="rgb(215,43,3)" fg:x="0" fg:w="7436"/><text x="0.2500%" y="335.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (7,436 samples, 51.92%)</title><rect x="0.0000%" y="309" width="51.9165%" height="15" fill="rgb(238,154,13)" fg:x="0" fg:w="7436"/><text x="0.2500%" y="319.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (7,436 samples, 51.92%)</title><rect x="0.0000%" y="293" width="51.9165%" height="15" fill="rgb(219,56,2)" fg:x="0" fg:w="7436"/><text x="0.2500%" y="303.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (7,435 samples, 51.91%)</title><rect x="0.0070%" y="277" width="51.9095%" height="15" fill="rgb(233,0,4)" fg:x="1" fg:w="7435"/><text x="0.2570%" y="287.50">fekan`fekan::main</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="51.8956%" y="261" width="0.0209%" height="15" fill="rgb(235,30,7)" fg:x="7433" fg:w="3"/><text x="52.1456%" y="271.50"></text></g><g><title>dyld`start (7,437 samples, 51.92%)</title><rect x="0.0000%" y="357" width="51.9235%" height="15" fill="rgb(250,79,13)" fg:x="0" fg:w="7437"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.01%)</title><rect x="51.9305%" y="357" width="0.0140%" height="15" fill="rgb(211,146,34)" fg:x="7438" fg:w="2"/><text x="52.1805%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (13 samples, 0.09%)</title><rect x="51.9444%" y="357" width="0.0908%" height="15" fill="rgb(228,22,38)" fg:x="7440" fg:w="13"/><text x="52.1944%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="52.0352%" y="357" width="0.0279%" height="15" fill="rgb(235,168,5)" fg:x="7453" fg:w="4"/><text x="52.2852%" y="367.50"></text></g><g><title>fekan`DYLD-STUB$$free (5 samples, 0.03%)</title><rect x="52.0771%" y="293" width="0.0349%" height="15" fill="rgb(221,155,16)" fg:x="7459" fg:w="5"/><text x="52.3271%" y="303.50"></text></g><g><title>fekan`__rdl_alloc (2 samples, 0.01%)</title><rect x="52.1120%" y="293" width="0.0140%" height="15" fill="rgb(215,215,53)" fg:x="7464" fg:w="2"/><text x="52.3620%" y="303.50"></text></g><g><title>fekan`DYLD-STUB$$calloc (2 samples, 0.01%)</title><rect x="52.6356%" y="261" width="0.0140%" height="15" fill="rgb(223,4,10)" fg:x="7539" fg:w="2"/><text x="52.8856%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (843 samples, 5.89%)</title><rect x="52.7892%" y="245" width="5.8856%" height="15" fill="rgb(234,103,6)" fg:x="7561" fg:w="843"/><text x="53.0392%" y="255.50">fekan`f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (508 samples, 3.55%)</title><rect x="55.1281%" y="229" width="3.5467%" height="15" fill="rgb(227,97,0)" fg:x="7896" fg:w="508"/><text x="55.3781%" y="239.50">feka..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (211 samples, 1.47%)</title><rect x="58.6749%" y="245" width="1.4732%" height="15" fill="rgb(234,150,53)" fg:x="8404" fg:w="211"/><text x="58.9249%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (1,082 samples, 7.55%)</title><rect x="52.6496%" y="261" width="7.5543%" height="15" fill="rgb(228,201,54)" fg:x="7541" fg:w="1082"/><text x="52.8996%" y="271.50">fekan`feka..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (8 samples, 0.06%)</title><rect x="60.1480%" y="245" width="0.0559%" height="15" fill="rgb(222,22,37)" fg:x="8615" fg:w="8"/><text x="60.3980%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (8 samples, 0.06%)</title><rect x="60.2039%" y="261" width="0.0559%" height="15" fill="rgb(237,53,32)" fg:x="8623" fg:w="8"/><text x="60.4539%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.03%)</title><rect x="60.2597%" y="261" width="0.0349%" height="15" fill="rgb(233,25,53)" fg:x="8631" fg:w="5"/><text x="60.5097%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.06%)</title><rect x="60.2946%" y="261" width="0.0559%" height="15" fill="rgb(210,40,34)" fg:x="8636" fg:w="8"/><text x="60.5446%" y="271.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (1,118 samples, 7.81%)</title><rect x="52.5588%" y="277" width="7.8056%" height="15" fill="rgb(241,220,44)" fg:x="7528" fg:w="1118"/><text x="52.8088%" y="287.50">fekan`fekan..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="60.3505%" y="261" width="0.0140%" height="15" fill="rgb(235,28,35)" fg:x="8644" fg:w="2"/><text x="60.6005%" y="271.50"></text></g><g><title>fekan`__rdl_alloc_zeroed (2 samples, 0.01%)</title><rect x="60.5041%" y="261" width="0.0140%" height="15" fill="rgb(210,56,17)" fg:x="8666" fg:w="2"/><text x="60.7541%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (4 samples, 0.03%)</title><rect x="60.9439%" y="165" width="0.0279%" height="15" fill="rgb(224,130,29)" fg:x="8729" fg:w="4"/><text x="61.1939%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (4 samples, 0.03%)</title><rect x="60.9439%" y="149" width="0.0279%" height="15" fill="rgb(235,212,8)" fg:x="8729" fg:w="4"/><text x="61.1939%" y="159.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.04%)</title><rect x="60.9439%" y="245" width="0.0419%" height="15" fill="rgb(223,33,50)" fg:x="8729" fg:w="6"/><text x="61.1939%" y="255.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (6 samples, 0.04%)</title><rect x="60.9439%" y="229" width="0.0419%" height="15" fill="rgb(219,149,13)" fg:x="8729" fg:w="6"/><text x="61.1939%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (6 samples, 0.04%)</title><rect x="60.9439%" y="213" width="0.0419%" height="15" fill="rgb(250,156,29)" fg:x="8729" fg:w="6"/><text x="61.1939%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (6 samples, 0.04%)</title><rect x="60.9439%" y="197" width="0.0419%" height="15" fill="rgb(216,193,19)" fg:x="8729" fg:w="6"/><text x="61.1939%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.04%)</title><rect x="60.9439%" y="181" width="0.0419%" height="15" fill="rgb(216,135,14)" fg:x="8729" fg:w="6"/><text x="61.1939%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (903 samples, 6.30%)</title><rect x="75.5917%" y="213" width="6.3045%" height="15" fill="rgb(241,47,5)" fg:x="10827" fg:w="903"/><text x="75.8417%" y="223.50">fekan`fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (574 samples, 4.01%)</title><rect x="77.8887%" y="197" width="4.0075%" height="15" fill="rgb(233,42,35)" fg:x="11156" fg:w="574"/><text x="78.1387%" y="207.50">feka..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (272 samples, 1.90%)</title><rect x="81.8963%" y="213" width="1.8990%" height="15" fill="rgb(231,13,6)" fg:x="11730" fg:w="272"/><text x="82.1463%" y="223.50">f..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.03%)</title><rect x="89.3598%" y="197" width="0.0279%" height="15" fill="rgb(207,181,40)" fg:x="12799" fg:w="4"/><text x="89.6098%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (3,237 samples, 22.60%)</title><rect x="66.7947%" y="229" width="22.6000%" height="15" fill="rgb(254,173,49)" fg:x="9567" fg:w="3237"/><text x="67.0447%" y="239.50">fekan`fekan::kan_layer::edge::basis_..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (802 samples, 5.60%)</title><rect x="83.7953%" y="213" width="5.5994%" height="15" fill="rgb(221,1,38)" fg:x="12002" fg:w="802"/><text x="84.0453%" y="223.50">fekan`h..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.02%)</title><rect x="95.3362%" y="213" width="0.0209%" height="15" fill="rgb(206,124,46)" fg:x="13655" fg:w="3"/><text x="95.5862%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (4,924 samples, 34.38%)</title><rect x="60.9858%" y="245" width="34.3783%" height="15" fill="rgb(249,21,11)" fg:x="8735" fg:w="4924"/><text x="61.2358%" y="255.50">fekan`fekan::kan_layer::edge::basis_cached</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (855 samples, 5.97%)</title><rect x="89.3947%" y="229" width="5.9694%" height="15" fill="rgb(222,201,40)" fg:x="12804" fg:w="855"/><text x="89.6447%" y="239.50">fekan`ha..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (53 samples, 0.37%)</title><rect x="95.3641%" y="245" width="0.3700%" height="15" fill="rgb(235,61,29)" fg:x="13659" fg:w="53"/><text x="95.6141%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (5,058 samples, 35.31%)</title><rect x="60.5250%" y="261" width="35.3138%" height="15" fill="rgb(219,207,3)" fg:x="8669" fg:w="5058"/><text x="60.7750%" y="271.50">fekan`fekan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (15 samples, 0.10%)</title><rect x="95.7341%" y="245" width="0.1047%" height="15" fill="rgb(222,56,46)" fg:x="13712" fg:w="15"/><text x="95.9841%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (78 samples, 0.54%)</title><rect x="95.8389%" y="261" width="0.5446%" height="15" fill="rgb(239,76,54)" fg:x="13727" fg:w="78"/><text x="96.0889%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.03%)</title><rect x="96.3834%" y="261" width="0.0349%" height="15" fill="rgb(231,124,27)" fg:x="13805" fg:w="5"/><text x="96.6334%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.06%)</title><rect x="96.4183%" y="261" width="0.0628%" height="15" fill="rgb(249,195,6)" fg:x="13810" fg:w="9"/><text x="96.6683%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.13%)</title><rect x="96.4882%" y="261" width="0.1327%" height="15" fill="rgb(237,174,47)" fg:x="13820" fg:w="19"/><text x="96.7382%" y="271.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (5,194 samples, 36.26%)</title><rect x="60.3644%" y="277" width="36.2634%" height="15" fill="rgb(206,201,31)" fg:x="8646" fg:w="5194"/><text x="60.6144%" y="287.50">fekan`fekan::kan::Kan::forward</text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (3 samples, 0.02%)</title><rect x="96.6278%" y="277" width="0.0209%" height="15" fill="rgb(231,57,52)" fg:x="13840" fg:w="3"/><text x="96.8778%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="96.9280%" y="181" width="0.0140%" height="15" fill="rgb(248,177,22)" fg:x="13883" fg:w="2"/><text x="97.1780%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="96.9420%" y="181" width="0.0140%" height="15" fill="rgb(215,211,37)" fg:x="13885" fg:w="2"/><text x="97.1920%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="96.9420%" y="165" width="0.0140%" height="15" fill="rgb(241,128,51)" fg:x="13885" fg:w="2"/><text x="97.1920%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.01%)</title><rect x="96.9420%" y="149" width="0.0140%" height="15" fill="rgb(227,165,31)" fg:x="13885" fg:w="2"/><text x="97.1920%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (7 samples, 0.05%)</title><rect x="96.9210%" y="197" width="0.0489%" height="15" fill="rgb(228,167,24)" fg:x="13882" fg:w="7"/><text x="97.1710%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="96.9559%" y="181" width="0.0140%" height="15" fill="rgb(228,143,12)" fg:x="13887" fg:w="2"/><text x="97.2059%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.01%)</title><rect x="96.9699%" y="197" width="0.0140%" height="15" fill="rgb(249,149,8)" fg:x="13889" fg:w="2"/><text x="97.2199%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (12 samples, 0.08%)</title><rect x="96.9141%" y="229" width="0.0838%" height="15" fill="rgb(243,35,44)" fg:x="13881" fg:w="12"/><text x="97.1641%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (12 samples, 0.08%)</title><rect x="96.9141%" y="213" width="0.0838%" height="15" fill="rgb(246,89,9)" fg:x="13881" fg:w="12"/><text x="97.1641%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="96.9839%" y="197" width="0.0140%" height="15" fill="rgb(233,213,13)" fg:x="13891" fg:w="2"/><text x="97.2339%" y="207.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (14 samples, 0.10%)</title><rect x="96.9141%" y="261" width="0.0977%" height="15" fill="rgb(233,141,41)" fg:x="13881" fg:w="14"/><text x="97.1641%" y="271.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (14 samples, 0.10%)</title><rect x="96.9141%" y="245" width="0.0977%" height="15" fill="rgb(239,167,4)" fg:x="13881" fg:w="14"/><text x="97.1641%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="96.9978%" y="229" width="0.0140%" height="15" fill="rgb(209,217,16)" fg:x="13893" fg:w="2"/><text x="97.2478%" y="239.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (4 samples, 0.03%)</title><rect x="97.1584%" y="213" width="0.0279%" height="15" fill="rgb(219,88,35)" fg:x="13916" fg:w="4"/><text x="97.4084%" y="223.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (4 samples, 0.03%)</title><rect x="97.1863%" y="213" width="0.0279%" height="15" fill="rgb(220,193,23)" fg:x="13920" fg:w="4"/><text x="97.4363%" y="223.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (14 samples, 0.10%)</title><rect x="97.3260%" y="197" width="0.0977%" height="15" fill="rgb(230,90,52)" fg:x="13940" fg:w="14"/><text x="97.5760%" y="207.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.02%)</title><rect x="97.4028%" y="181" width="0.0209%" height="15" fill="rgb(252,106,19)" fg:x="13951" fg:w="3"/><text x="97.6528%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.01%)</title><rect x="97.4098%" y="165" width="0.0140%" height="15" fill="rgb(206,74,20)" fg:x="13952" fg:w="2"/><text x="97.6598%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (9 samples, 0.06%)</title><rect x="97.5145%" y="181" width="0.0628%" height="15" fill="rgb(230,138,44)" fg:x="13967" fg:w="9"/><text x="97.7645%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="97.6611%" y="165" width="0.0140%" height="15" fill="rgb(235,182,43)" fg:x="13988" fg:w="2"/><text x="97.9111%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7 samples, 0.05%)</title><rect x="97.6751%" y="165" width="0.0489%" height="15" fill="rgb(242,16,51)" fg:x="13990" fg:w="7"/><text x="97.9251%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.01%)</title><rect x="97.7100%" y="149" width="0.0140%" height="15" fill="rgb(248,9,4)" fg:x="13995" fg:w="2"/><text x="97.9600%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7 samples, 0.05%)</title><rect x="97.7798%" y="149" width="0.0489%" height="15" fill="rgb(210,31,22)" fg:x="14005" fg:w="7"/><text x="98.0298%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (6 samples, 0.04%)</title><rect x="97.8706%" y="133" width="0.0419%" height="15" fill="rgb(239,54,39)" fg:x="14018" fg:w="6"/><text x="98.1206%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (13 samples, 0.09%)</title><rect x="97.9543%" y="117" width="0.0908%" height="15" fill="rgb(230,99,41)" fg:x="14030" fg:w="13"/><text x="98.2043%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.02%)</title><rect x="98.0242%" y="101" width="0.0209%" height="15" fill="rgb(253,106,12)" fg:x="14040" fg:w="3"/><text x="98.2742%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.01%)</title><rect x="98.0311%" y="85" width="0.0140%" height="15" fill="rgb(213,46,41)" fg:x="14041" fg:w="2"/><text x="98.2811%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (10 samples, 0.07%)</title><rect x="98.0870%" y="101" width="0.0698%" height="15" fill="rgb(215,133,35)" fg:x="14049" fg:w="10"/><text x="98.3370%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7 samples, 0.05%)</title><rect x="98.1778%" y="85" width="0.0489%" height="15" fill="rgb(213,28,5)" fg:x="14062" fg:w="7"/><text x="98.4278%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (6 samples, 0.04%)</title><rect x="98.2406%" y="69" width="0.0419%" height="15" fill="rgb(215,77,49)" fg:x="14071" fg:w="6"/><text x="98.4906%" y="79.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (2 samples, 0.01%)</title><rect x="98.2895%" y="53" width="0.0140%" height="15" fill="rgb(248,100,22)" fg:x="14078" fg:w="2"/><text x="98.5395%" y="63.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (57 samples, 0.40%)</title><rect x="97.9124%" y="133" width="0.3980%" height="15" fill="rgb(208,67,9)" fg:x="14024" fg:w="57"/><text x="98.1624%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (38 samples, 0.27%)</title><rect x="98.0451%" y="117" width="0.2653%" height="15" fill="rgb(219,133,21)" fg:x="14043" fg:w="38"/><text x="98.2951%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (22 samples, 0.15%)</title><rect x="98.1568%" y="101" width="0.1536%" height="15" fill="rgb(246,46,29)" fg:x="14059" fg:w="22"/><text x="98.4068%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (12 samples, 0.08%)</title><rect x="98.2266%" y="85" width="0.0838%" height="15" fill="rgb(246,185,52)" fg:x="14069" fg:w="12"/><text x="98.4766%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (4 samples, 0.03%)</title><rect x="98.2825%" y="69" width="0.0279%" height="15" fill="rgb(252,136,11)" fg:x="14077" fg:w="4"/><text x="98.5325%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (70 samples, 0.49%)</title><rect x="97.8287%" y="149" width="0.4887%" height="15" fill="rgb(219,138,53)" fg:x="14012" fg:w="70"/><text x="98.0787%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (87 samples, 0.61%)</title><rect x="97.7239%" y="165" width="0.6074%" height="15" fill="rgb(211,51,23)" fg:x="13997" fg:w="87"/><text x="97.9739%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="98.3174%" y="149" width="0.0140%" height="15" fill="rgb(247,221,28)" fg:x="14082" fg:w="2"/><text x="98.5674%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (133 samples, 0.93%)</title><rect x="97.4237%" y="197" width="0.9286%" height="15" fill="rgb(251,222,45)" fg:x="13954" fg:w="133"/><text x="97.6737%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (110 samples, 0.77%)</title><rect x="97.5843%" y="181" width="0.7680%" height="15" fill="rgb(217,162,53)" fg:x="13977" fg:w="110"/><text x="97.8343%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="98.3314%" y="165" width="0.0209%" height="15" fill="rgb(229,93,14)" fg:x="14084" fg:w="3"/><text x="98.5814%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (165 samples, 1.15%)</title><rect x="97.2143%" y="213" width="1.1520%" height="15" fill="rgb(209,67,49)" fg:x="13924" fg:w="165"/><text x="97.4643%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="98.3523%" y="197" width="0.0140%" height="15" fill="rgb(213,87,29)" fg:x="14087" fg:w="2"/><text x="98.6023%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (191 samples, 1.33%)</title><rect x="97.0397%" y="229" width="1.3335%" height="15" fill="rgb(205,151,52)" fg:x="13899" fg:w="191"/><text x="97.2897%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (197 samples, 1.38%)</title><rect x="97.0118%" y="261" width="1.3754%" height="15" fill="rgb(253,215,39)" fg:x="13895" fg:w="197"/><text x="97.2618%" y="271.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (196 samples, 1.37%)</title><rect x="97.0188%" y="245" width="1.3684%" height="15" fill="rgb(221,220,41)" fg:x="13896" fg:w="196"/><text x="97.2688%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="98.3732%" y="229" width="0.0140%" height="15" fill="rgb(218,133,21)" fg:x="14090" fg:w="2"/><text x="98.6232%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.01%)</title><rect x="98.4082%" y="245" width="0.0140%" height="15" fill="rgb(221,193,43)" fg:x="14095" fg:w="2"/><text x="98.6582%" y="255.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="98.4082%" y="229" width="0.0140%" height="15" fill="rgb(240,128,52)" fg:x="14095" fg:w="2"/><text x="98.6582%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.01%)</title><rect x="98.4082%" y="213" width="0.0140%" height="15" fill="rgb(253,114,12)" fg:x="14095" fg:w="2"/><text x="98.6582%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.01%)</title><rect x="98.4082%" y="197" width="0.0140%" height="15" fill="rgb(215,223,47)" fg:x="14095" fg:w="2"/><text x="98.6582%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::update_knots_from_samples (7 samples, 0.05%)</title><rect x="98.3872%" y="261" width="0.0489%" height="15" fill="rgb(248,225,23)" fg:x="14092" fg:w="7"/><text x="98.6372%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="98.4221%" y="245" width="0.0140%" height="15" fill="rgb(250,108,0)" fg:x="14097" fg:w="2"/><text x="98.6721%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (344 samples, 2.40%)</title><rect x="96.6487%" y="277" width="2.4017%" height="15" fill="rgb(228,208,7)" fg:x="13843" fg:w="344"/><text x="96.8987%" y="287.50">fe..</text></g><g><title>libsystem_platform.dylib`_platform_memset (85 samples, 0.59%)</title><rect x="98.4570%" y="261" width="0.5935%" height="15" fill="rgb(244,45,10)" fg:x="14102" fg:w="85"/><text x="98.7070%" y="271.50"></text></g><g><title>fekan`indicatif::progress_bar::TickerControl::run (5 samples, 0.03%)</title><rect x="99.0505%" y="277" width="0.0349%" height="15" fill="rgb(207,125,25)" fg:x="14187" fg:w="5"/><text x="99.3005%" y="287.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait_timeout_while (5 samples, 0.03%)</title><rect x="99.0505%" y="261" width="0.0349%" height="15" fill="rgb(210,195,18)" fg:x="14187" fg:w="5"/><text x="99.3005%" y="271.50"></text></g><g><title>fekan`std::sys::sync::condvar::pthread::Condvar::wait_timeout (5 samples, 0.03%)</title><rect x="99.0505%" y="245" width="0.0349%" height="15" fill="rgb(249,80,12)" fg:x="14187" fg:w="5"/><text x="99.3005%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (5 samples, 0.03%)</title><rect x="99.0505%" y="229" width="0.0349%" height="15" fill="rgb(221,65,9)" fg:x="14187" fg:w="5"/><text x="99.3005%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (13 samples, 0.09%)</title><rect x="99.0854%" y="277" width="0.0908%" height="15" fill="rgb(235,49,36)" fg:x="14192" fg:w="13"/><text x="99.3354%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (42 samples, 0.29%)</title><rect x="99.1762%" y="277" width="0.2932%" height="15" fill="rgb(225,32,20)" fg:x="14205" fg:w="42"/><text x="99.4262%" y="287.50"></text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (6,800 samples, 47.48%)</title><rect x="52.1399%" y="293" width="47.4761%" height="15" fill="rgb(215,141,46)" fg:x="7468" fg:w="6800"/><text x="52.3899%" y="303.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (21 samples, 0.15%)</title><rect x="99.4694%" y="277" width="0.1466%" height="15" fill="rgb(250,160,47)" fg:x="14247" fg:w="21"/><text x="99.7194%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (21 samples, 0.15%)</title><rect x="99.4694%" y="261" width="0.1466%" height="15" fill="rgb(216,222,40)" fg:x="14247" fg:w="21"/><text x="99.7194%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (21 samples, 0.15%)</title><rect x="99.4694%" y="245" width="0.1466%" height="15" fill="rgb(234,217,39)" fg:x="14247" fg:w="21"/><text x="99.7194%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (14 samples, 0.10%)</title><rect x="99.6160%" y="293" width="0.0977%" height="15" fill="rgb(207,178,40)" fg:x="14268" fg:w="14"/><text x="99.8660%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.06%)</title><rect x="99.7137%" y="293" width="0.0559%" height="15" fill="rgb(221,136,13)" fg:x="14282" fg:w="8"/><text x="99.9637%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="99.7696%" y="293" width="0.0279%" height="15" fill="rgb(249,199,10)" fg:x="14290" fg:w="4"/><text x="100.0196%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.07%)</title><rect x="99.8115%" y="293" width="0.0698%" height="15" fill="rgb(249,222,13)" fg:x="14296" fg:w="10"/><text x="100.0615%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.01%)</title><rect x="99.8813%" y="293" width="0.0140%" height="15" fill="rgb(244,185,38)" fg:x="14306" fg:w="2"/><text x="100.1313%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="99.8953%" y="293" width="0.0140%" height="15" fill="rgb(236,202,9)" fg:x="14308" fg:w="2"/><text x="100.1453%" y="303.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (6,864 samples, 47.92%)</title><rect x="52.0701%" y="325" width="47.9229%" height="15" fill="rgb(250,229,37)" fg:x="7458" fg:w="6864"/><text x="52.3201%" y="335.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (6,864 samples, 47.92%)</title><rect x="52.0701%" y="309" width="47.9229%" height="15" fill="rgb(206,174,23)" fg:x="7458" fg:w="6864"/><text x="52.3201%" y="319.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_platform.dylib`_platform_memset (12 samples, 0.08%)</title><rect x="99.9092%" y="293" width="0.0838%" height="15" fill="rgb(211,33,43)" fg:x="14310" fg:w="12"/><text x="100.1592%" y="303.50"></text></g><g><title>all (14,323 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="14323"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (6,866 samples, 47.94%)</title><rect x="52.0631%" y="357" width="47.9369%" height="15" fill="rgb(244,68,36)" fg:x="7457" fg:w="6866"/><text x="52.3131%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (6,865 samples, 47.93%)</title><rect x="52.0701%" y="341" width="47.9299%" height="15" fill="rgb(232,229,15)" fg:x="7458" fg:w="6865"/><text x="52.3201%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g></svg></svg>