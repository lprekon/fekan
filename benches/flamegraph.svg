<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="493477"><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (70 samples, 0.01%)</title><rect x="0.0085%" y="85" width="0.0142%" height="15" fill="rgb(227,0,7)" fg:x="42" fg:w="70"/><text x="0.2585%" y="95.50"></text></g><g><title>fekan`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.01%)</title><rect x="0.0085%" y="69" width="0.0142%" height="15" fill="rgb(217,0,24)" fg:x="42" fg:w="70"/><text x="0.2585%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (70 samples, 0.01%)</title><rect x="0.0085%" y="53" width="0.0142%" height="15" fill="rgb(221,193,54)" fg:x="42" fg:w="70"/><text x="0.2585%" y="63.50"></text></g><g><title>fekan`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,419 samples, 0.29%)</title><rect x="0.0239%" y="53" width="0.2876%" height="15" fill="rgb(248,212,6)" fg:x="118" fg:w="1419"/><text x="0.2739%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (1,410 samples, 0.29%)</title><rect x="0.0257%" y="37" width="0.2857%" height="15" fill="rgb(208,68,35)" fg:x="127" fg:w="1410"/><text x="0.2757%" y="47.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,497 samples, 0.30%)</title><rect x="0.0085%" y="101" width="0.3034%" height="15" fill="rgb(232,128,0)" fg:x="42" fg:w="1497"/><text x="0.2585%" y="111.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,427 samples, 0.29%)</title><rect x="0.0227%" y="85" width="0.2892%" height="15" fill="rgb(207,160,47)" fg:x="112" fg:w="1427"/><text x="0.2727%" y="95.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,424 samples, 0.29%)</title><rect x="0.0233%" y="69" width="0.2886%" height="15" fill="rgb(228,23,34)" fg:x="115" fg:w="1424"/><text x="0.2733%" y="79.50"></text></g><g><title>fekan`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (107 samples, 0.02%)</title><rect x="0.3119%" y="101" width="0.0217%" height="15" fill="rgb(218,30,26)" fg:x="1539" fg:w="107"/><text x="0.5619%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (106 samples, 0.02%)</title><rect x="0.3121%" y="85" width="0.0215%" height="15" fill="rgb(220,122,19)" fg:x="1540" fg:w="106"/><text x="0.5621%" y="95.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,605 samples, 0.33%)</title><rect x="0.0085%" y="117" width="0.3252%" height="15" fill="rgb(250,228,42)" fg:x="42" fg:w="1605"/><text x="0.2585%" y="127.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,610 samples, 0.33%)</title><rect x="0.0081%" y="133" width="0.3263%" height="15" fill="rgb(240,193,28)" fg:x="40" fg:w="1610"/><text x="0.2581%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,689 samples, 0.34%)</title><rect x="0.0079%" y="149" width="0.3423%" height="15" fill="rgb(216,20,37)" fg:x="39" fg:w="1689"/><text x="0.2579%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (77 samples, 0.02%)</title><rect x="0.3346%" y="133" width="0.0156%" height="15" fill="rgb(206,188,39)" fg:x="1651" fg:w="77"/><text x="0.5846%" y="143.50"></text></g><g><title>fekan`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.01%)</title><rect x="0.3502%" y="133" width="0.0134%" height="15" fill="rgb(217,207,13)" fg:x="1728" fg:w="66"/><text x="0.6002%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (66 samples, 0.01%)</title><rect x="0.3502%" y="117" width="0.0134%" height="15" fill="rgb(231,73,38)" fg:x="1728" fg:w="66"/><text x="0.6002%" y="127.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (789 samples, 0.16%)</title><rect x="0.3502%" y="149" width="0.1599%" height="15" fill="rgb(225,20,46)" fg:x="1728" fg:w="789"/><text x="0.6002%" y="159.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (682 samples, 0.14%)</title><rect x="0.3719%" y="133" width="0.1382%" height="15" fill="rgb(210,31,41)" fg:x="1835" fg:w="682"/><text x="0.6219%" y="143.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (682 samples, 0.14%)</title><rect x="0.3719%" y="117" width="0.1382%" height="15" fill="rgb(221,200,47)" fg:x="1835" fg:w="682"/><text x="0.6219%" y="127.50"></text></g><g><title>fekan`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (682 samples, 0.14%)</title><rect x="0.3719%" y="101" width="0.1382%" height="15" fill="rgb(226,26,5)" fg:x="1835" fg:w="682"/><text x="0.6219%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (677 samples, 0.14%)</title><rect x="0.3729%" y="85" width="0.1372%" height="15" fill="rgb(249,33,26)" fg:x="1840" fg:w="677"/><text x="0.6229%" y="95.50"></text></g><g><title>fekan`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 0.03%)</title><rect x="0.5101%" y="149" width="0.0300%" height="15" fill="rgb(235,183,28)" fg:x="2517" fg:w="148"/><text x="0.7601%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (143 samples, 0.03%)</title><rect x="0.5111%" y="133" width="0.0290%" height="15" fill="rgb(221,5,38)" fg:x="2522" fg:w="143"/><text x="0.7611%" y="143.50"></text></g><g><title>fekan`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (588 samples, 0.12%)</title><rect x="0.5411%" y="133" width="0.1192%" height="15" fill="rgb(247,18,42)" fg:x="2670" fg:w="588"/><text x="0.7911%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (585 samples, 0.12%)</title><rect x="0.5417%" y="117" width="0.1185%" height="15" fill="rgb(241,131,45)" fg:x="2673" fg:w="585"/><text x="0.7917%" y="127.50"></text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (594 samples, 0.12%)</title><rect x="0.5400%" y="149" width="0.1204%" height="15" fill="rgb(249,31,29)" fg:x="2665" fg:w="594"/><text x="0.7900%" y="159.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,307 samples, 0.67%)</title><rect x="0.0079%" y="165" width="0.6701%" height="15" fill="rgb(225,111,53)" fg:x="39" fg:w="3307"/><text x="0.2579%" y="175.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (87 samples, 0.02%)</title><rect x="0.6604%" y="149" width="0.0176%" height="15" fill="rgb(238,160,17)" fg:x="3259" fg:w="87"/><text x="0.9104%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (87 samples, 0.02%)</title><rect x="0.6604%" y="133" width="0.0176%" height="15" fill="rgb(214,148,48)" fg:x="3259" fg:w="87"/><text x="0.9104%" y="143.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,433 samples, 0.70%)</title><rect x="0.0079%" y="181" width="0.6957%" height="15" fill="rgb(232,36,49)" fg:x="39" fg:w="3433"/><text x="0.2579%" y="191.50"></text></g><g><title>fekan`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.03%)</title><rect x="0.6780%" y="165" width="0.0255%" height="15" fill="rgb(209,103,24)" fg:x="3346" fg:w="126"/><text x="0.9280%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (125 samples, 0.03%)</title><rect x="0.6782%" y="149" width="0.0253%" height="15" fill="rgb(229,88,8)" fg:x="3347" fg:w="125"/><text x="0.9282%" y="159.50"></text></g><g><title>fekan`fekan::load_regression_data (3,435 samples, 0.70%)</title><rect x="0.0077%" y="245" width="0.6961%" height="15" fill="rgb(213,181,19)" fg:x="38" fg:w="3435"/><text x="0.2577%" y="255.50"></text></g><g><title>fekan`serde_json::de::from_trait (3,434 samples, 0.70%)</title><rect x="0.0079%" y="229" width="0.6959%" height="15" fill="rgb(254,191,54)" fg:x="39" fg:w="3434"/><text x="0.2579%" y="239.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,434 samples, 0.70%)</title><rect x="0.0079%" y="213" width="0.6959%" height="15" fill="rgb(241,83,37)" fg:x="39" fg:w="3434"/><text x="0.2579%" y="223.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,434 samples, 0.70%)</title><rect x="0.0079%" y="197" width="0.6959%" height="15" fill="rgb(233,36,39)" fg:x="39" fg:w="3434"/><text x="0.2579%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,793 samples, 0.57%)</title><rect x="0.7257%" y="149" width="0.5660%" height="15" fill="rgb(226,3,54)" fg:x="3581" fg:w="2793"/><text x="0.9757%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (144 samples, 0.03%)</title><rect x="1.2959%" y="133" width="0.0292%" height="15" fill="rgb(245,192,40)" fg:x="6395" fg:w="144"/><text x="1.5459%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (118 samples, 0.02%)</title><rect x="1.3251%" y="133" width="0.0239%" height="15" fill="rgb(238,167,29)" fg:x="6539" fg:w="118"/><text x="1.5751%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (116 samples, 0.02%)</title><rect x="1.3255%" y="117" width="0.0235%" height="15" fill="rgb(232,182,51)" fg:x="6541" fg:w="116"/><text x="1.5755%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (293 samples, 0.06%)</title><rect x="1.2917%" y="149" width="0.0594%" height="15" fill="rgb(231,60,39)" fg:x="6374" fg:w="293"/><text x="1.5417%" y="159.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (3,110 samples, 0.63%)</title><rect x="0.7212%" y="165" width="0.6302%" height="15" fill="rgb(208,69,12)" fg:x="3559" fg:w="3110"/><text x="0.9712%" y="175.50"></text></g><g><title>fekan`rayon_core::latch::LockLatch::wait_and_reset (3,125 samples, 0.63%)</title><rect x="0.7192%" y="181" width="0.6333%" height="15" fill="rgb(235,93,37)" fg:x="3549" fg:w="3125"/><text x="0.9692%" y="191.50"></text></g><g><title>fekan`rayon_core::registry::Registry::in_worker_cold (3,169 samples, 0.64%)</title><rect x="0.7165%" y="197" width="0.6422%" height="15" fill="rgb(213,116,39)" fg:x="3536" fg:w="3169"/><text x="0.9665%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward_concurrent (3,193 samples, 0.65%)</title><rect x="0.7129%" y="213" width="0.6470%" height="15" fill="rgb(222,207,29)" fg:x="3518" fg:w="3193"/><text x="0.9629%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::backward_concurrent (3,232 samples, 0.65%)</title><rect x="0.7111%" y="229" width="0.6549%" height="15" fill="rgb(206,96,30)" fg:x="3509" fg:w="3232"/><text x="0.9611%" y="239.50"></text></g><g><title>fekan`&lt;std::sys::sync::mutex::pthread::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::destroy (68 samples, 0.01%)</title><rect x="1.3881%" y="181" width="0.0138%" height="15" fill="rgb(218,138,4)" fg:x="6850" fg:w="68"/><text x="1.6381%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (83 samples, 0.02%)</title><rect x="1.4043%" y="181" width="0.0168%" height="15" fill="rgb(250,191,14)" fg:x="6930" fg:w="83"/><text x="1.6543%" y="191.50"></text></g><g><title>fekan`alloc::sync::Arc&lt;T,A&gt;::drop_slow (206 samples, 0.04%)</title><rect x="1.3875%" y="197" width="0.0417%" height="15" fill="rgb(239,60,40)" fg:x="6847" fg:w="206"/><text x="1.6375%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3,358 samples, 0.68%)</title><rect x="1.4412%" y="149" width="0.6805%" height="15" fill="rgb(206,27,48)" fg:x="7112" fg:w="3358"/><text x="1.6912%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (127 samples, 0.03%)</title><rect x="2.1265%" y="133" width="0.0257%" height="15" fill="rgb(225,35,8)" fg:x="10494" fg:w="127"/><text x="2.3765%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (122 samples, 0.02%)</title><rect x="2.1523%" y="133" width="0.0247%" height="15" fill="rgb(250,213,24)" fg:x="10621" fg:w="122"/><text x="2.4023%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (121 samples, 0.02%)</title><rect x="2.1525%" y="117" width="0.0245%" height="15" fill="rgb(247,123,22)" fg:x="10622" fg:w="121"/><text x="2.4025%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (283 samples, 0.06%)</title><rect x="2.1219%" y="149" width="0.0573%" height="15" fill="rgb(231,138,38)" fg:x="10471" fg:w="283"/><text x="2.3719%" y="159.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (3,664 samples, 0.74%)</title><rect x="1.4371%" y="165" width="0.7425%" height="15" fill="rgb(231,145,46)" fg:x="7092" fg:w="3664"/><text x="1.6871%" y="175.50"></text></g><g><title>fekan`rayon_core::latch::LockLatch::wait_and_reset (3,691 samples, 0.75%)</title><rect x="1.4335%" y="181" width="0.7480%" height="15" fill="rgb(251,118,11)" fg:x="7074" fg:w="3691"/><text x="1.6835%" y="191.50"></text></g><g><title>fekan`rayon_core::registry::Registry::in_worker_cold (3,750 samples, 0.76%)</title><rect x="1.4292%" y="197" width="0.7599%" height="15" fill="rgb(217,147,25)" fg:x="7053" fg:w="3750"/><text x="1.6792%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (60 samples, 0.01%)</title><rect x="2.1977%" y="197" width="0.0122%" height="15" fill="rgb(247,81,37)" fg:x="10845" fg:w="60"/><text x="2.4477%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (80 samples, 0.02%)</title><rect x="2.2102%" y="197" width="0.0162%" height="15" fill="rgb(209,12,38)" fg:x="10907" fg:w="80"/><text x="2.4602%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward_concurrent (4,218 samples, 0.85%)</title><rect x="1.3747%" y="213" width="0.8548%" height="15" fill="rgb(227,1,9)" fg:x="6784" fg:w="4218"/><text x="1.6247%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::forward_concurrent (4,372 samples, 0.89%)</title><rect x="1.3668%" y="229" width="0.8860%" height="15" fill="rgb(248,47,43)" fg:x="6745" fg:w="4372"/><text x="1.6168%" y="239.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (203 samples, 0.04%)</title><rect x="2.7177%" y="197" width="0.0411%" height="15" fill="rgb(221,10,30)" fg:x="13411" fg:w="203"/><text x="2.9677%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (69 samples, 0.01%)</title><rect x="2.8427%" y="85" width="0.0140%" height="15" fill="rgb(210,229,1)" fg:x="14028" fg:w="69"/><text x="3.0927%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (110 samples, 0.02%)</title><rect x="2.8352%" y="101" width="0.0223%" height="15" fill="rgb(222,148,37)" fg:x="13991" fg:w="110"/><text x="3.0852%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (163 samples, 0.03%)</title><rect x="2.8255%" y="117" width="0.0330%" height="15" fill="rgb(234,67,33)" fg:x="13943" fg:w="163"/><text x="3.0755%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (228 samples, 0.05%)</title><rect x="2.8141%" y="133" width="0.0462%" height="15" fill="rgb(247,98,35)" fg:x="13887" fg:w="228"/><text x="3.0641%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (306 samples, 0.06%)</title><rect x="2.8007%" y="149" width="0.0620%" height="15" fill="rgb(247,138,52)" fg:x="13821" fg:w="306"/><text x="3.0507%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (393 samples, 0.08%)</title><rect x="2.7855%" y="165" width="0.0796%" height="15" fill="rgb(213,79,30)" fg:x="13746" fg:w="393"/><text x="3.0355%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (550 samples, 0.11%)</title><rect x="2.7588%" y="181" width="0.1115%" height="15" fill="rgb(246,177,23)" fg:x="13614" fg:w="550"/><text x="3.0088%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (551 samples, 0.11%)</title><rect x="2.7588%" y="197" width="0.1117%" height="15" fill="rgb(230,62,27)" fg:x="13614" fg:w="551"/><text x="3.0088%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (494 samples, 0.10%)</title><rect x="2.8704%" y="197" width="0.1001%" height="15" fill="rgb(216,154,8)" fg:x="14165" fg:w="494"/><text x="3.1204%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (437 samples, 0.09%)</title><rect x="2.8820%" y="181" width="0.0886%" height="15" fill="rgb(244,35,45)" fg:x="14222" fg:w="437"/><text x="3.1320%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (312 samples, 0.06%)</title><rect x="2.9073%" y="165" width="0.0632%" height="15" fill="rgb(251,115,12)" fg:x="14347" fg:w="312"/><text x="3.1573%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (87 samples, 0.02%)</title><rect x="2.9529%" y="149" width="0.0176%" height="15" fill="rgb(240,54,50)" fg:x="14572" fg:w="87"/><text x="3.2029%" y="159.50"></text></g><g><title>fekan`nalgebra::linalg::householder::clear_column_unchecked (1,259 samples, 0.26%)</title><rect x="3.0619%" y="165" width="0.2551%" height="15" fill="rgb(233,84,52)" fg:x="15110" fg:w="1259"/><text x="3.3119%" y="175.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_with_sign (1,246 samples, 0.25%)</title><rect x="3.0646%" y="149" width="0.2525%" height="15" fill="rgb(207,117,47)" fg:x="15123" fg:w="1246"/><text x="3.3146%" y="159.50"></text></g><g><title>fekan`nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::new (2,684 samples, 0.54%)</title><rect x="3.0619%" y="181" width="0.5439%" height="15" fill="rgb(249,43,39)" fg:x="15110" fg:w="2684"/><text x="3.3119%" y="191.50"></text></g><g><title>fekan`nalgebra::linalg::householder::clear_row_unchecked (1,425 samples, 0.29%)</title><rect x="3.3171%" y="165" width="0.2888%" height="15" fill="rgb(209,38,44)" fg:x="16369" fg:w="1425"/><text x="3.5671%" y="175.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_rows_with_sign (1,404 samples, 0.28%)</title><rect x="3.3213%" y="149" width="0.2845%" height="15" fill="rgb(236,212,23)" fg:x="16390" fg:w="1404"/><text x="3.5713%" y="159.50"></text></g><g><title>fekan`nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::u (1,309 samples, 0.27%)</title><rect x="3.6058%" y="181" width="0.2653%" height="15" fill="rgb(242,79,21)" fg:x="17794" fg:w="1309"/><text x="3.8558%" y="191.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_with_sign (1,304 samples, 0.26%)</title><rect x="3.6069%" y="165" width="0.2642%" height="15" fill="rgb(211,96,35)" fg:x="17799" fg:w="1304"/><text x="3.8569%" y="175.50"></text></g><g><title>fekan`nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::v_t (1,413 samples, 0.29%)</title><rect x="3.8711%" y="181" width="0.2863%" height="15" fill="rgb(253,215,40)" fg:x="19103" fg:w="1413"/><text x="4.1211%" y="191.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_rows_with_sign (1,396 samples, 0.28%)</title><rect x="3.8745%" y="165" width="0.2829%" height="15" fill="rgb(211,81,21)" fg:x="19120" fg:w="1396"/><text x="4.1245%" y="175.50"></text></g><g><title>fekan`nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::new (5,893 samples, 1.19%)</title><rect x="2.9706%" y="197" width="1.1942%" height="15" fill="rgb(208,190,38)" fg:x="14659" fg:w="5893"/><text x="3.2206%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::set_knot_length (9,459 samples, 1.92%)</title><rect x="2.2528%" y="213" width="1.9168%" height="15" fill="rgb(235,213,38)" fg:x="11117" fg:w="9459"/><text x="2.5028%" y="223.50">f..</text></g><g><title>fekan`fekan::kan::Kan::set_knot_length (9,487 samples, 1.92%)</title><rect x="2.2528%" y="229" width="1.9225%" height="15" fill="rgb(237,122,38)" fg:x="11117" fg:w="9487"/><text x="2.5028%" y="239.50">f..</text></g><g><title>fekan`fekan::kan::Kan::update (446 samples, 0.09%)</title><rect x="4.1753%" y="229" width="0.0904%" height="15" fill="rgb(244,218,35)" fg:x="20604" fg:w="446"/><text x="4.4253%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::update_knots_from_samples (52 samples, 0.01%)</title><rect x="4.2746%" y="197" width="0.0105%" height="15" fill="rgb(240,68,47)" fg:x="21094" fg:w="52"/><text x="4.5246%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (278 samples, 0.06%)</title><rect x="4.2656%" y="229" width="0.0563%" height="15" fill="rgb(210,16,53)" fg:x="21050" fg:w="278"/><text x="4.5156%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (277 samples, 0.06%)</title><rect x="4.2659%" y="213" width="0.0561%" height="15" fill="rgb(235,124,12)" fg:x="21051" fg:w="277"/><text x="4.5159%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (178 samples, 0.04%)</title><rect x="4.2859%" y="197" width="0.0361%" height="15" fill="rgb(224,169,11)" fg:x="21150" fg:w="178"/><text x="4.5359%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (19,366 samples, 3.92%)</title><rect x="4.3538%" y="181" width="3.9244%" height="15" fill="rgb(250,166,2)" fg:x="21485" fg:w="19366"/><text x="4.6038%" y="191.50">feka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (17,325 samples, 3.51%)</title><rect x="4.7674%" y="165" width="3.5108%" height="15" fill="rgb(242,216,29)" fg:x="23526" fg:w="17325"/><text x="5.0174%" y="175.50">fek..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (12,970 samples, 2.63%)</title><rect x="5.6499%" y="149" width="2.6283%" height="15" fill="rgb(230,116,27)" fg:x="27881" fg:w="12970"/><text x="5.8999%" y="159.50">fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (3,609 samples, 0.73%)</title><rect x="7.5469%" y="133" width="0.7313%" height="15" fill="rgb(228,99,48)" fg:x="37242" fg:w="3609"/><text x="7.7969%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (19,503 samples, 3.95%)</title><rect x="4.3264%" y="197" width="3.9522%" height="15" fill="rgb(253,11,6)" fg:x="21350" fg:w="19503"/><text x="4.5764%" y="207.50">feka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (727 samples, 0.15%)</title><rect x="8.2786%" y="197" width="0.1473%" height="15" fill="rgb(247,143,39)" fg:x="40853" fg:w="727"/><text x="8.5286%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (20,236 samples, 4.10%)</title><rect x="4.3262%" y="213" width="4.1007%" height="15" fill="rgb(236,97,10)" fg:x="21349" fg:w="20236"/><text x="4.5762%" y="223.50">feka..</text></g><g><title>fekan`fekan::validate_model (20,295 samples, 4.11%)</title><rect x="4.3256%" y="229" width="4.1127%" height="15" fill="rgb(233,208,19)" fg:x="21346" fg:w="20295"/><text x="4.5756%" y="239.50">feka..</text></g><g><title>libsystem_c.dylib`isatty (77 samples, 0.02%)</title><rect x="8.4539%" y="149" width="0.0156%" height="15" fill="rgb(216,164,2)" fg:x="41718" fg:w="77"/><text x="8.7039%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (77 samples, 0.02%)</title><rect x="8.4539%" y="133" width="0.0156%" height="15" fill="rgb(220,129,5)" fg:x="41718" fg:w="77"/><text x="8.7039%" y="143.50"></text></g><g><title>fekan`console::unix_term::terminal_size (145 samples, 0.03%)</title><rect x="8.4533%" y="165" width="0.0294%" height="15" fill="rgb(242,17,10)" fg:x="41715" fg:w="145"/><text x="8.7033%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (65 samples, 0.01%)</title><rect x="8.4695%" y="149" width="0.0132%" height="15" fill="rgb(242,107,0)" fg:x="41795" fg:w="65"/><text x="8.7195%" y="159.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (147 samples, 0.03%)</title><rect x="8.4531%" y="181" width="0.0298%" height="15" fill="rgb(251,28,31)" fg:x="41714" fg:w="147"/><text x="8.7031%" y="191.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (224 samples, 0.05%)</title><rect x="8.4450%" y="197" width="0.0454%" height="15" fill="rgb(233,223,10)" fg:x="41674" fg:w="224"/><text x="8.6950%" y="207.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (237 samples, 0.05%)</title><rect x="8.4438%" y="229" width="0.0480%" height="15" fill="rgb(215,21,27)" fg:x="41668" fg:w="237"/><text x="8.6938%" y="239.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (234 samples, 0.05%)</title><rect x="8.4444%" y="213" width="0.0474%" height="15" fill="rgb(232,23,21)" fg:x="41671" fg:w="234"/><text x="8.6944%" y="223.50"></text></g><g><title>fekan`fekan::train_model (38,613 samples, 7.82%)</title><rect x="0.7038%" y="245" width="7.8247%" height="15" fill="rgb(244,5,23)" fg:x="3473" fg:w="38613"/><text x="0.9538%" y="255.50">fekan`fekan..</text></g><g><title>libsystem_platform.dylib`_platform_memset (157 samples, 0.03%)</title><rect x="8.4966%" y="229" width="0.0318%" height="15" fill="rgb(226,81,46)" fg:x="41929" fg:w="157"/><text x="8.7466%" y="239.50"></text></g><g><title>fekan`fekan::main (42,104 samples, 8.53%)</title><rect x="0.0000%" y="261" width="8.5321%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="42104"/><text x="0.2500%" y="271.50">fekan`fekan:..</text></g><g><title>dyld`start (42,105 samples, 8.53%)</title><rect x="0.0000%" y="341" width="8.5323%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="42105"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>fekan`main (42,105 samples, 8.53%)</title><rect x="0.0000%" y="325" width="8.5323%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="42105"/><text x="0.2500%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (42,105 samples, 8.53%)</title><rect x="0.0000%" y="309" width="8.5323%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="42105"/><text x="0.2500%" y="319.50">fekan`std::r..</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (42,105 samples, 8.53%)</title><rect x="0.0000%" y="293" width="8.5323%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="42105"/><text x="0.2500%" y="303.50">fekan`std::r..</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (42,105 samples, 8.53%)</title><rect x="0.0000%" y="277" width="8.5323%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="42105"/><text x="0.2500%" y="287.50">fekan`std::s..</text></g><g><title>fekan`DYLD-STUB$$sched_yield (71 samples, 0.01%)</title><rect x="8.5402%" y="245" width="0.0144%" height="15" fill="rgb(247,173,49)" fg:x="42144" fg:w="71"/><text x="8.7902%" y="255.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (137 samples, 0.03%)</title><rect x="8.5554%" y="245" width="0.0278%" height="15" fill="rgb(224,114,35)" fg:x="42219" fg:w="137"/><text x="8.8054%" y="255.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (205 samples, 0.04%)</title><rect x="8.7544%" y="229" width="0.0415%" height="15" fill="rgb(245,159,27)" fg:x="43201" fg:w="205"/><text x="9.0044%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (4,035 samples, 0.82%)</title><rect x="8.8221%" y="197" width="0.8177%" height="15" fill="rgb(245,172,44)" fg:x="43535" fg:w="4035"/><text x="9.0721%" y="207.50"></text></g><g><title>fekan`&lt;rayon_core::latch::LatchRef&lt;L&gt; as rayon_core::latch::Latch&gt;::set (4,115 samples, 0.83%)</title><rect x="8.8184%" y="213" width="0.8339%" height="15" fill="rgb(236,23,11)" fg:x="43517" fg:w="4115"/><text x="9.0684%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (4,808 samples, 0.97%)</title><rect x="16.5256%" y="149" width="0.9743%" height="15" fill="rgb(205,117,38)" fg:x="81550" fg:w="4808"/><text x="16.7756%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (2,508 samples, 0.51%)</title><rect x="16.9917%" y="133" width="0.5082%" height="15" fill="rgb(237,72,25)" fg:x="83850" fg:w="2508"/><text x="17.2417%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (3,986 samples, 0.81%)</title><rect x="17.4999%" y="149" width="0.8077%" height="15" fill="rgb(244,70,9)" fg:x="86358" fg:w="3986"/><text x="17.7499%" y="159.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (96 samples, 0.02%)</title><rect x="19.0973%" y="133" width="0.0195%" height="15" fill="rgb(217,125,39)" fg:x="94241" fg:w="96"/><text x="19.3473%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (34,726 samples, 7.04%)</title><rect x="12.0802%" y="165" width="7.0370%" height="15" fill="rgb(235,36,10)" fg:x="59613" fg:w="34726"/><text x="12.3302%" y="175.50">fekan`fek..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,995 samples, 0.81%)</title><rect x="18.3076%" y="149" width="0.8096%" height="15" fill="rgb(251,123,47)" fg:x="90344" fg:w="3995"/><text x="18.5576%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (60,233 samples, 12.21%)</title><rect x="9.7772%" y="181" width="12.2058%" height="15" fill="rgb(221,13,13)" fg:x="48248" fg:w="60233"/><text x="10.0272%" y="191.50">fekan`fekan::kan_l..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14,142 samples, 2.87%)</title><rect x="19.1172%" y="165" width="2.8658%" height="15" fill="rgb(238,131,9)" fg:x="94339" fg:w="14142"/><text x="19.3672%" y="175.50">fe..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,545 samples, 0.52%)</title><rect x="21.9830%" y="181" width="0.5157%" height="15" fill="rgb(211,50,8)" fg:x="108481" fg:w="2545"/><text x="22.2330%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (58 samples, 0.01%)</title><rect x="22.5042%" y="181" width="0.0118%" height="15" fill="rgb(245,182,24)" fg:x="111053" fg:w="58"/><text x="22.7542%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (55 samples, 0.01%)</title><rect x="22.5048%" y="165" width="0.0111%" height="15" fill="rgb(242,14,37)" fg:x="111056" fg:w="55"/><text x="22.7548%" y="175.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (63,450 samples, 12.86%)</title><rect x="9.6742%" y="197" width="12.8577%" height="15" fill="rgb(246,228,12)" fg:x="47740" fg:w="63450"/><text x="9.9242%" y="207.50">fekan`core::ops::fu..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (2,420 samples, 0.49%)</title><rect x="22.5322%" y="197" width="0.4904%" height="15" fill="rgb(213,55,15)" fg:x="111191" fg:w="2420"/><text x="22.7822%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (2,024 samples, 0.41%)</title><rect x="25.7260%" y="133" width="0.4102%" height="15" fill="rgb(209,9,3)" fg:x="126952" fg:w="2024"/><text x="25.9760%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (1,139 samples, 0.23%)</title><rect x="25.9054%" y="117" width="0.2308%" height="15" fill="rgb(230,59,30)" fg:x="127837" fg:w="1139"/><text x="26.1554%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (1,580 samples, 0.32%)</title><rect x="26.1362%" y="133" width="0.3202%" height="15" fill="rgb(209,121,21)" fg:x="128976" fg:w="1580"/><text x="26.3862%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (13,722 samples, 2.78%)</title><rect x="23.9912%" y="149" width="2.7807%" height="15" fill="rgb(220,109,13)" fg:x="118391" fg:w="13722"/><text x="24.2412%" y="159.50">fe..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,557 samples, 0.32%)</title><rect x="26.4563%" y="133" width="0.3155%" height="15" fill="rgb(232,18,1)" fg:x="130556" fg:w="1557"/><text x="26.7063%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (23,406 samples, 4.74%)</title><rect x="23.0773%" y="165" width="4.7431%" height="15" fill="rgb(215,41,42)" fg:x="113881" fg:w="23406"/><text x="23.3273%" y="175.50">fekan`..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,174 samples, 1.05%)</title><rect x="26.7719%" y="149" width="1.0485%" height="15" fill="rgb(224,123,36)" fg:x="132113" fg:w="5174"/><text x="27.0219%" y="159.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (900 samples, 0.18%)</title><rect x="27.8203%" y="165" width="0.1824%" height="15" fill="rgb(240,125,3)" fg:x="137287" fg:w="900"/><text x="28.0703%" y="175.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (24,605 samples, 4.99%)</title><rect x="23.0319%" y="181" width="4.9860%" height="15" fill="rgb(205,98,50)" fg:x="113657" fg:w="24605"/><text x="23.2819%" y="191.50">fekan`..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (909 samples, 0.18%)</title><rect x="28.0204%" y="181" width="0.1842%" height="15" fill="rgb(205,185,37)" fg:x="138274" fg:w="909"/><text x="28.2704%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (117 samples, 0.02%)</title><rect x="28.2185%" y="117" width="0.0237%" height="15" fill="rgb(238,207,15)" fg:x="139252" fg:w="117"/><text x="28.4685%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (218 samples, 0.04%)</title><rect x="28.2052%" y="133" width="0.0442%" height="15" fill="rgb(213,199,42)" fg:x="139186" fg:w="218"/><text x="28.4552%" y="143.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (229 samples, 0.05%)</title><rect x="28.2050%" y="149" width="0.0464%" height="15" fill="rgb(235,201,11)" fg:x="139185" fg:w="229"/><text x="28.4550%" y="159.50"></text></g><g><title>fekan`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (238 samples, 0.05%)</title><rect x="28.2046%" y="181" width="0.0482%" height="15" fill="rgb(207,46,11)" fg:x="139183" fg:w="238"/><text x="28.4546%" y="191.50"></text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (237 samples, 0.05%)</title><rect x="28.2048%" y="165" width="0.0480%" height="15" fill="rgb(241,35,35)" fg:x="139184" fg:w="237"/><text x="28.4548%" y="175.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (99 samples, 0.02%)</title><rect x="28.3184%" y="117" width="0.0201%" height="15" fill="rgb(243,32,47)" fg:x="139745" fg:w="99"/><text x="28.5684%" y="127.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (199 samples, 0.04%)</title><rect x="28.3010%" y="133" width="0.0403%" height="15" fill="rgb(247,202,23)" fg:x="139659" fg:w="199"/><text x="28.5510%" y="143.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (356 samples, 0.07%)</title><rect x="28.2767%" y="149" width="0.0721%" height="15" fill="rgb(219,102,11)" fg:x="139539" fg:w="356"/><text x="28.5267%" y="159.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (65 samples, 0.01%)</title><rect x="28.3494%" y="149" width="0.0132%" height="15" fill="rgb(243,110,44)" fg:x="139898" fg:w="65"/><text x="28.5994%" y="159.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (460 samples, 0.09%)</title><rect x="28.2714%" y="165" width="0.0932%" height="15" fill="rgb(222,74,54)" fg:x="139513" fg:w="460"/><text x="28.5214%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (163 samples, 0.03%)</title><rect x="28.3653%" y="133" width="0.0330%" height="15" fill="rgb(216,99,12)" fg:x="139976" fg:w="163"/><text x="28.6153%" y="143.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::sleep (177 samples, 0.04%)</title><rect x="28.3646%" y="165" width="0.0359%" height="15" fill="rgb(226,22,26)" fg:x="139973" fg:w="177"/><text x="28.6146%" y="175.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (176 samples, 0.04%)</title><rect x="28.3648%" y="149" width="0.0357%" height="15" fill="rgb(217,163,10)" fg:x="139974" fg:w="176"/><text x="28.6148%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (466 samples, 0.09%)</title><rect x="28.4034%" y="133" width="0.0944%" height="15" fill="rgb(213,25,53)" fg:x="140164" fg:w="466"/><text x="28.6534%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (59 samples, 0.01%)</title><rect x="28.4984%" y="133" width="0.0120%" height="15" fill="rgb(252,105,26)" fg:x="140633" fg:w="59"/><text x="28.7484%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (57 samples, 0.01%)</title><rect x="28.4988%" y="117" width="0.0116%" height="15" fill="rgb(220,39,43)" fg:x="140635" fg:w="57"/><text x="28.7488%" y="127.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (583 samples, 0.12%)</title><rect x="28.4009%" y="149" width="0.1181%" height="15" fill="rgb(229,68,48)" fg:x="140152" fg:w="583"/><text x="28.6509%" y="159.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (587 samples, 0.12%)</title><rect x="28.4005%" y="165" width="0.1190%" height="15" fill="rgb(252,8,32)" fg:x="140150" fg:w="587"/><text x="28.6505%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (3,907 samples, 0.79%)</title><rect x="28.5201%" y="165" width="0.7917%" height="15" fill="rgb(223,20,43)" fg:x="140740" fg:w="3907"/><text x="28.7701%" y="175.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (5,233 samples, 1.06%)</title><rect x="28.2536%" y="181" width="1.0604%" height="15" fill="rgb(229,81,49)" fg:x="139425" fg:w="5233"/><text x="28.5036%" y="191.50"></text></g><g><title>fekan`rayon_core::join::join_context::_{{closure}} (31,056 samples, 6.29%)</title><rect x="23.0232%" y="197" width="6.2933%" height="15" fill="rgb(236,28,36)" fg:x="113614" fg:w="31056"/><text x="23.2732%" y="207.50">fekan`ra..</text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (97,013 samples, 19.66%)</title><rect x="9.6588%" y="213" width="19.6591%" height="15" fill="rgb(249,185,26)" fg:x="47664" fg:w="97013"/><text x="9.9088%" y="223.50">fekan`rayon::iter::plumbing::br..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (253 samples, 0.05%)</title><rect x="29.3183%" y="197" width="0.0513%" height="15" fill="rgb(249,174,33)" fg:x="144679" fg:w="253"/><text x="29.5683%" y="207.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (262 samples, 0.05%)</title><rect x="29.3183%" y="213" width="0.0531%" height="15" fill="rgb(233,201,37)" fg:x="144679" fg:w="262"/><text x="29.5683%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (1,036 samples, 0.21%)</title><rect x="30.7806%" y="117" width="0.2099%" height="15" fill="rgb(221,78,26)" fg:x="151895" fg:w="1036"/><text x="31.0306%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (491 samples, 0.10%)</title><rect x="30.8910%" y="101" width="0.0995%" height="15" fill="rgb(250,127,30)" fg:x="152440" fg:w="491"/><text x="31.1410%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (803 samples, 0.16%)</title><rect x="30.9905%" y="117" width="0.1627%" height="15" fill="rgb(230,49,44)" fg:x="152931" fg:w="803"/><text x="31.2405%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (7,133 samples, 1.45%)</title><rect x="29.8705%" y="133" width="1.4455%" height="15" fill="rgb(229,67,23)" fg:x="147404" fg:w="7133"/><text x="30.1205%" y="143.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (803 samples, 0.16%)</title><rect x="31.1532%" y="117" width="0.1627%" height="15" fill="rgb(249,83,47)" fg:x="153734" fg:w="803"/><text x="31.4032%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (12,164 samples, 2.46%)</title><rect x="29.4318%" y="149" width="2.4650%" height="15" fill="rgb(215,43,3)" fg:x="145239" fg:w="12164"/><text x="29.6818%" y="159.50">fe..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,866 samples, 0.58%)</title><rect x="31.3159%" y="133" width="0.5808%" height="15" fill="rgb(238,154,13)" fg:x="154537" fg:w="2866"/><text x="31.5659%" y="143.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (517 samples, 0.10%)</title><rect x="31.8967%" y="149" width="0.1048%" height="15" fill="rgb(219,56,2)" fg:x="157403" fg:w="517"/><text x="32.1467%" y="159.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (12,844 samples, 2.60%)</title><rect x="29.4046%" y="165" width="2.6028%" height="15" fill="rgb(233,0,4)" fg:x="145105" fg:w="12844"/><text x="29.6546%" y="175.50">fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (504 samples, 0.10%)</title><rect x="32.0108%" y="165" width="0.1021%" height="15" fill="rgb(235,30,7)" fg:x="157966" fg:w="504"/><text x="32.2608%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (80 samples, 0.02%)</title><rect x="32.1267%" y="101" width="0.0162%" height="15" fill="rgb(250,79,13)" fg:x="158538" fg:w="80"/><text x="32.3767%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (159 samples, 0.03%)</title><rect x="32.1142%" y="117" width="0.0322%" height="15" fill="rgb(211,146,34)" fg:x="158476" fg:w="159"/><text x="32.3642%" y="127.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (166 samples, 0.03%)</title><rect x="32.1134%" y="133" width="0.0336%" height="15" fill="rgb(228,22,38)" fg:x="158472" fg:w="166"/><text x="32.3634%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (154 samples, 0.03%)</title><rect x="32.1711%" y="85" width="0.0312%" height="15" fill="rgb(235,168,5)" fg:x="158757" fg:w="154"/><text x="32.4211%" y="95.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (304 samples, 0.06%)</title><rect x="32.1486%" y="101" width="0.0616%" height="15" fill="rgb(221,155,16)" fg:x="158646" fg:w="304"/><text x="32.3986%" y="111.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (314 samples, 0.06%)</title><rect x="32.1476%" y="117" width="0.0636%" height="15" fill="rgb(215,215,53)" fg:x="158641" fg:w="314"/><text x="32.3976%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (139 samples, 0.03%)</title><rect x="32.2329%" y="53" width="0.0282%" height="15" fill="rgb(223,4,10)" fg:x="159062" fg:w="139"/><text x="32.4829%" y="63.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (277 samples, 0.06%)</title><rect x="32.2118%" y="69" width="0.0561%" height="15" fill="rgb(234,103,6)" fg:x="158958" fg:w="277"/><text x="32.4618%" y="79.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (283 samples, 0.06%)</title><rect x="32.2118%" y="85" width="0.0573%" height="15" fill="rgb(227,97,0)" fg:x="158958" fg:w="283"/><text x="32.4618%" y="95.50"></text></g><g><title>fekan`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (286 samples, 0.06%)</title><rect x="32.2118%" y="117" width="0.0580%" height="15" fill="rgb(234,150,53)" fg:x="158958" fg:w="286"/><text x="32.4618%" y="127.50"></text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (286 samples, 0.06%)</title><rect x="32.2118%" y="101" width="0.0580%" height="15" fill="rgb(228,201,54)" fg:x="158958" fg:w="286"/><text x="32.4618%" y="111.50"></text></g><g><title>fekan`rayon_core::join::join_context::_{{closure}} (661 samples, 0.13%)</title><rect x="32.1470%" y="133" width="0.1339%" height="15" fill="rgb(222,22,37)" fg:x="158638" fg:w="661"/><text x="32.3970%" y="143.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (55 samples, 0.01%)</title><rect x="32.2698%" y="117" width="0.0111%" height="15" fill="rgb(237,53,32)" fg:x="159244" fg:w="55"/><text x="32.5198%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (50 samples, 0.01%)</title><rect x="32.2708%" y="101" width="0.0101%" height="15" fill="rgb(233,25,53)" fg:x="159249" fg:w="50"/><text x="32.5208%" y="111.50"></text></g><g><title>fekan`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (830 samples, 0.17%)</title><rect x="32.1129%" y="165" width="0.1682%" height="15" fill="rgb(210,40,34)" fg:x="158470" fg:w="830"/><text x="32.3629%" y="175.50"></text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (829 samples, 0.17%)</title><rect x="32.1131%" y="149" width="0.1680%" height="15" fill="rgb(241,220,44)" fg:x="158471" fg:w="829"/><text x="32.3631%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (2,081 samples, 0.42%)</title><rect x="34.9427%" y="101" width="0.4217%" height="15" fill="rgb(235,28,35)" fg:x="172434" fg:w="2081"/><text x="35.1927%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (1,123 samples, 0.23%)</title><rect x="35.1368%" y="85" width="0.2276%" height="15" fill="rgb(210,56,17)" fg:x="173392" fg:w="1123"/><text x="35.3868%" y="95.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (1,602 samples, 0.32%)</title><rect x="35.3644%" y="101" width="0.3246%" height="15" fill="rgb(224,130,29)" fg:x="174515" fg:w="1602"/><text x="35.6144%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (13,763 samples, 2.79%)</title><rect x="33.2078%" y="117" width="2.7890%" height="15" fill="rgb(235,212,8)" fg:x="163873" fg:w="13763"/><text x="33.4578%" y="127.50">fe..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,519 samples, 0.31%)</title><rect x="35.6890%" y="101" width="0.3078%" height="15" fill="rgb(223,33,50)" fg:x="176117" fg:w="1519"/><text x="35.9390%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (23,815 samples, 4.83%)</title><rect x="32.3340%" y="133" width="4.8260%" height="15" fill="rgb(219,149,13)" fg:x="159561" fg:w="23815"/><text x="32.5840%" y="143.50">fekan`..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,740 samples, 1.16%)</title><rect x="35.9968%" y="117" width="1.1632%" height="15" fill="rgb(250,156,29)" fg:x="177636" fg:w="5740"/><text x="36.2468%" y="127.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (997 samples, 0.20%)</title><rect x="37.1600%" y="133" width="0.2020%" height="15" fill="rgb(216,193,19)" fg:x="183376" fg:w="997"/><text x="37.4100%" y="143.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (25,116 samples, 5.09%)</title><rect x="32.2965%" y="149" width="5.0896%" height="15" fill="rgb(216,135,14)" fg:x="159376" fg:w="25116"/><text x="32.5465%" y="159.50">fekan`..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (955 samples, 0.19%)</title><rect x="37.3896%" y="149" width="0.1935%" height="15" fill="rgb(241,47,5)" fg:x="184509" fg:w="955"/><text x="37.6396%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (302 samples, 0.06%)</title><rect x="37.6251%" y="85" width="0.0612%" height="15" fill="rgb(233,42,35)" fg:x="185671" fg:w="302"/><text x="37.8751%" y="95.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (65 samples, 0.01%)</title><rect x="37.6731%" y="69" width="0.0132%" height="15" fill="rgb(231,13,6)" fg:x="185908" fg:w="65"/><text x="37.9231%" y="79.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (589 samples, 0.12%)</title><rect x="37.5849%" y="101" width="0.1194%" height="15" fill="rgb(207,181,40)" fg:x="185473" fg:w="589"/><text x="37.8349%" y="111.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (89 samples, 0.02%)</title><rect x="37.6863%" y="85" width="0.0180%" height="15" fill="rgb(254,173,49)" fg:x="185973" fg:w="89"/><text x="37.9363%" y="95.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (613 samples, 0.12%)</title><rect x="37.5833%" y="117" width="0.1242%" height="15" fill="rgb(221,1,38)" fg:x="185465" fg:w="613"/><text x="37.8333%" y="127.50"></text></g><g><title>fekan`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (622 samples, 0.13%)</title><rect x="37.5831%" y="149" width="0.1260%" height="15" fill="rgb(206,124,46)" fg:x="185464" fg:w="622"/><text x="37.8331%" y="159.50"></text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (622 samples, 0.13%)</title><rect x="37.5831%" y="133" width="0.1260%" height="15" fill="rgb(249,21,11)" fg:x="185464" fg:w="622"/><text x="37.8331%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (72 samples, 0.01%)</title><rect x="37.7217%" y="69" width="0.0146%" height="15" fill="rgb(222,201,40)" fg:x="186148" fg:w="72"/><text x="37.9717%" y="79.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (135 samples, 0.03%)</title><rect x="37.7148%" y="85" width="0.0274%" height="15" fill="rgb(235,61,29)" fg:x="186114" fg:w="135"/><text x="37.9648%" y="95.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (142 samples, 0.03%)</title><rect x="37.7146%" y="101" width="0.0288%" height="15" fill="rgb(219,207,3)" fg:x="186113" fg:w="142"/><text x="37.9646%" y="111.50"></text></g><g><title>fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (146 samples, 0.03%)</title><rect x="37.7146%" y="133" width="0.0296%" height="15" fill="rgb(222,56,46)" fg:x="186113" fg:w="146"/><text x="37.9646%" y="143.50"></text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (146 samples, 0.03%)</title><rect x="37.7146%" y="117" width="0.0296%" height="15" fill="rgb(239,76,54)" fg:x="186113" fg:w="146"/><text x="37.9646%" y="127.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (118 samples, 0.02%)</title><rect x="37.8016%" y="85" width="0.0239%" height="15" fill="rgb(231,124,27)" fg:x="186542" fg:w="118"/><text x="38.0516%" y="95.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (247 samples, 0.05%)</title><rect x="37.7791%" y="101" width="0.0501%" height="15" fill="rgb(249,195,6)" fg:x="186431" fg:w="247"/><text x="38.0291%" y="111.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (398 samples, 0.08%)</title><rect x="37.7545%" y="117" width="0.0807%" height="15" fill="rgb(237,174,47)" fg:x="186310" fg:w="398"/><text x="38.0045%" y="127.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (51 samples, 0.01%)</title><rect x="37.8364%" y="117" width="0.0103%" height="15" fill="rgb(206,201,31)" fg:x="186714" fg:w="51"/><text x="38.0864%" y="127.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (493 samples, 0.10%)</title><rect x="37.7493%" y="133" width="0.0999%" height="15" fill="rgb(231,57,52)" fg:x="186284" fg:w="493"/><text x="37.9993%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (165 samples, 0.03%)</title><rect x="37.8498%" y="101" width="0.0334%" height="15" fill="rgb(248,177,22)" fg:x="186780" fg:w="165"/><text x="38.0998%" y="111.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::sleep (177 samples, 0.04%)</title><rect x="37.8492%" y="133" width="0.0359%" height="15" fill="rgb(215,211,37)" fg:x="186777" fg:w="177"/><text x="38.0992%" y="143.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (175 samples, 0.04%)</title><rect x="37.8496%" y="117" width="0.0355%" height="15" fill="rgb(241,128,51)" fg:x="186779" fg:w="175"/><text x="38.0996%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (448 samples, 0.09%)</title><rect x="37.8881%" y="101" width="0.0908%" height="15" fill="rgb(227,165,31)" fg:x="186969" fg:w="448"/><text x="38.1381%" y="111.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (562 samples, 0.11%)</title><rect x="37.8850%" y="133" width="0.1139%" height="15" fill="rgb(228,167,24)" fg:x="186954" fg:w="562"/><text x="38.1350%" y="143.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (557 samples, 0.11%)</title><rect x="37.8861%" y="117" width="0.1129%" height="15" fill="rgb(228,143,12)" fg:x="186959" fg:w="557"/><text x="38.1361%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (3,877 samples, 0.79%)</title><rect x="37.9993%" y="133" width="0.7856%" height="15" fill="rgb(249,149,8)" fg:x="187518" fg:w="3877"/><text x="38.2493%" y="143.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (5,312 samples, 1.08%)</title><rect x="37.7098%" y="149" width="1.0764%" height="15" fill="rgb(243,35,44)" fg:x="186089" fg:w="5312"/><text x="37.9598%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (194 samples, 0.04%)</title><rect x="38.7870%" y="117" width="0.0393%" height="15" fill="rgb(246,89,9)" fg:x="191405" fg:w="194"/><text x="39.0370%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (116 samples, 0.02%)</title><rect x="38.8279%" y="117" width="0.0235%" height="15" fill="rgb(233,213,13)" fg:x="191607" fg:w="116"/><text x="39.0779%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (115 samples, 0.02%)</title><rect x="38.8282%" y="101" width="0.0233%" height="15" fill="rgb(233,141,41)" fg:x="191608" fg:w="115"/><text x="39.0782%" y="111.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (333 samples, 0.07%)</title><rect x="38.7866%" y="133" width="0.0675%" height="15" fill="rgb(239,167,4)" fg:x="191403" fg:w="333"/><text x="39.0366%" y="143.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (336 samples, 0.07%)</title><rect x="38.7862%" y="149" width="0.0681%" height="15" fill="rgb(209,217,16)" fg:x="191401" fg:w="336"/><text x="39.0362%" y="159.50"></text></g><g><title>fekan`rayon_core::join::join_context::_{{closure}} (32,439 samples, 6.57%)</title><rect x="32.2811%" y="165" width="6.5736%" height="15" fill="rgb(219,88,35)" fg:x="159300" fg:w="32439"/><text x="32.5311%" y="175.50">fekan`ray..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (62 samples, 0.01%)</title><rect x="38.8640%" y="101" width="0.0126%" height="15" fill="rgb(220,193,23)" fg:x="191785" fg:w="62"/><text x="39.1140%" y="111.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (68 samples, 0.01%)</title><rect x="38.8636%" y="117" width="0.0138%" height="15" fill="rgb(230,90,52)" fg:x="191783" fg:w="68"/><text x="39.1136%" y="127.50"></text></g><g><title>fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (69 samples, 0.01%)</title><rect x="38.8636%" y="149" width="0.0140%" height="15" fill="rgb(252,106,19)" fg:x="191783" fg:w="69"/><text x="39.1136%" y="159.50"></text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (69 samples, 0.01%)</title><rect x="38.8636%" y="133" width="0.0140%" height="15" fill="rgb(206,74,20)" fg:x="191783" fg:w="69"/><text x="39.1136%" y="143.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (116 samples, 0.02%)</title><rect x="38.9370%" y="101" width="0.0235%" height="15" fill="rgb(230,138,44)" fg:x="192145" fg:w="116"/><text x="39.1870%" y="111.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (227 samples, 0.05%)</title><rect x="38.9183%" y="117" width="0.0460%" height="15" fill="rgb(235,182,43)" fg:x="192053" fg:w="227"/><text x="39.1683%" y="127.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (418 samples, 0.08%)</title><rect x="38.8869%" y="133" width="0.0847%" height="15" fill="rgb(242,16,51)" fg:x="191898" fg:w="418"/><text x="39.1369%" y="143.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (67 samples, 0.01%)</title><rect x="38.9732%" y="133" width="0.0136%" height="15" fill="rgb(248,9,4)" fg:x="192324" fg:w="67"/><text x="39.2232%" y="143.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (529 samples, 0.11%)</title><rect x="38.8829%" y="149" width="0.1072%" height="15" fill="rgb(210,31,22)" fg:x="191878" fg:w="529"/><text x="39.1329%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (144 samples, 0.03%)</title><rect x="38.9901%" y="117" width="0.0292%" height="15" fill="rgb(239,54,39)" fg:x="192407" fg:w="144"/><text x="39.2401%" y="127.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (157 samples, 0.03%)</title><rect x="38.9901%" y="133" width="0.0318%" height="15" fill="rgb(230,99,41)" fg:x="192407" fg:w="157"/><text x="39.2401%" y="143.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::sleep (158 samples, 0.03%)</title><rect x="38.9901%" y="149" width="0.0320%" height="15" fill="rgb(253,106,12)" fg:x="192407" fg:w="158"/><text x="39.2401%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (471 samples, 0.10%)</title><rect x="39.0235%" y="117" width="0.0954%" height="15" fill="rgb(213,46,41)" fg:x="192572" fg:w="471"/><text x="39.2735%" y="127.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (498 samples, 0.10%)</title><rect x="39.0221%" y="133" width="0.1009%" height="15" fill="rgb(215,133,35)" fg:x="192565" fg:w="498"/><text x="39.2721%" y="143.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (500 samples, 0.10%)</title><rect x="39.0221%" y="149" width="0.1013%" height="15" fill="rgb(213,28,5)" fg:x="192565" fg:w="500"/><text x="39.2721%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (5,239 samples, 1.06%)</title><rect x="39.1238%" y="149" width="1.0617%" height="15" fill="rgb(215,77,49)" fg:x="193067" fg:w="5239"/><text x="39.3738%" y="159.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (6,581 samples, 1.33%)</title><rect x="38.8551%" y="165" width="1.3336%" height="15" fill="rgb(248,100,22)" fg:x="191741" fg:w="6581"/><text x="39.1051%" y="175.50"></text></g><g><title>fekan`rayon_core::join::join_context::_{{closure}} (53,295 samples, 10.80%)</title><rect x="29.3900%" y="181" width="10.7999%" height="15" fill="rgb(208,67,9)" fg:x="145033" fg:w="53295"/><text x="29.6400%" y="191.50">fekan`rayon_core..</text></g><g><title>fekan`&lt;rayon::iter::plumbing::bridge::Callback&lt;C&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (53,337 samples, 10.81%)</title><rect x="29.3831%" y="197" width="10.8084%" height="15" fill="rgb(219,133,21)" fg:x="144999" fg:w="53337"/><text x="29.6331%" y="207.50">fekan`&lt;rayon::it..</text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (47,244 samples, 9.57%)</title><rect x="40.1917%" y="197" width="9.5737%" height="15" fill="rgb(246,46,29)" fg:x="198337" fg:w="47244"/><text x="40.4417%" y="207.50">fekan`fekan::k..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (40,723 samples, 8.25%)</title><rect x="41.5132%" y="181" width="8.2523%" height="15" fill="rgb(246,185,52)" fg:x="204858" fg:w="40723"/><text x="41.7632%" y="191.50">fekan`fekan..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (7,746 samples, 1.57%)</title><rect x="49.7654%" y="197" width="1.5697%" height="15" fill="rgb(252,136,11)" fg:x="245581" fg:w="7746"/><text x="50.0154%" y="207.50"></text></g><g><title>fekan`rayon_core::thread_pool::ThreadPool::install::_{{closure}} (108,432 samples, 21.97%)</title><rect x="29.3714%" y="213" width="21.9731%" height="15" fill="rgb(219,138,53)" fg:x="144941" fg:w="108432"/><text x="29.6214%" y="223.50">fekan`rayon_core::thread_pool::Thre..</text></g><g><title>fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (210,055 samples, 42.57%)</title><rect x="8.7960%" y="229" width="42.5663%" height="15" fill="rgb(211,51,23)" fg:x="43406" fg:w="210055"/><text x="9.0460%" y="239.50">fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::exec..</text></g><g><title>fekan`crossbeam_deque::deque::Injector&lt;T&gt;::steal (85 samples, 0.02%)</title><rect x="51.3633%" y="229" width="0.0172%" height="15" fill="rgb(247,221,28)" fg:x="253466" fg:w="85"/><text x="51.6133%" y="239.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (104 samples, 0.02%)</title><rect x="51.3805%" y="229" width="0.0211%" height="15" fill="rgb(251,222,45)" fg:x="253551" fg:w="104"/><text x="51.6305%" y="239.50"></text></g><g><title>fekan`crossbeam_deque::deque::Worker&lt;T&gt;::pop (411 samples, 0.08%)</title><rect x="51.4016%" y="229" width="0.0833%" height="15" fill="rgb(217,162,53)" fg:x="253655" fg:w="411"/><text x="51.6516%" y="239.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::try_advance (494 samples, 0.10%)</title><rect x="54.0487%" y="149" width="0.1001%" height="15" fill="rgb(229,93,14)" fg:x="266718" fg:w="494"/><text x="54.2987%" y="159.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::collect (1,536 samples, 0.31%)</title><rect x="54.0451%" y="165" width="0.3113%" height="15" fill="rgb(209,67,49)" fg:x="266700" fg:w="1536"/><text x="54.2951%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (992 samples, 0.20%)</title><rect x="54.1553%" y="149" width="0.2010%" height="15" fill="rgb(213,87,29)" fg:x="267244" fg:w="992"/><text x="54.4053%" y="159.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (4,257 samples, 0.86%)</title><rect x="53.4981%" y="181" width="0.8627%" height="15" fill="rgb(205,151,52)" fg:x="264001" fg:w="4257"/><text x="53.7481%" y="191.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (8,928 samples, 1.81%)</title><rect x="52.6661%" y="197" width="1.8092%" height="15" fill="rgb(253,215,39)" fg:x="259895" fg:w="8928"/><text x="52.9161%" y="207.50">f..</text></g><g><title>libdyld.dylib`tlv_get_addr (528 samples, 0.11%)</title><rect x="54.3683%" y="181" width="0.1070%" height="15" fill="rgb(221,220,41)" fg:x="268295" fg:w="528"/><text x="54.6183%" y="191.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (820 samples, 0.17%)</title><rect x="54.4753%" y="197" width="0.1662%" height="15" fill="rgb(218,133,21)" fg:x="268823" fg:w="820"/><text x="54.7253%" y="207.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (15,819 samples, 3.21%)</title><rect x="51.6101%" y="213" width="3.2056%" height="15" fill="rgb(221,193,43)" fg:x="254684" fg:w="15819"/><text x="51.8601%" y="223.50">fek..</text></g><g><title>libdyld.dylib`tlv_get_addr (860 samples, 0.17%)</title><rect x="54.6415%" y="197" width="0.1743%" height="15" fill="rgb(240,128,52)" fg:x="269643" fg:w="860"/><text x="54.8915%" y="207.50"></text></g><g><title>fekan`crossbeam_deque::deque::Injector&lt;T&gt;::steal (399 samples, 0.08%)</title><rect x="54.8157%" y="213" width="0.0809%" height="15" fill="rgb(253,114,12)" fg:x="270503" fg:w="399"/><text x="55.0657%" y="223.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::try_advance (87 samples, 0.02%)</title><rect x="55.2386%" y="165" width="0.0176%" height="15" fill="rgb(215,223,47)" fg:x="272590" fg:w="87"/><text x="55.4886%" y="175.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::collect (216 samples, 0.04%)</title><rect x="55.2374%" y="181" width="0.0438%" height="15" fill="rgb(248,225,23)" fg:x="272584" fg:w="216"/><text x="55.4874%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (120 samples, 0.02%)</title><rect x="55.2569%" y="165" width="0.0243%" height="15" fill="rgb(250,108,0)" fg:x="272680" fg:w="120"/><text x="55.5069%" y="175.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (623 samples, 0.13%)</title><rect x="55.1566%" y="197" width="0.1262%" height="15" fill="rgb(228,208,7)" fg:x="272185" fg:w="623"/><text x="55.4066%" y="207.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1,986 samples, 0.40%)</title><rect x="54.8966%" y="213" width="0.4025%" height="15" fill="rgb(244,45,10)" fg:x="270902" fg:w="1986"/><text x="55.1466%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (72 samples, 0.01%)</title><rect x="55.2844%" y="197" width="0.0146%" height="15" fill="rgb(207,125,25)" fg:x="272816" fg:w="72"/><text x="55.5344%" y="207.50"></text></g><g><title>fekan`crossbeam_deque::deque::Worker&lt;T&gt;::pop (441 samples, 0.09%)</title><rect x="55.2990%" y="213" width="0.0894%" height="15" fill="rgb(210,195,18)" fg:x="272888" fg:w="441"/><text x="55.5490%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (179 samples, 0.04%)</title><rect x="55.3969%" y="213" width="0.0363%" height="15" fill="rgb(249,80,12)" fg:x="273371" fg:w="179"/><text x="55.6469%" y="223.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (19,482 samples, 3.95%)</title><rect x="51.4857%" y="229" width="3.9479%" height="15" fill="rgb(221,65,9)" fg:x="254070" fg:w="19482"/><text x="51.7357%" y="239.50">feka..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (7,939 samples, 1.61%)</title><rect x="55.4804%" y="197" width="1.6088%" height="15" fill="rgb(235,49,36)" fg:x="273783" fg:w="7939"/><text x="55.7304%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (357 samples, 0.07%)</title><rect x="57.1070%" y="181" width="0.0723%" height="15" fill="rgb(225,32,20)" fg:x="281810" fg:w="357"/><text x="57.3570%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (139 samples, 0.03%)</title><rect x="57.1794%" y="165" width="0.0282%" height="15" fill="rgb(215,141,46)" fg:x="282167" fg:w="139"/><text x="57.4294%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (140 samples, 0.03%)</title><rect x="57.1794%" y="181" width="0.0284%" height="15" fill="rgb(250,160,47)" fg:x="282167" fg:w="140"/><text x="57.4294%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (654 samples, 0.13%)</title><rect x="57.0896%" y="197" width="0.1325%" height="15" fill="rgb(216,222,40)" fg:x="281724" fg:w="654"/><text x="57.3396%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (55 samples, 0.01%)</title><rect x="57.2110%" y="181" width="0.0111%" height="15" fill="rgb(234,217,39)" fg:x="282323" fg:w="55"/><text x="57.4610%" y="191.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (8,682 samples, 1.76%)</title><rect x="55.4646%" y="213" width="1.7594%" height="15" fill="rgb(207,178,40)" fg:x="273705" fg:w="8682"/><text x="55.7146%" y="223.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::sleep (8,892 samples, 1.80%)</title><rect x="55.4336%" y="229" width="1.8019%" height="15" fill="rgb(221,136,13)" fg:x="273552" fg:w="8892"/><text x="55.6836%" y="239.50">f..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (3,331 samples, 0.68%)</title><rect x="57.2560%" y="197" width="0.6750%" height="15" fill="rgb(249,199,10)" fg:x="282545" fg:w="3331"/><text x="57.5060%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (600 samples, 0.12%)</title><rect x="57.9344%" y="181" width="0.1216%" height="15" fill="rgb(249,222,13)" fg:x="285893" fg:w="600"/><text x="58.1844%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (608 samples, 0.12%)</title><rect x="57.9334%" y="197" width="0.1232%" height="15" fill="rgb(244,185,38)" fg:x="285888" fg:w="608"/><text x="58.1834%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (405 samples, 0.08%)</title><rect x="58.0568%" y="197" width="0.0821%" height="15" fill="rgb(236,202,9)" fg:x="286497" fg:w="405"/><text x="58.3068%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (404 samples, 0.08%)</title><rect x="58.0570%" y="181" width="0.0819%" height="15" fill="rgb(250,229,37)" fg:x="286498" fg:w="404"/><text x="58.3070%" y="191.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (4,513 samples, 0.91%)</title><rect x="57.2424%" y="213" width="0.9145%" height="15" fill="rgb(206,174,23)" fg:x="282478" fg:w="4513"/><text x="57.4924%" y="223.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (4,565 samples, 0.93%)</title><rect x="57.2355%" y="229" width="0.9251%" height="15" fill="rgb(211,33,43)" fg:x="282444" fg:w="4565"/><text x="57.4855%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (205,908 samples, 41.73%)</title><rect x="58.1687%" y="229" width="41.7260%" height="15" fill="rgb(245,58,50)" fg:x="287049" fg:w="205908"/><text x="58.4187%" y="239.50">libsystem_kernel.dylib`swtch_pri</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (88 samples, 0.02%)</title><rect x="99.9021%" y="229" width="0.0178%" height="15" fill="rgb(244,68,36)" fg:x="492994" fg:w="88"/><text x="100.1521%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (88 samples, 0.02%)</title><rect x="99.9021%" y="213" width="0.0178%" height="15" fill="rgb(232,229,15)" fg:x="492994" fg:w="88"/><text x="100.1521%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (319 samples, 0.06%)</title><rect x="99.9202%" y="229" width="0.0646%" height="15" fill="rgb(254,30,23)" fg:x="493083" fg:w="319"/><text x="100.1702%" y="239.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (451,054 samples, 91.40%)</title><rect x="8.5832%" y="245" width="91.4032%" height="15" fill="rgb(235,160,14)" fg:x="42356" fg:w="451054"/><text x="8.8332%" y="255.50">fekan`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (451,361 samples, 91.47%)</title><rect x="8.5343%" y="309" width="91.4655%" height="15" fill="rgb(212,155,44)" fg:x="42115" fg:w="451361"/><text x="8.7843%" y="319.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (451,361 samples, 91.47%)</title><rect x="8.5343%" y="293" width="91.4655%" height="15" fill="rgb(226,2,50)" fg:x="42115" fg:w="451361"/><text x="8.7843%" y="303.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (451,361 samples, 91.47%)</title><rect x="8.5343%" y="277" width="91.4655%" height="15" fill="rgb(234,177,6)" fg:x="42115" fg:w="451361"/><text x="8.7843%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`rayon_core::registry::ThreadBuilder::run (451,361 samples, 91.47%)</title><rect x="8.5343%" y="261" width="91.4655%" height="15" fill="rgb(217,24,9)" fg:x="42115" fg:w="451361"/><text x="8.7843%" y="271.50">fekan`rayon_core::registry::ThreadBuilder::run</text></g><g><title>all (493,477 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="493477"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (451,362 samples, 91.47%)</title><rect x="8.5343%" y="341" width="91.4657%" height="15" fill="rgb(239,221,27)" fg:x="42115" fg:w="451362"/><text x="8.7843%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (451,362 samples, 91.47%)</title><rect x="8.5343%" y="325" width="91.4657%" height="15" fill="rgb(222,198,25)" fg:x="42115" fg:w="451362"/><text x="8.7843%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g></svg></svg>