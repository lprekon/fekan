<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="473761"><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (85 samples, 0.02%)</title><rect x="0.0101%" y="85" width="0.0179%" height="15" fill="rgb(227,0,7)" fg:x="48" fg:w="85"/><text x="0.2601%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.02%)</title><rect x="0.0103%" y="69" width="0.0177%" height="15" fill="rgb(217,0,24)" fg:x="49" fg:w="84"/><text x="0.2603%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (84 samples, 0.02%)</title><rect x="0.0103%" y="53" width="0.0177%" height="15" fill="rgb(221,193,54)" fg:x="49" fg:w="84"/><text x="0.2603%" y="63.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,453 samples, 0.31%)</title><rect x="0.0097%" y="101" width="0.3067%" height="15" fill="rgb(248,212,6)" fg:x="46" fg:w="1453"/><text x="0.2597%" y="111.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,366 samples, 0.29%)</title><rect x="0.0281%" y="85" width="0.2883%" height="15" fill="rgb(208,68,35)" fg:x="133" fg:w="1366"/><text x="0.2781%" y="95.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,365 samples, 0.29%)</title><rect x="0.0283%" y="69" width="0.2881%" height="15" fill="rgb(232,128,0)" fg:x="134" fg:w="1365"/><text x="0.2783%" y="79.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,357 samples, 0.29%)</title><rect x="0.0300%" y="53" width="0.2864%" height="15" fill="rgb(207,160,47)" fg:x="142" fg:w="1357"/><text x="0.2800%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (1,344 samples, 0.28%)</title><rect x="0.0327%" y="37" width="0.2837%" height="15" fill="rgb(228,23,34)" fg:x="155" fg:w="1344"/><text x="0.2827%" y="47.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 0.02%)</title><rect x="0.3164%" y="101" width="0.0245%" height="15" fill="rgb(218,30,26)" fg:x="1499" fg:w="116"/><text x="0.5664%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (115 samples, 0.02%)</title><rect x="0.3166%" y="85" width="0.0243%" height="15" fill="rgb(220,122,19)" fg:x="1500" fg:w="115"/><text x="0.5666%" y="95.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,574 samples, 0.33%)</title><rect x="0.0091%" y="117" width="0.3322%" height="15" fill="rgb(250,228,42)" fg:x="43" fg:w="1574"/><text x="0.2591%" y="127.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,577 samples, 0.33%)</title><rect x="0.0087%" y="133" width="0.3329%" height="15" fill="rgb(240,193,28)" fg:x="41" fg:w="1577"/><text x="0.2587%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,675 samples, 0.35%)</title><rect x="0.0084%" y="149" width="0.3536%" height="15" fill="rgb(216,20,37)" fg:x="40" fg:w="1675"/><text x="0.2584%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (96 samples, 0.02%)</title><rect x="0.3417%" y="133" width="0.0203%" height="15" fill="rgb(206,188,39)" fg:x="1619" fg:w="96"/><text x="0.5917%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.01%)</title><rect x="0.3624%" y="133" width="0.0148%" height="15" fill="rgb(217,207,13)" fg:x="1717" fg:w="70"/><text x="0.6124%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (70 samples, 0.01%)</title><rect x="0.3624%" y="117" width="0.0148%" height="15" fill="rgb(231,73,38)" fg:x="1717" fg:w="70"/><text x="0.6124%" y="127.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (785 samples, 0.17%)</title><rect x="0.3620%" y="149" width="0.1657%" height="15" fill="rgb(225,20,46)" fg:x="1715" fg:w="785"/><text x="0.6120%" y="159.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (687 samples, 0.15%)</title><rect x="0.3827%" y="133" width="0.1450%" height="15" fill="rgb(210,31,41)" fg:x="1813" fg:w="687"/><text x="0.6327%" y="143.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (686 samples, 0.14%)</title><rect x="0.3829%" y="117" width="0.1448%" height="15" fill="rgb(221,200,47)" fg:x="1814" fg:w="686"/><text x="0.6329%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (682 samples, 0.14%)</title><rect x="0.3837%" y="101" width="0.1440%" height="15" fill="rgb(226,26,5)" fg:x="1818" fg:w="682"/><text x="0.6337%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (675 samples, 0.14%)</title><rect x="0.3852%" y="85" width="0.1425%" height="15" fill="rgb(249,33,26)" fg:x="1825" fg:w="675"/><text x="0.6352%" y="95.50"></text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (632 samples, 0.13%)</title><rect x="0.5277%" y="149" width="0.1334%" height="15" fill="rgb(235,183,28)" fg:x="2500" fg:w="632"/><text x="0.7777%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (630 samples, 0.13%)</title><rect x="0.5281%" y="133" width="0.1330%" height="15" fill="rgb(221,5,38)" fg:x="2502" fg:w="630"/><text x="0.7781%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (625 samples, 0.13%)</title><rect x="0.5292%" y="117" width="0.1319%" height="15" fill="rgb(247,18,42)" fg:x="2507" fg:w="625"/><text x="0.7792%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 0.03%)</title><rect x="0.6611%" y="149" width="0.0293%" height="15" fill="rgb(241,131,45)" fg:x="3132" fg:w="139"/><text x="0.9111%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (138 samples, 0.03%)</title><rect x="0.6613%" y="133" width="0.0291%" height="15" fill="rgb(249,31,29)" fg:x="3133" fg:w="138"/><text x="0.9113%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,309 samples, 0.70%)</title><rect x="0.0084%" y="165" width="0.6985%" height="15" fill="rgb(225,111,53)" fg:x="40" fg:w="3309"/><text x="0.2584%" y="175.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (78 samples, 0.02%)</title><rect x="0.6904%" y="149" width="0.0165%" height="15" fill="rgb(238,160,17)" fg:x="3271" fg:w="78"/><text x="0.9404%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (77 samples, 0.02%)</title><rect x="0.6906%" y="133" width="0.0163%" height="15" fill="rgb(214,148,48)" fg:x="3272" fg:w="77"/><text x="0.9406%" y="143.50"></text></g><g><title>fekan`fekan::load_regression_data (3,446 samples, 0.73%)</title><rect x="0.0074%" y="245" width="0.7274%" height="15" fill="rgb(232,36,49)" fg:x="35" fg:w="3446"/><text x="0.2574%" y="255.50"></text></g><g><title>fekan`serde_json::de::from_trait (3,444 samples, 0.73%)</title><rect x="0.0078%" y="229" width="0.7269%" height="15" fill="rgb(209,103,24)" fg:x="37" fg:w="3444"/><text x="0.2578%" y="239.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,444 samples, 0.73%)</title><rect x="0.0078%" y="213" width="0.7269%" height="15" fill="rgb(229,88,8)" fg:x="37" fg:w="3444"/><text x="0.2578%" y="223.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,444 samples, 0.73%)</title><rect x="0.0078%" y="197" width="0.7269%" height="15" fill="rgb(213,181,19)" fg:x="37" fg:w="3444"/><text x="0.2578%" y="207.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,444 samples, 0.73%)</title><rect x="0.0078%" y="181" width="0.7269%" height="15" fill="rgb(254,191,54)" fg:x="37" fg:w="3444"/><text x="0.2578%" y="191.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (132 samples, 0.03%)</title><rect x="0.7069%" y="165" width="0.0279%" height="15" fill="rgb(241,83,37)" fg:x="3349" fg:w="132"/><text x="0.9569%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (130 samples, 0.03%)</title><rect x="0.7073%" y="149" width="0.0274%" height="15" fill="rgb(233,36,39)" fg:x="3351" fg:w="130"/><text x="0.9573%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (41,320 samples, 8.72%)</title><rect x="0.7440%" y="197" width="8.7217%" height="15" fill="rgb(226,3,54)" fg:x="3525" fg:w="41320"/><text x="0.9940%" y="207.50">fekan`fekan:..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (35,591 samples, 7.51%)</title><rect x="1.9533%" y="181" width="7.5124%" height="15" fill="rgb(245,192,40)" fg:x="9254" fg:w="35591"/><text x="2.2033%" y="191.50">fekan`feka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (7,714 samples, 1.63%)</title><rect x="9.4657%" y="197" width="1.6282%" height="15" fill="rgb(238,167,29)" fg:x="44845" fg:w="7714"/><text x="9.7157%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (49,069 samples, 10.36%)</title><rect x="0.7396%" y="213" width="10.3573%" height="15" fill="rgb(232,182,51)" fg:x="3504" fg:w="49069"/><text x="0.9896%" y="223.50">fekan`fekan::ka..</text></g><g><title>fekan`fekan::kan::Kan::backward (49,099 samples, 10.36%)</title><rect x="0.7390%" y="229" width="10.3637%" height="15" fill="rgb(231,60,39)" fg:x="3501" fg:w="49099"/><text x="0.9890%" y="239.50">fekan`fekan::ka..</text></g><g><title>fekan`&lt;std::sys::sync::mutex::pthread::AllocatedMutex as std::sys_common::lazy_box::LazyInit&gt;::destroy (67 samples, 0.01%)</title><rect x="11.1273%" y="181" width="0.0141%" height="15" fill="rgb(208,69,12)" fg:x="52717" fg:w="67"/><text x="11.3773%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (94 samples, 0.02%)</title><rect x="11.1444%" y="181" width="0.0198%" height="15" fill="rgb(235,93,37)" fg:x="52798" fg:w="94"/><text x="11.3944%" y="191.50"></text></g><g><title>fekan`alloc::sync::Arc&lt;T,A&gt;::drop_slow (230 samples, 0.05%)</title><rect x="11.1261%" y="197" width="0.0485%" height="15" fill="rgb(213,116,39)" fg:x="52711" fg:w="230"/><text x="11.3761%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3,465 samples, 0.73%)</title><rect x="11.1886%" y="149" width="0.7314%" height="15" fill="rgb(222,207,29)" fg:x="53007" fg:w="3465"/><text x="11.4386%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (126 samples, 0.03%)</title><rect x="11.9242%" y="133" width="0.0266%" height="15" fill="rgb(206,96,30)" fg:x="56492" fg:w="126"/><text x="12.1742%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (109 samples, 0.02%)</title><rect x="11.9516%" y="117" width="0.0230%" height="15" fill="rgb(218,138,4)" fg:x="56622" fg:w="109"/><text x="12.2016%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (114 samples, 0.02%)</title><rect x="11.9508%" y="133" width="0.0241%" height="15" fill="rgb(250,191,14)" fg:x="56618" fg:w="114"/><text x="12.2008%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (272 samples, 0.06%)</title><rect x="11.9199%" y="149" width="0.0574%" height="15" fill="rgb(239,60,40)" fg:x="56472" fg:w="272"/><text x="12.1699%" y="159.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (3,766 samples, 0.79%)</title><rect x="11.1831%" y="165" width="0.7949%" height="15" fill="rgb(206,27,48)" fg:x="52981" fg:w="3766"/><text x="11.4331%" y="175.50"></text></g><g><title>fekan`rayon_core::latch::LockLatch::wait_and_reset (3,786 samples, 0.80%)</title><rect x="11.1797%" y="181" width="0.7991%" height="15" fill="rgb(225,35,8)" fg:x="52965" fg:w="3786"/><text x="11.4297%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (184 samples, 0.04%)</title><rect x="11.9837%" y="149" width="0.0388%" height="15" fill="rgb(250,213,24)" fg:x="56774" fg:w="184"/><text x="12.2337%" y="159.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (188 samples, 0.04%)</title><rect x="11.9835%" y="165" width="0.0397%" height="15" fill="rgb(247,123,22)" fg:x="56773" fg:w="188"/><text x="12.2335%" y="175.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (191 samples, 0.04%)</title><rect x="11.9833%" y="181" width="0.0403%" height="15" fill="rgb(231,138,38)" fg:x="56772" fg:w="191"/><text x="12.2333%" y="191.50"></text></g><g><title>fekan`rayon_core::registry::Registry::in_worker_cold (4,024 samples, 0.85%)</title><rect x="11.1748%" y="197" width="0.8494%" height="15" fill="rgb(231,145,46)" fg:x="52942" fg:w="4024"/><text x="11.4248%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (71 samples, 0.01%)</title><rect x="12.0371%" y="197" width="0.0150%" height="15" fill="rgb(251,118,11)" fg:x="57027" fg:w="71"/><text x="12.2871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (112 samples, 0.02%)</title><rect x="12.0525%" y="197" width="0.0236%" height="15" fill="rgb(217,147,25)" fg:x="57100" fg:w="112"/><text x="12.3025%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward_concurrent (4,574 samples, 0.97%)</title><rect x="11.1155%" y="213" width="0.9655%" height="15" fill="rgb(247,81,37)" fg:x="52661" fg:w="4574"/><text x="11.3655%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::forward_concurrent (4,750 samples, 1.00%)</title><rect x="11.1045%" y="229" width="1.0026%" height="15" fill="rgb(209,12,38)" fg:x="52609" fg:w="4750"/><text x="11.3545%" y="239.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (188 samples, 0.04%)</title><rect x="12.5912%" y="197" width="0.0397%" height="15" fill="rgb(227,1,9)" fg:x="59652" fg:w="188"/><text x="12.8412%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (66 samples, 0.01%)</title><rect x="12.7167%" y="85" width="0.0139%" height="15" fill="rgb(248,47,43)" fg:x="60247" fg:w="66"/><text x="12.9667%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (117 samples, 0.02%)</title><rect x="12.7070%" y="101" width="0.0247%" height="15" fill="rgb(221,10,30)" fg:x="60201" fg:w="117"/><text x="12.9570%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (179 samples, 0.04%)</title><rect x="12.6954%" y="117" width="0.0378%" height="15" fill="rgb(210,229,1)" fg:x="60146" fg:w="179"/><text x="12.9454%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (235 samples, 0.05%)</title><rect x="12.6866%" y="133" width="0.0496%" height="15" fill="rgb(222,148,37)" fg:x="60104" fg:w="235"/><text x="12.9366%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (299 samples, 0.06%)</title><rect x="12.6750%" y="149" width="0.0631%" height="15" fill="rgb(234,67,33)" fg:x="60049" fg:w="299"/><text x="12.9250%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (393 samples, 0.08%)</title><rect x="12.6583%" y="165" width="0.0830%" height="15" fill="rgb(247,98,35)" fg:x="59970" fg:w="393"/><text x="12.9083%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (549 samples, 0.12%)</title><rect x="12.6308%" y="181" width="0.1159%" height="15" fill="rgb(247,138,52)" fg:x="59840" fg:w="549"/><text x="12.8808%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (559 samples, 0.12%)</title><rect x="12.6308%" y="197" width="0.1180%" height="15" fill="rgb(213,79,30)" fg:x="59840" fg:w="559"/><text x="12.8808%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (512 samples, 0.11%)</title><rect x="12.7488%" y="197" width="0.1081%" height="15" fill="rgb(246,177,23)" fg:x="60399" fg:w="512"/><text x="12.9988%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (458 samples, 0.10%)</title><rect x="12.7602%" y="181" width="0.0967%" height="15" fill="rgb(230,62,27)" fg:x="60453" fg:w="458"/><text x="13.0102%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (332 samples, 0.07%)</title><rect x="12.7868%" y="165" width="0.0701%" height="15" fill="rgb(216,154,8)" fg:x="60579" fg:w="332"/><text x="13.0368%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (68 samples, 0.01%)</title><rect x="12.8426%" y="149" width="0.0144%" height="15" fill="rgb(244,35,45)" fg:x="60843" fg:w="68"/><text x="13.0926%" y="159.50"></text></g><g><title>fekan`nalgebra::linalg::householder::clear_column_unchecked (1,600 samples, 0.34%)</title><rect x="12.9584%" y="165" width="0.3377%" height="15" fill="rgb(251,115,12)" fg:x="61392" fg:w="1600"/><text x="13.2084%" y="175.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_with_sign (1,595 samples, 0.34%)</title><rect x="12.9595%" y="149" width="0.3367%" height="15" fill="rgb(240,54,50)" fg:x="61397" fg:w="1595"/><text x="13.2095%" y="159.50"></text></g><g><title>fekan`nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::new (3,379 samples, 0.71%)</title><rect x="12.9584%" y="181" width="0.7132%" height="15" fill="rgb(233,84,52)" fg:x="61392" fg:w="3379"/><text x="13.2084%" y="191.50"></text></g><g><title>fekan`nalgebra::linalg::householder::clear_row_unchecked (1,779 samples, 0.38%)</title><rect x="13.2962%" y="165" width="0.3755%" height="15" fill="rgb(207,117,47)" fg:x="62992" fg:w="1779"/><text x="13.5462%" y="175.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_rows_with_sign (1,760 samples, 0.37%)</title><rect x="13.3002%" y="149" width="0.3715%" height="15" fill="rgb(249,43,39)" fg:x="63011" fg:w="1760"/><text x="13.5502%" y="159.50"></text></g><g><title>fekan`nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::u (1,618 samples, 0.34%)</title><rect x="13.6717%" y="181" width="0.3415%" height="15" fill="rgb(209,38,44)" fg:x="64771" fg:w="1618"/><text x="13.9217%" y="191.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_with_sign (1,616 samples, 0.34%)</title><rect x="13.6721%" y="165" width="0.3411%" height="15" fill="rgb(236,212,23)" fg:x="64773" fg:w="1616"/><text x="13.9221%" y="175.50"></text></g><g><title>fekan`nalgebra::linalg::bidiagonal::Bidiagonal&lt;T,R,C&gt;::v_t (1,763 samples, 0.37%)</title><rect x="14.0132%" y="181" width="0.3721%" height="15" fill="rgb(242,79,21)" fg:x="66389" fg:w="1763"/><text x="14.2632%" y="191.50"></text></g><g><title>fekan`nalgebra::geometry::reflection::Reflection&lt;T,D,S&gt;::reflect_rows_with_sign (1,748 samples, 0.37%)</title><rect x="14.0164%" y="165" width="0.3690%" height="15" fill="rgb(211,96,35)" fg:x="66404" fg:w="1748"/><text x="14.2664%" y="175.50"></text></g><g><title>fekan`nalgebra::linalg::svd::SVD&lt;T,R,C&gt;::new (7,288 samples, 1.54%)</title><rect x="12.8569%" y="197" width="1.5383%" height="15" fill="rgb(253,215,40)" fg:x="60911" fg:w="7288"/><text x="13.1069%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::set_knot_length (10,867 samples, 2.29%)</title><rect x="12.1072%" y="213" width="2.2938%" height="15" fill="rgb(211,81,21)" fg:x="57359" fg:w="10867"/><text x="12.3572%" y="223.50">f..</text></g><g><title>fekan`fekan::kan::Kan::set_knot_length (10,884 samples, 2.30%)</title><rect x="12.1072%" y="229" width="2.2974%" height="15" fill="rgb(208,190,38)" fg:x="57359" fg:w="10884"/><text x="12.3572%" y="239.50">f..</text></g><g><title>fekan`fekan::kan::Kan::update (535 samples, 0.11%)</title><rect x="14.4045%" y="229" width="0.1129%" height="15" fill="rgb(235,213,38)" fg:x="68243" fg:w="535"/><text x="14.6545%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::update_knots_from_samples (50 samples, 0.01%)</title><rect x="14.5261%" y="197" width="0.0106%" height="15" fill="rgb(237,122,38)" fg:x="68819" fg:w="50"/><text x="14.7761%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (271 samples, 0.06%)</title><rect x="14.5174%" y="213" width="0.0572%" height="15" fill="rgb(244,218,35)" fg:x="68778" fg:w="271"/><text x="14.7674%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (179 samples, 0.04%)</title><rect x="14.5369%" y="197" width="0.0378%" height="15" fill="rgb(240,68,47)" fg:x="68870" fg:w="179"/><text x="14.7869%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (272 samples, 0.06%)</title><rect x="14.5174%" y="229" width="0.0574%" height="15" fill="rgb(210,16,53)" fg:x="68778" fg:w="272"/><text x="14.7674%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (16,847 samples, 3.56%)</title><rect x="14.6059%" y="181" width="3.5560%" height="15" fill="rgb(235,124,12)" fg:x="69197" fg:w="16847"/><text x="14.8559%" y="191.50">feka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (14,981 samples, 3.16%)</title><rect x="14.9998%" y="165" width="3.1621%" height="15" fill="rgb(224,169,11)" fg:x="71063" fg:w="14981"/><text x="15.2498%" y="175.50">fek..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (11,024 samples, 2.33%)</title><rect x="15.8350%" y="149" width="2.3269%" height="15" fill="rgb(250,166,2)" fg:x="75020" fg:w="11024"/><text x="16.0850%" y="159.50">f..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (2,811 samples, 0.59%)</title><rect x="17.5686%" y="133" width="0.5933%" height="15" fill="rgb(242,216,29)" fg:x="83233" fg:w="2811"/><text x="17.8186%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (16,984 samples, 3.58%)</title><rect x="14.5776%" y="197" width="3.5849%" height="15" fill="rgb(230,116,27)" fg:x="69063" fg:w="16984"/><text x="14.8276%" y="207.50">feka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (777 samples, 0.16%)</title><rect x="18.1625%" y="197" width="0.1640%" height="15" fill="rgb(228,99,48)" fg:x="86047" fg:w="777"/><text x="18.4125%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (17,762 samples, 3.75%)</title><rect x="14.5776%" y="213" width="3.7491%" height="15" fill="rgb(253,11,6)" fg:x="69063" fg:w="17762"/><text x="14.8276%" y="223.50">feka..</text></g><g><title>fekan`fekan::validate_model (17,789 samples, 3.75%)</title><rect x="14.5772%" y="229" width="3.7548%" height="15" fill="rgb(247,143,39)" fg:x="69061" fg:w="17789"/><text x="14.8272%" y="239.50">feka..</text></g><g><title>libsystem_kernel.dylib`__ioctl (72 samples, 0.02%)</title><rect x="18.3441%" y="133" width="0.0152%" height="15" fill="rgb(236,97,10)" fg:x="86907" fg:w="72"/><text x="18.5941%" y="143.50"></text></g><g><title>libsystem_c.dylib`isatty (74 samples, 0.02%)</title><rect x="18.3441%" y="149" width="0.0156%" height="15" fill="rgb(233,208,19)" fg:x="86907" fg:w="74"/><text x="18.5941%" y="159.50"></text></g><g><title>fekan`console::unix_term::terminal_size (123 samples, 0.03%)</title><rect x="18.3434%" y="165" width="0.0260%" height="15" fill="rgb(216,164,2)" fg:x="86904" fg:w="123"/><text x="18.5934%" y="175.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (125 samples, 0.03%)</title><rect x="18.3432%" y="181" width="0.0264%" height="15" fill="rgb(220,129,5)" fg:x="86903" fg:w="125"/><text x="18.5932%" y="191.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (173 samples, 0.04%)</title><rect x="18.3377%" y="197" width="0.0365%" height="15" fill="rgb(242,17,10)" fg:x="86877" fg:w="173"/><text x="18.5877%" y="207.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (183 samples, 0.04%)</title><rect x="18.3371%" y="229" width="0.0386%" height="15" fill="rgb(242,107,0)" fg:x="86874" fg:w="183"/><text x="18.5871%" y="239.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (183 samples, 0.04%)</title><rect x="18.3371%" y="213" width="0.0386%" height="15" fill="rgb(251,28,31)" fg:x="86874" fg:w="183"/><text x="18.5871%" y="223.50"></text></g><g><title>fekan`fekan::train_model (83,740 samples, 17.68%)</title><rect x="0.7348%" y="245" width="17.6756%" height="15" fill="rgb(233,223,10)" fg:x="3481" fg:w="83740"/><text x="0.9848%" y="255.50">fekan`fekan::train_model</text></g><g><title>libsystem_platform.dylib`_platform_memset (141 samples, 0.03%)</title><rect x="18.3806%" y="229" width="0.0298%" height="15" fill="rgb(215,21,27)" fg:x="87080" fg:w="141"/><text x="18.6306%" y="239.50"></text></g><g><title>fekan`fekan::main (87,236 samples, 18.41%)</title><rect x="0.0000%" y="261" width="18.4135%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="87236"/><text x="0.2500%" y="271.50">fekan`fekan::main</text></g><g><title>dyld`start (87,237 samples, 18.41%)</title><rect x="0.0000%" y="341" width="18.4137%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="87237"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>fekan`main (87,237 samples, 18.41%)</title><rect x="0.0000%" y="325" width="18.4137%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="87237"/><text x="0.2500%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (87,237 samples, 18.41%)</title><rect x="0.0000%" y="309" width="18.4137%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="87237"/><text x="0.2500%" y="319.50">fekan`std::rt::lang_start_int..</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (87,237 samples, 18.41%)</title><rect x="0.0000%" y="293" width="18.4137%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="87237"/><text x="0.2500%" y="303.50">fekan`std::rt::lang_start::_{..</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (87,237 samples, 18.41%)</title><rect x="0.0000%" y="277" width="18.4137%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="87237"/><text x="0.2500%" y="287.50">fekan`std::sys::backtrace::__..</text></g><g><title>fekan`DYLD-STUB$$sched_yield (50 samples, 0.01%)</title><rect x="18.4162%" y="245" width="0.0106%" height="15" fill="rgb(223,113,26)" fg:x="87249" fg:w="50"/><text x="18.6662%" y="255.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (117 samples, 0.02%)</title><rect x="18.4276%" y="245" width="0.0247%" height="15" fill="rgb(206,192,2)" fg:x="87303" fg:w="117"/><text x="18.6776%" y="255.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (153 samples, 0.03%)</title><rect x="18.5900%" y="229" width="0.0323%" height="15" fill="rgb(241,108,4)" fg:x="88072" fg:w="153"/><text x="18.8400%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (2,045 samples, 0.43%)</title><rect x="18.6417%" y="197" width="0.4317%" height="15" fill="rgb(247,173,49)" fg:x="88317" fg:w="2045"/><text x="18.8917%" y="207.50"></text></g><g><title>fekan`&lt;rayon_core::latch::LatchRef&lt;L&gt; as rayon_core::latch::Latch&gt;::set (2,080 samples, 0.44%)</title><rect x="18.6406%" y="213" width="0.4390%" height="15" fill="rgb(224,114,35)" fg:x="88312" fg:w="2080"/><text x="18.8906%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (5,233 samples, 1.10%)</title><rect x="26.5408%" y="149" width="1.1046%" height="15" fill="rgb(245,159,27)" fg:x="125740" fg:w="5233"/><text x="26.7908%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (2,757 samples, 0.58%)</title><rect x="27.0634%" y="133" width="0.5819%" height="15" fill="rgb(245,172,44)" fg:x="128216" fg:w="2757"/><text x="27.3134%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (4,496 samples, 0.95%)</title><rect x="27.6454%" y="149" width="0.9490%" height="15" fill="rgb(236,23,11)" fg:x="130973" fg:w="4496"/><text x="27.8954%" y="159.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (117 samples, 0.02%)</title><rect x="29.4585%" y="133" width="0.0247%" height="15" fill="rgb(205,117,38)" fg:x="139563" fg:w="117"/><text x="29.7085%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (36,210 samples, 7.64%)</title><rect x="21.8403%" y="165" width="7.6431%" height="15" fill="rgb(237,72,25)" fg:x="103471" fg:w="36210"/><text x="22.0903%" y="175.50">fekan`feka..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,212 samples, 0.89%)</title><rect x="28.5944%" y="149" width="0.8891%" height="15" fill="rgb(244,70,9)" fg:x="135469" fg:w="4212"/><text x="28.8444%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (63,017 samples, 13.30%)</title><rect x="19.2044%" y="181" width="13.3014%" height="15" fill="rgb(217,125,39)" fg:x="90983" fg:w="63017"/><text x="19.4544%" y="191.50">fekan`fekan::kan_lay..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14,319 samples, 3.02%)</title><rect x="29.4834%" y="165" width="3.0224%" height="15" fill="rgb(235,36,10)" fg:x="139681" fg:w="14319"/><text x="29.7334%" y="175.50">fek..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,655 samples, 0.56%)</title><rect x="32.5058%" y="181" width="0.5604%" height="15" fill="rgb(251,123,47)" fg:x="154000" fg:w="2655"/><text x="32.7558%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (61 samples, 0.01%)</title><rect x="33.0711%" y="181" width="0.0129%" height="15" fill="rgb(221,13,13)" fg:x="156678" fg:w="61"/><text x="33.3211%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (59 samples, 0.01%)</title><rect x="33.0715%" y="165" width="0.0125%" height="15" fill="rgb(238,131,9)" fg:x="156680" fg:w="59"/><text x="33.3215%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (52 samples, 0.01%)</title><rect x="33.0958%" y="181" width="0.0110%" height="15" fill="rgb(211,50,8)" fg:x="156795" fg:w="52"/><text x="33.3458%" y="191.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (66,394 samples, 14.01%)</title><rect x="19.0980%" y="197" width="14.0142%" height="15" fill="rgb(245,182,24)" fg:x="90479" fg:w="66394"/><text x="19.3480%" y="207.50">fekan`core::ops::func..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (2,453 samples, 0.52%)</title><rect x="33.1123%" y="197" width="0.5178%" height="15" fill="rgb(242,14,37)" fg:x="156873" fg:w="2453"/><text x="33.3623%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (2,083 samples, 0.44%)</title><rect x="36.3846%" y="133" width="0.4397%" height="15" fill="rgb(246,228,12)" fg:x="172376" fg:w="2083"/><text x="36.6346%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (1,146 samples, 0.24%)</title><rect x="36.5824%" y="117" width="0.2419%" height="15" fill="rgb(213,55,15)" fg:x="173313" fg:w="1146"/><text x="36.8324%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (1,839 samples, 0.39%)</title><rect x="36.8243%" y="133" width="0.3882%" height="15" fill="rgb(209,9,3)" fg:x="174459" fg:w="1839"/><text x="37.0743%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (13,974 samples, 2.95%)</title><rect x="34.5982%" y="149" width="2.9496%" height="15" fill="rgb(230,59,30)" fg:x="163913" fg:w="13974"/><text x="34.8482%" y="159.50">fe..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,589 samples, 0.34%)</title><rect x="37.2124%" y="133" width="0.3354%" height="15" fill="rgb(209,121,21)" fg:x="176298" fg:w="1589"/><text x="37.4624%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (24,025 samples, 5.07%)</title><rect x="33.6818%" y="165" width="5.0711%" height="15" fill="rgb(220,109,13)" fg:x="159571" fg:w="24025"/><text x="33.9318%" y="175.50">fekan`..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,709 samples, 1.21%)</title><rect x="37.5478%" y="149" width="1.2050%" height="15" fill="rgb(232,18,1)" fg:x="177887" fg:w="5709"/><text x="37.7978%" y="159.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,082 samples, 0.23%)</title><rect x="38.7529%" y="165" width="0.2284%" height="15" fill="rgb(215,41,42)" fg:x="183596" fg:w="1082"/><text x="39.0029%" y="175.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (25,383 samples, 5.36%)</title><rect x="33.6393%" y="181" width="5.3578%" height="15" fill="rgb(224,123,36)" fg:x="159370" fg:w="25383"/><text x="33.8893%" y="191.50">fekan`c..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (922 samples, 0.19%)</title><rect x="38.9996%" y="181" width="0.1946%" height="15" fill="rgb(240,125,3)" fg:x="184765" fg:w="922"/><text x="39.2496%" y="191.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (110 samples, 0.02%)</title><rect x="39.2671%" y="117" width="0.0232%" height="15" fill="rgb(205,98,50)" fg:x="186032" fg:w="110"/><text x="39.5171%" y="127.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (231 samples, 0.05%)</title><rect x="39.2449%" y="133" width="0.0488%" height="15" fill="rgb(205,185,37)" fg:x="185927" fg:w="231"/><text x="39.4949%" y="143.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (384 samples, 0.08%)</title><rect x="39.2200%" y="149" width="0.0811%" height="15" fill="rgb(238,207,15)" fg:x="185809" fg:w="384"/><text x="39.4700%" y="159.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (66 samples, 0.01%)</title><rect x="39.3023%" y="149" width="0.0139%" height="15" fill="rgb(213,199,42)" fg:x="186199" fg:w="66"/><text x="39.5523%" y="159.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (503 samples, 0.11%)</title><rect x="39.2141%" y="165" width="0.1062%" height="15" fill="rgb(235,201,11)" fg:x="185781" fg:w="503"/><text x="39.4641%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (168 samples, 0.04%)</title><rect x="39.3209%" y="133" width="0.0355%" height="15" fill="rgb(207,46,11)" fg:x="186287" fg:w="168"/><text x="39.5709%" y="143.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (180 samples, 0.04%)</title><rect x="39.3209%" y="149" width="0.0380%" height="15" fill="rgb(241,35,35)" fg:x="186287" fg:w="180"/><text x="39.5709%" y="159.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::sleep (184 samples, 0.04%)</title><rect x="39.3202%" y="165" width="0.0388%" height="15" fill="rgb(243,32,47)" fg:x="186284" fg:w="184"/><text x="39.5702%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (411 samples, 0.09%)</title><rect x="39.3618%" y="133" width="0.0868%" height="15" fill="rgb(247,202,23)" fg:x="186481" fg:w="411"/><text x="39.6118%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (83 samples, 0.02%)</title><rect x="39.4488%" y="133" width="0.0175%" height="15" fill="rgb(219,102,11)" fg:x="186893" fg:w="83"/><text x="39.6988%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (83 samples, 0.02%)</title><rect x="39.4488%" y="117" width="0.0175%" height="15" fill="rgb(243,110,44)" fg:x="186893" fg:w="83"/><text x="39.6988%" y="127.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (537 samples, 0.11%)</title><rect x="39.3593%" y="149" width="0.1133%" height="15" fill="rgb(222,74,54)" fg:x="186469" fg:w="537"/><text x="39.6093%" y="159.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (539 samples, 0.11%)</title><rect x="39.3591%" y="165" width="0.1138%" height="15" fill="rgb(216,99,12)" fg:x="186468" fg:w="539"/><text x="39.6091%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (5,221 samples, 1.10%)</title><rect x="39.4733%" y="165" width="1.1020%" height="15" fill="rgb(226,22,26)" fg:x="187009" fg:w="5221"/><text x="39.7233%" y="175.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (6,512 samples, 1.37%)</title><rect x="39.2014%" y="181" width="1.3745%" height="15" fill="rgb(217,163,10)" fg:x="185721" fg:w="6512"/><text x="39.4514%" y="191.50"></text></g><g><title>fekan`rayon_core::join::join_context::_{{closure}} (32,915 samples, 6.95%)</title><rect x="33.6302%" y="197" width="6.9476%" height="15" fill="rgb(213,25,53)" fg:x="159327" fg:w="32915"/><text x="33.8802%" y="207.50">fekan`ray..</text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (101,849 samples, 21.50%)</title><rect x="19.0814%" y="213" width="21.4980%" height="15" fill="rgb(252,105,26)" fg:x="90400" fg:w="101849"/><text x="19.3314%" y="223.50">fekan`rayon::iter::plumbing::bridg..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (264 samples, 0.06%)</title><rect x="40.5804%" y="197" width="0.0557%" height="15" fill="rgb(220,39,43)" fg:x="192254" fg:w="264"/><text x="40.8304%" y="207.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (284 samples, 0.06%)</title><rect x="40.5802%" y="213" width="0.0599%" height="15" fill="rgb(229,68,48)" fg:x="192253" fg:w="284"/><text x="40.8302%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (1,069 samples, 0.23%)</title><rect x="42.0854%" y="117" width="0.2256%" height="15" fill="rgb(252,8,32)" fg:x="199384" fg:w="1069"/><text x="42.3354%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (583 samples, 0.12%)</title><rect x="42.1879%" y="101" width="0.1231%" height="15" fill="rgb(223,20,43)" fg:x="199870" fg:w="583"/><text x="42.4379%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (837 samples, 0.18%)</title><rect x="42.3110%" y="117" width="0.1767%" height="15" fill="rgb(229,81,49)" fg:x="200453" fg:w="837"/><text x="42.5610%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (7,016 samples, 1.48%)</title><rect x="41.1843%" y="133" width="1.4809%" height="15" fill="rgb(236,28,36)" fg:x="195115" fg:w="7016"/><text x="41.4343%" y="143.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (841 samples, 0.18%)</title><rect x="42.4877%" y="117" width="0.1775%" height="15" fill="rgb(249,185,26)" fg:x="201290" fg:w="841"/><text x="42.7377%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (12,302 samples, 2.60%)</title><rect x="40.6895%" y="149" width="2.5967%" height="15" fill="rgb(249,174,33)" fg:x="192771" fg:w="12302"/><text x="40.9395%" y="159.50">fe..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,942 samples, 0.62%)</title><rect x="42.6652%" y="133" width="0.6210%" height="15" fill="rgb(233,201,37)" fg:x="202131" fg:w="2942"/><text x="42.9152%" y="143.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (463 samples, 0.10%)</title><rect x="43.2862%" y="149" width="0.0977%" height="15" fill="rgb(221,78,26)" fg:x="205073" fg:w="463"/><text x="43.5362%" y="159.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (12,902 samples, 2.72%)</title><rect x="40.6667%" y="165" width="2.7233%" height="15" fill="rgb(250,127,30)" fg:x="192663" fg:w="12902"/><text x="40.9167%" y="175.50">fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (488 samples, 0.10%)</title><rect x="43.3932%" y="165" width="0.1030%" height="15" fill="rgb(230,49,44)" fg:x="205580" fg:w="488"/><text x="43.6432%" y="175.50"></text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (101 samples, 0.02%)</title><rect x="43.4964%" y="149" width="0.0213%" height="15" fill="rgb(229,67,23)" fg:x="206069" fg:w="101"/><text x="43.7464%" y="159.50"></text></g><g><title>fekan`rayon_core::join::join_context::_{{closure}} (77 samples, 0.02%)</title><rect x="43.5015%" y="133" width="0.0163%" height="15" fill="rgb(249,83,47)" fg:x="206093" fg:w="77"/><text x="43.7515%" y="143.50"></text></g><g><title>fekan`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (103 samples, 0.02%)</title><rect x="43.4962%" y="165" width="0.0217%" height="15" fill="rgb(215,43,3)" fg:x="206068" fg:w="103"/><text x="43.7462%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (2,029 samples, 0.43%)</title><rect x="46.2106%" y="101" width="0.4283%" height="15" fill="rgb(238,154,13)" fg:x="218928" fg:w="2029"/><text x="46.4606%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (1,086 samples, 0.23%)</title><rect x="46.4097%" y="85" width="0.2292%" height="15" fill="rgb(219,56,2)" fg:x="219871" fg:w="1086"/><text x="46.6597%" y="95.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (1,661 samples, 0.35%)</title><rect x="46.6389%" y="101" width="0.3506%" height="15" fill="rgb(233,0,4)" fg:x="220957" fg:w="1661"/><text x="46.8889%" y="111.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (58 samples, 0.01%)</title><rect x="47.3108%" y="85" width="0.0122%" height="15" fill="rgb(235,30,7)" fg:x="224140" fg:w="58"/><text x="47.5608%" y="95.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (13,790 samples, 2.91%)</title><rect x="44.4125%" y="117" width="2.9108%" height="15" fill="rgb(250,79,13)" fg:x="210409" fg:w="13790"/><text x="44.6625%" y="127.50">fe..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,581 samples, 0.33%)</title><rect x="46.9895%" y="101" width="0.3337%" height="15" fill="rgb(211,146,34)" fg:x="222618" fg:w="1581"/><text x="47.2395%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (23,244 samples, 4.91%)</title><rect x="43.5688%" y="133" width="4.9063%" height="15" fill="rgb(228,22,38)" fg:x="206412" fg:w="23244"/><text x="43.8188%" y="143.50">fekan`..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5,457 samples, 1.15%)</title><rect x="47.3232%" y="117" width="1.1518%" height="15" fill="rgb(235,168,5)" fg:x="224199" fg:w="5457"/><text x="47.5732%" y="127.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (945 samples, 0.20%)</title><rect x="48.4751%" y="133" width="0.1995%" height="15" fill="rgb(221,155,16)" fg:x="229656" fg:w="945"/><text x="48.7251%" y="143.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (24,468 samples, 5.16%)</title><rect x="43.5285%" y="149" width="5.1646%" height="15" fill="rgb(215,215,53)" fg:x="206221" fg:w="24468"/><text x="43.7785%" y="159.50">fekan`..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (1,103 samples, 0.23%)</title><rect x="48.6957%" y="149" width="0.2328%" height="15" fill="rgb(223,4,10)" fg:x="230701" fg:w="1103"/><text x="48.9457%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (53 samples, 0.01%)</title><rect x="48.9291%" y="101" width="0.0112%" height="15" fill="rgb(234,103,6)" fg:x="231807" fg:w="53"/><text x="49.1791%" y="111.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (66 samples, 0.01%)</title><rect x="48.9285%" y="117" width="0.0139%" height="15" fill="rgb(227,97,0)" fg:x="231804" fg:w="66"/><text x="49.1785%" y="127.50"></text></g><g><title>fekan`rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (68 samples, 0.01%)</title><rect x="48.9285%" y="149" width="0.0144%" height="15" fill="rgb(234,150,53)" fg:x="231804" fg:w="68"/><text x="49.1785%" y="159.50"></text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (68 samples, 0.01%)</title><rect x="48.9285%" y="133" width="0.0144%" height="15" fill="rgb(228,201,54)" fg:x="231804" fg:w="68"/><text x="49.1785%" y="143.50"></text></g><g><title>fekan`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (49 samples, 0.01%)</title><rect x="48.9492%" y="101" width="0.0103%" height="15" fill="rgb(222,22,37)" fg:x="231902" fg:w="49"/><text x="49.1992%" y="111.50"></text></g><g><title>fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (52 samples, 0.01%)</title><rect x="48.9492%" y="133" width="0.0110%" height="15" fill="rgb(237,53,32)" fg:x="231902" fg:w="52"/><text x="49.1992%" y="143.50"></text></g><g><title>fekan`rayon::iter::plumbing::bridge_producer_consumer::helper (52 samples, 0.01%)</title><rect x="48.9492%" y="117" width="0.0110%" height="15" fill="rgb(233,25,53)" fg:x="231902" fg:w="52"/><text x="49.1992%" y="127.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (114 samples, 0.02%)</title><rect x="49.0218%" y="85" width="0.0241%" height="15" fill="rgb(210,40,34)" fg:x="232246" fg:w="114"/><text x="49.2718%" y="95.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (224 samples, 0.05%)</title><rect x="49.0019%" y="101" width="0.0473%" height="15" fill="rgb(241,220,44)" fg:x="232152" fg:w="224"/><text x="49.2519%" y="111.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (404 samples, 0.09%)</title><rect x="48.9707%" y="117" width="0.0853%" height="15" fill="rgb(235,28,35)" fg:x="232004" fg:w="404"/><text x="49.2207%" y="127.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (58 samples, 0.01%)</title><rect x="49.0566%" y="117" width="0.0122%" height="15" fill="rgb(210,56,17)" fg:x="232411" fg:w="58"/><text x="49.3066%" y="127.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (497 samples, 0.10%)</title><rect x="48.9673%" y="133" width="0.1049%" height="15" fill="rgb(224,130,29)" fg:x="231988" fg:w="497"/><text x="49.2173%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (169 samples, 0.04%)</title><rect x="49.0737%" y="101" width="0.0357%" height="15" fill="rgb(235,212,8)" fg:x="232492" fg:w="169"/><text x="49.3237%" y="111.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::sleep (184 samples, 0.04%)</title><rect x="49.0722%" y="133" width="0.0388%" height="15" fill="rgb(223,33,50)" fg:x="232485" fg:w="184"/><text x="49.3222%" y="143.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (179 samples, 0.04%)</title><rect x="49.0733%" y="117" width="0.0378%" height="15" fill="rgb(219,149,13)" fg:x="232490" fg:w="179"/><text x="49.3233%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (537 samples, 0.11%)</title><rect x="49.1140%" y="101" width="0.1133%" height="15" fill="rgb(250,156,29)" fg:x="232683" fg:w="537"/><text x="49.3640%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (50 samples, 0.01%)</title><rect x="49.2276%" y="101" width="0.0106%" height="15" fill="rgb(216,193,19)" fg:x="233221" fg:w="50"/><text x="49.4776%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (50 samples, 0.01%)</title><rect x="49.2276%" y="85" width="0.0106%" height="15" fill="rgb(216,135,14)" fg:x="233221" fg:w="50"/><text x="49.4776%" y="95.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (645 samples, 0.14%)</title><rect x="49.1121%" y="117" width="0.1361%" height="15" fill="rgb(241,47,5)" fg:x="232674" fg:w="645"/><text x="49.3621%" y="127.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (652 samples, 0.14%)</title><rect x="49.1110%" y="133" width="0.1376%" height="15" fill="rgb(233,42,35)" fg:x="232669" fg:w="652"/><text x="49.3610%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (4,861 samples, 1.03%)</title><rect x="49.2491%" y="133" width="1.0260%" height="15" fill="rgb(231,13,6)" fg:x="233323" fg:w="4861"/><text x="49.4991%" y="143.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (6,312 samples, 1.33%)</title><rect x="48.9432%" y="149" width="1.3323%" height="15" fill="rgb(207,181,40)" fg:x="231874" fg:w="6312"/><text x="49.1932%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (253 samples, 0.05%)</title><rect x="50.2770%" y="117" width="0.0534%" height="15" fill="rgb(254,173,49)" fg:x="238193" fg:w="253"/><text x="50.5270%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (94 samples, 0.02%)</title><rect x="50.3317%" y="117" width="0.0198%" height="15" fill="rgb(221,1,38)" fg:x="238452" fg:w="94"/><text x="50.5817%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (94 samples, 0.02%)</title><rect x="50.3317%" y="101" width="0.0198%" height="15" fill="rgb(206,124,46)" fg:x="238452" fg:w="94"/><text x="50.5817%" y="111.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (386 samples, 0.08%)</title><rect x="50.2756%" y="149" width="0.0815%" height="15" fill="rgb(249,21,11)" fg:x="238186" fg:w="386"/><text x="50.5256%" y="159.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (381 samples, 0.08%)</title><rect x="50.2766%" y="133" width="0.0804%" height="15" fill="rgb(222,201,40)" fg:x="238191" fg:w="381"/><text x="50.5266%" y="143.50"></text></g><g><title>fekan`rayon_core::join::join_context::_{{closure}} (32,405 samples, 6.84%)</title><rect x="43.5179%" y="165" width="6.8399%" height="15" fill="rgb(235,61,29)" fg:x="206171" fg:w="32405"/><text x="43.7679%" y="175.50">fekan`ray..</text></g><g><title>fekan`crossbeam_epoch::default::with_handle (137 samples, 0.03%)</title><rect x="50.4383%" y="101" width="0.0289%" height="15" fill="rgb(219,207,3)" fg:x="238957" fg:w="137"/><text x="50.6883%" y="111.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::collect (64 samples, 0.01%)</title><rect x="50.4537%" y="85" width="0.0135%" height="15" fill="rgb(222,56,46)" fg:x="239030" fg:w="64"/><text x="50.7037%" y="95.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (271 samples, 0.06%)</title><rect x="50.4153%" y="117" width="0.0572%" height="15" fill="rgb(239,76,54)" fg:x="238848" fg:w="271"/><text x="50.6653%" y="127.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (471 samples, 0.10%)</title><rect x="50.3830%" y="133" width="0.0994%" height="15" fill="rgb(231,124,27)" fg:x="238695" fg:w="471"/><text x="50.6330%" y="143.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (57 samples, 0.01%)</title><rect x="50.4841%" y="133" width="0.0120%" height="15" fill="rgb(249,195,6)" fg:x="239174" fg:w="57"/><text x="50.7341%" y="143.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (584 samples, 0.12%)</title><rect x="50.3773%" y="149" width="0.1233%" height="15" fill="rgb(237,174,47)" fg:x="238668" fg:w="584"/><text x="50.6273%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (153 samples, 0.03%)</title><rect x="50.5018%" y="117" width="0.0323%" height="15" fill="rgb(206,201,31)" fg:x="239258" fg:w="153"/><text x="50.7518%" y="127.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::sleep (171 samples, 0.04%)</title><rect x="50.5006%" y="149" width="0.0361%" height="15" fill="rgb(231,57,52)" fg:x="239252" fg:w="171"/><text x="50.7506%" y="159.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (169 samples, 0.04%)</title><rect x="50.5010%" y="133" width="0.0357%" height="15" fill="rgb(248,177,22)" fg:x="239254" fg:w="169"/><text x="50.7510%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (474 samples, 0.10%)</title><rect x="50.5379%" y="117" width="0.1001%" height="15" fill="rgb(215,211,37)" fg:x="239429" fg:w="474"/><text x="50.7879%" y="127.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (492 samples, 0.10%)</title><rect x="50.5373%" y="133" width="0.1038%" height="15" fill="rgb(241,128,51)" fg:x="239426" fg:w="492"/><text x="50.7873%" y="143.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (497 samples, 0.10%)</title><rect x="50.5367%" y="149" width="0.1049%" height="15" fill="rgb(227,165,31)" fg:x="239423" fg:w="497"/><text x="50.7867%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (6,954 samples, 1.47%)</title><rect x="50.6420%" y="149" width="1.4678%" height="15" fill="rgb(228,167,24)" fg:x="239922" fg:w="6954"/><text x="50.8920%" y="159.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (8,316 samples, 1.76%)</title><rect x="50.3583%" y="165" width="1.7553%" height="15" fill="rgb(228,143,12)" fg:x="238578" fg:w="8316"/><text x="50.6083%" y="175.50"></text></g><g><title>fekan`rayon_core::join::join_context::_{{closure}} (54,310 samples, 11.46%)</title><rect x="40.6517%" y="181" width="11.4636%" height="15" fill="rgb(249,149,8)" fg:x="192592" fg:w="54310"/><text x="40.9017%" y="191.50">fekan`rayon_core:..</text></g><g><title>fekan`&lt;rayon::iter::plumbing::bridge::Callback&lt;C&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (54,343 samples, 11.47%)</title><rect x="40.6458%" y="197" width="11.4706%" height="15" fill="rgb(243,35,44)" fg:x="192564" fg:w="54343"/><text x="40.8958%" y="207.50">fekan`&lt;rayon::ite..</text></g><g><title>fekan`rayon_core::thread_pool::ThreadPool::install::_{{closure}} (54,405 samples, 11.48%)</title><rect x="40.6401%" y="213" width="11.4836%" height="15" fill="rgb(246,89,9)" fg:x="192537" fg:w="54405"/><text x="40.8901%" y="223.50">fekan`rayon_core:..</text></g><g><title>fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (158,759 samples, 33.51%)</title><rect x="18.6223%" y="229" width="33.5104%" height="15" fill="rgb(233,213,13)" fg:x="88225" fg:w="158759"/><text x="18.8723%" y="239.50">fekan`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core:..</text></g><g><title>fekan`crossbeam_deque::deque::Injector&lt;T&gt;::steal (64 samples, 0.01%)</title><rect x="52.1337%" y="229" width="0.0135%" height="15" fill="rgb(233,141,41)" fg:x="246989" fg:w="64"/><text x="52.3837%" y="239.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (98 samples, 0.02%)</title><rect x="52.1472%" y="229" width="0.0207%" height="15" fill="rgb(239,167,4)" fg:x="247053" fg:w="98"/><text x="52.3972%" y="239.50"></text></g><g><title>fekan`crossbeam_deque::deque::Worker&lt;T&gt;::pop (259 samples, 0.05%)</title><rect x="52.1679%" y="229" width="0.0547%" height="15" fill="rgb(209,217,16)" fg:x="247151" fg:w="259"/><text x="52.4179%" y="239.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::try_advance (493 samples, 0.10%)</title><rect x="54.6364%" y="149" width="0.1041%" height="15" fill="rgb(219,88,35)" fg:x="258846" fg:w="493"/><text x="54.8864%" y="159.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::collect (1,528 samples, 0.32%)</title><rect x="54.6316%" y="165" width="0.3225%" height="15" fill="rgb(220,193,23)" fg:x="258823" fg:w="1528"/><text x="54.8816%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (969 samples, 0.20%)</title><rect x="54.7495%" y="149" width="0.2045%" height="15" fill="rgb(230,90,52)" fg:x="259382" fg:w="969"/><text x="54.9995%" y="159.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (3,942 samples, 0.83%)</title><rect x="54.1294%" y="181" width="0.8321%" height="15" fill="rgb(252,106,19)" fg:x="256444" fg:w="3942"/><text x="54.3794%" y="191.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (8,390 samples, 1.77%)</title><rect x="53.3032%" y="197" width="1.7709%" height="15" fill="rgb(206,74,20)" fg:x="252530" fg:w="8390"/><text x="53.5532%" y="207.50">f..</text></g><g><title>libdyld.dylib`tlv_get_addr (506 samples, 0.11%)</title><rect x="54.9674%" y="181" width="0.1068%" height="15" fill="rgb(230,138,44)" fg:x="260414" fg:w="506"/><text x="55.2174%" y="191.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (684 samples, 0.14%)</title><rect x="55.0742%" y="197" width="0.1444%" height="15" fill="rgb(235,182,43)" fg:x="260920" fg:w="684"/><text x="55.3242%" y="207.50"></text></g><g><title>fekan`&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14,488 samples, 3.06%)</title><rect x="52.3365%" y="213" width="3.0581%" height="15" fill="rgb(242,16,51)" fg:x="247950" fg:w="14488"/><text x="52.5865%" y="223.50">fek..</text></g><g><title>libdyld.dylib`tlv_get_addr (834 samples, 0.18%)</title><rect x="55.2186%" y="197" width="0.1760%" height="15" fill="rgb(248,9,4)" fg:x="261604" fg:w="834"/><text x="55.4686%" y="207.50"></text></g><g><title>fekan`crossbeam_deque::deque::Injector&lt;T&gt;::steal (322 samples, 0.07%)</title><rect x="55.3946%" y="213" width="0.0680%" height="15" fill="rgb(210,31,22)" fg:x="262438" fg:w="322"/><text x="55.6446%" y="223.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::try_advance (73 samples, 0.02%)</title><rect x="55.7682%" y="165" width="0.0154%" height="15" fill="rgb(239,54,39)" fg:x="264208" fg:w="73"/><text x="56.0182%" y="175.50"></text></g><g><title>fekan`crossbeam_epoch::internal::Global::collect (220 samples, 0.05%)</title><rect x="55.7680%" y="181" width="0.0464%" height="15" fill="rgb(230,99,41)" fg:x="264207" fg:w="220"/><text x="56.0180%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (134 samples, 0.03%)</title><rect x="55.7861%" y="165" width="0.0283%" height="15" fill="rgb(253,106,12)" fg:x="264293" fg:w="134"/><text x="56.0361%" y="175.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (551 samples, 0.12%)</title><rect x="55.6992%" y="197" width="0.1163%" height="15" fill="rgb(213,46,41)" fg:x="263881" fg:w="551"/><text x="55.9492%" y="207.50"></text></g><g><title>fekan`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1,739 samples, 0.37%)</title><rect x="55.4626%" y="213" width="0.3671%" height="15" fill="rgb(215,133,35)" fg:x="262760" fg:w="1739"/><text x="55.7126%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (62 samples, 0.01%)</title><rect x="55.8165%" y="197" width="0.0131%" height="15" fill="rgb(213,28,5)" fg:x="264437" fg:w="62"/><text x="56.0665%" y="207.50"></text></g><g><title>fekan`crossbeam_deque::deque::Worker&lt;T&gt;::pop (468 samples, 0.10%)</title><rect x="55.8296%" y="213" width="0.0988%" height="15" fill="rgb(215,77,49)" fg:x="264499" fg:w="468"/><text x="56.0796%" y="223.50"></text></g><g><title>fekan`crossbeam_epoch::default::with_handle (60 samples, 0.01%)</title><rect x="55.9284%" y="213" width="0.0127%" height="15" fill="rgb(248,100,22)" fg:x="264967" fg:w="60"/><text x="56.1784%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (159 samples, 0.03%)</title><rect x="55.9411%" y="213" width="0.0336%" height="15" fill="rgb(208,67,9)" fg:x="265027" fg:w="159"/><text x="56.1911%" y="223.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::find_work (17,776 samples, 3.75%)</title><rect x="52.2232%" y="229" width="3.7521%" height="15" fill="rgb(219,133,21)" fg:x="247413" fg:w="17776"/><text x="52.4732%" y="239.50">feka..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (7,098 samples, 1.50%)</title><rect x="56.0280%" y="197" width="1.4982%" height="15" fill="rgb(246,46,29)" fg:x="265439" fg:w="7098"/><text x="56.2780%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (340 samples, 0.07%)</title><rect x="57.5497%" y="181" width="0.0718%" height="15" fill="rgb(246,185,52)" fg:x="272648" fg:w="340"/><text x="57.7997%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (74 samples, 0.02%)</title><rect x="57.6215%" y="165" width="0.0156%" height="15" fill="rgb(252,136,11)" fg:x="272988" fg:w="74"/><text x="57.8715%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (76 samples, 0.02%)</title><rect x="57.6215%" y="181" width="0.0160%" height="15" fill="rgb(219,138,53)" fg:x="272988" fg:w="76"/><text x="57.8715%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (600 samples, 0.13%)</title><rect x="57.5263%" y="197" width="0.1266%" height="15" fill="rgb(211,51,23)" fg:x="272537" fg:w="600"/><text x="57.7763%" y="207.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait (7,802 samples, 1.65%)</title><rect x="56.0080%" y="213" width="1.6468%" height="15" fill="rgb(247,221,28)" fg:x="265344" fg:w="7802"/><text x="56.2580%" y="223.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::sleep (8,016 samples, 1.69%)</title><rect x="55.9753%" y="229" width="1.6920%" height="15" fill="rgb(251,222,45)" fg:x="265189" fg:w="8016"/><text x="56.2253%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (50 samples, 0.01%)</title><rect x="57.6567%" y="213" width="0.0106%" height="15" fill="rgb(217,162,53)" fg:x="273155" fg:w="50"/><text x="57.9067%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (2,203 samples, 0.47%)</title><rect x="57.6856%" y="197" width="0.4650%" height="15" fill="rgb(229,93,14)" fg:x="273292" fg:w="2203"/><text x="57.9356%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (686 samples, 0.14%)</title><rect x="58.1546%" y="181" width="0.1448%" height="15" fill="rgb(209,67,49)" fg:x="275514" fg:w="686"/><text x="58.4046%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (695 samples, 0.15%)</title><rect x="58.1536%" y="197" width="0.1467%" height="15" fill="rgb(213,87,29)" fg:x="275509" fg:w="695"/><text x="58.4036%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (452 samples, 0.10%)</title><rect x="58.3003%" y="197" width="0.0954%" height="15" fill="rgb(205,151,52)" fg:x="276204" fg:w="452"/><text x="58.5503%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (450 samples, 0.09%)</title><rect x="58.3007%" y="181" width="0.0950%" height="15" fill="rgb(253,215,39)" fg:x="276206" fg:w="450"/><text x="58.5507%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (49 samples, 0.01%)</title><rect x="58.3999%" y="197" width="0.0103%" height="15" fill="rgb(221,220,41)" fg:x="276676" fg:w="49"/><text x="58.6499%" y="207.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_specific_thread (3,534 samples, 0.75%)</title><rect x="57.6702%" y="213" width="0.7459%" height="15" fill="rgb(218,133,21)" fg:x="273219" fg:w="3534"/><text x="57.9202%" y="223.50"></text></g><g><title>fekan`rayon_core::sleep::Sleep::wake_any_threads (3,561 samples, 0.75%)</title><rect x="57.6673%" y="229" width="0.7516%" height="15" fill="rgb(221,193,43)" fg:x="273205" fg:w="3561"/><text x="57.9173%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (196,516 samples, 41.48%)</title><rect x="58.4263%" y="229" width="41.4800%" height="15" fill="rgb(240,128,52)" fg:x="276801" fg:w="196516"/><text x="58.6763%" y="239.50">libsystem_kernel.dylib`swtch_pri</text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (79 samples, 0.02%)</title><rect x="99.9135%" y="213" width="0.0167%" height="15" fill="rgb(253,114,12)" fg:x="473351" fg:w="79"/><text x="100.1635%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (83 samples, 0.02%)</title><rect x="99.9132%" y="229" width="0.0175%" height="15" fill="rgb(215,223,47)" fg:x="473350" fg:w="83"/><text x="100.1632%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (234 samples, 0.05%)</title><rect x="99.9308%" y="229" width="0.0494%" height="15" fill="rgb(248,225,23)" fg:x="473433" fg:w="234"/><text x="100.1808%" y="239.50"></text></g><g><title>fekan`rayon_core::registry::WorkerThread::wait_until_cold (386,258 samples, 81.53%)</title><rect x="18.4523%" y="245" width="81.5301%" height="15" fill="rgb(250,108,0)" fg:x="87420" fg:w="386258"/><text x="18.7023%" y="255.50">fekan`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>all (473,761 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(228,208,7)" fg:x="0" fg:w="473761"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (386,520 samples, 81.59%)</title><rect x="18.4146%" y="341" width="81.5854%" height="15" fill="rgb(244,45,10)" fg:x="87241" fg:w="386520"/><text x="18.6646%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (386,520 samples, 81.59%)</title><rect x="18.4146%" y="325" width="81.5854%" height="15" fill="rgb(207,125,25)" fg:x="87241" fg:w="386520"/><text x="18.6646%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (386,520 samples, 81.59%)</title><rect x="18.4146%" y="309" width="81.5854%" height="15" fill="rgb(210,195,18)" fg:x="87241" fg:w="386520"/><text x="18.6646%" y="319.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (386,520 samples, 81.59%)</title><rect x="18.4146%" y="293" width="81.5854%" height="15" fill="rgb(249,80,12)" fg:x="87241" fg:w="386520"/><text x="18.6646%" y="303.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (386,520 samples, 81.59%)</title><rect x="18.4146%" y="277" width="81.5854%" height="15" fill="rgb(221,65,9)" fg:x="87241" fg:w="386520"/><text x="18.6646%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`rayon_core::registry::ThreadBuilder::run (386,520 samples, 81.59%)</title><rect x="18.4146%" y="261" width="81.5854%" height="15" fill="rgb(235,49,36)" fg:x="87241" fg:w="386520"/><text x="18.6646%" y="271.50">fekan`rayon_core::registry::ThreadBuilder::run</text></g></svg></svg>