<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="12722"><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0157%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="239.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="0.0000%" y="245" width="0.0236%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="0.0236%" y="245" width="0.0157%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="2"/><text x="0.2736%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$memcpy (2 samples, 0.02%)</title><rect x="0.0393%" y="245" width="0.0157%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="2"/><text x="0.2893%" y="255.50"></text></g><g><title>fekan`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (6 samples, 0.05%)</title><rect x="0.0707%" y="229" width="0.0472%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="6"/><text x="0.3207%" y="239.50"></text></g><g><title>fekan`fekan::raw_regression_to_true_sample (6 samples, 0.05%)</title><rect x="0.0707%" y="213" width="0.0472%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="6"/><text x="0.3207%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="0.0943%" y="197" width="0.0236%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="3"/><text x="0.3443%" y="207.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (128 samples, 1.01%)</title><rect x="0.2515%" y="85" width="1.0061%" height="15" fill="rgb(228,23,34)" fg:x="32" fg:w="128"/><text x="0.5015%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (127 samples, 1.00%)</title><rect x="0.2594%" y="69" width="0.9983%" height="15" fill="rgb(218,30,26)" fg:x="33" fg:w="127"/><text x="0.5094%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (126 samples, 0.99%)</title><rect x="0.2673%" y="53" width="0.9904%" height="15" fill="rgb(220,122,19)" fg:x="34" fg:w="126"/><text x="0.5173%" y="63.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="1.3441%" y="37" width="0.0236%" height="15" fill="rgb(250,228,42)" fg:x="171" fg:w="3"/><text x="1.5941%" y="47.50"></text></g><g><title>fekan`DYLD-STUB$$read (5 samples, 0.04%)</title><rect x="1.3677%" y="37" width="0.0393%" height="15" fill="rgb(240,193,28)" fg:x="174" fg:w="5"/><text x="1.6177%" y="47.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (2,118 samples, 16.65%)</title><rect x="1.2577%" y="69" width="16.6483%" height="15" fill="rgb(216,20,37)" fg:x="160" fg:w="2118"/><text x="1.5077%" y="79.50">fekan`serde_json::de::Dese..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,110 samples, 16.59%)</title><rect x="1.3205%" y="53" width="16.5854%" height="15" fill="rgb(206,188,39)" fg:x="168" fg:w="2110"/><text x="1.5705%" y="63.50">fekan`&lt;std::io::Bytes&lt;R&gt; a..</text></g><g><title>libsystem_kernel.dylib`read (2,099 samples, 16.50%)</title><rect x="1.4070%" y="37" width="16.4990%" height="15" fill="rgb(217,207,13)" fg:x="179" fg:w="2099"/><text x="1.6570%" y="47.50">libsystem_kernel.dylib`re..</text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2,249 samples, 17.68%)</title><rect x="0.2358%" y="101" width="17.6780%" height="15" fill="rgb(231,73,38)" fg:x="30" fg:w="2249"/><text x="0.4858%" y="111.50">fekan`&lt;core::marker::Phanto..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (2,119 samples, 16.66%)</title><rect x="1.2577%" y="85" width="16.6562%" height="15" fill="rgb(225,20,46)" fg:x="160" fg:w="2119"/><text x="1.5077%" y="95.50">fekan`serde_json::de::Dese..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2,374 samples, 18.66%)</title><rect x="0.2044%" y="117" width="18.6606%" height="15" fill="rgb(210,31,41)" fg:x="26" fg:w="2374"/><text x="0.4544%" y="127.50">fekan`&lt;serde_json::de::SeqAcc..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.95%)</title><rect x="17.9139%" y="101" width="0.9511%" height="15" fill="rgb(221,200,47)" fg:x="2279" fg:w="121"/><text x="18.1639%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (121 samples, 0.95%)</title><rect x="17.9139%" y="85" width="0.9511%" height="15" fill="rgb(226,26,5)" fg:x="2279" fg:w="121"/><text x="18.1639%" y="95.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.04%)</title><rect x="18.8650%" y="117" width="0.0393%" height="15" fill="rgb(249,33,26)" fg:x="2400" fg:w="5"/><text x="19.1150%" y="127.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2,382 samples, 18.72%)</title><rect x="0.1886%" y="133" width="18.7235%" height="15" fill="rgb(235,183,28)" fg:x="24" fg:w="2382"/><text x="0.4386%" y="143.50">fekan`&lt;serde::de::impls::&lt;imp..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.02%)</title><rect x="18.9121%" y="133" width="0.0157%" height="15" fill="rgb(221,5,38)" fg:x="2406" fg:w="2"/><text x="19.1621%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (2,530 samples, 19.89%)</title><rect x="0.1729%" y="149" width="19.8868%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="2530"/><text x="0.4229%" y="159.50">fekan`&lt;&amp;mut serde_json::de::Des..</text></g><g><title>libsystem_kernel.dylib`read (144 samples, 1.13%)</title><rect x="18.9278%" y="133" width="1.1319%" height="15" fill="rgb(241,131,45)" fg:x="2408" fg:w="144"/><text x="19.1778%" y="143.50"></text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (613 samples, 4.82%)</title><rect x="20.0597%" y="149" width="4.8184%" height="15" fill="rgb(249,31,29)" fg:x="2552" fg:w="613"/><text x="20.3097%" y="159.50">fekan`..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (606 samples, 4.76%)</title><rect x="20.1148%" y="133" width="4.7634%" height="15" fill="rgb(225,111,53)" fg:x="2559" fg:w="606"/><text x="20.3648%" y="143.50">fekan`..</text></g><g><title>libsystem_kernel.dylib`read (605 samples, 4.76%)</title><rect x="20.1226%" y="117" width="4.7555%" height="15" fill="rgb(238,160,17)" fg:x="2560" fg:w="605"/><text x="20.3726%" y="127.50">libsys..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (217 samples, 1.71%)</title><rect x="24.8782%" y="149" width="1.7057%" height="15" fill="rgb(214,148,48)" fg:x="3165" fg:w="217"/><text x="25.1282%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (213 samples, 1.67%)</title><rect x="24.9096%" y="133" width="1.6743%" height="15" fill="rgb(232,36,49)" fg:x="3169" fg:w="213"/><text x="25.1596%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,440 samples, 27.04%)</title><rect x="0.1415%" y="165" width="27.0398%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="3440"/><text x="0.3915%" y="175.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt;..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (76 samples, 0.60%)</title><rect x="26.5839%" y="149" width="0.5974%" height="15" fill="rgb(229,88,8)" fg:x="3382" fg:w="76"/><text x="26.8339%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (76 samples, 0.60%)</title><rect x="26.5839%" y="133" width="0.5974%" height="15" fill="rgb(213,181,19)" fg:x="3382" fg:w="76"/><text x="26.8339%" y="143.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,589 samples, 28.21%)</title><rect x="0.1415%" y="181" width="28.2110%" height="15" fill="rgb(254,191,54)" fg:x="18" fg:w="3589"/><text x="0.3915%" y="191.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde:..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (149 samples, 1.17%)</title><rect x="27.1813%" y="165" width="1.1712%" height="15" fill="rgb(241,83,37)" fg:x="3458" fg:w="149"/><text x="27.4313%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (149 samples, 1.17%)</title><rect x="27.1813%" y="149" width="1.1712%" height="15" fill="rgb(233,36,39)" fg:x="3458" fg:w="149"/><text x="27.4313%" y="159.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,592 samples, 28.23%)</title><rect x="0.1258%" y="197" width="28.2346%" height="15" fill="rgb(226,3,54)" fg:x="16" fg:w="3592"/><text x="0.3758%" y="207.50">fekan`&lt;serde::de::impls::&lt;impl serde::de::Des..</text></g><g><title>fekan`fekan::load_regression_data (3,600 samples, 28.30%)</title><rect x="0.0707%" y="245" width="28.2974%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="3600"/><text x="0.3207%" y="255.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`serde_json::de::from_trait (3,593 samples, 28.24%)</title><rect x="0.1258%" y="229" width="28.2424%" height="15" fill="rgb(238,167,29)" fg:x="16" fg:w="3593"/><text x="0.3758%" y="239.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,593 samples, 28.24%)</title><rect x="0.1258%" y="213" width="28.2424%" height="15" fill="rgb(232,182,51)" fg:x="16" fg:w="3593"/><text x="0.3758%" y="223.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; a..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (14 samples, 0.11%)</title><rect x="28.5097%" y="213" width="0.1100%" height="15" fill="rgb(231,60,39)" fg:x="3627" fg:w="14"/><text x="28.7597%" y="223.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.12%)</title><rect x="28.5097%" y="229" width="0.1179%" height="15" fill="rgb(208,69,12)" fg:x="3627" fg:w="15"/><text x="28.7597%" y="239.50"></text></g><g><title>fekan`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (8 samples, 0.06%)</title><rect x="28.6354%" y="229" width="0.0629%" height="15" fill="rgb(235,93,37)" fg:x="3643" fg:w="8"/><text x="28.8854%" y="239.50"></text></g><g><title>fekan`DYLD-STUB$$free (5 samples, 0.04%)</title><rect x="28.6983%" y="229" width="0.0393%" height="15" fill="rgb(213,116,39)" fg:x="3651" fg:w="5"/><text x="28.9483%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.06%)</title><rect x="28.7376%" y="165" width="0.0550%" height="15" fill="rgb(222,207,29)" fg:x="3656" fg:w="7"/><text x="28.9876%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (2 samples, 0.02%)</title><rect x="28.7926%" y="165" width="0.0157%" height="15" fill="rgb(206,96,30)" fg:x="3663" fg:w="2"/><text x="29.0426%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="28.7926%" y="149" width="0.0157%" height="15" fill="rgb(218,138,4)" fg:x="3663" fg:w="2"/><text x="29.0426%" y="159.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (12 samples, 0.09%)</title><rect x="28.7376%" y="229" width="0.0943%" height="15" fill="rgb(250,191,14)" fg:x="3656" fg:w="12"/><text x="28.9876%" y="239.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (12 samples, 0.09%)</title><rect x="28.7376%" y="213" width="0.0943%" height="15" fill="rgb(239,60,40)" fg:x="3656" fg:w="12"/><text x="28.9876%" y="223.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::edge::EdgeType&gt; (12 samples, 0.09%)</title><rect x="28.7376%" y="197" width="0.0943%" height="15" fill="rgb(206,27,48)" fg:x="3656" fg:w="12"/><text x="28.9876%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.09%)</title><rect x="28.7376%" y="181" width="0.0943%" height="15" fill="rgb(225,35,8)" fg:x="3656" fg:w="12"/><text x="28.9876%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (3 samples, 0.02%)</title><rect x="28.8084%" y="165" width="0.0236%" height="15" fill="rgb(250,213,24)" fg:x="3665" fg:w="3"/><text x="29.0584%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="28.8084%" y="149" width="0.0236%" height="15" fill="rgb(247,123,22)" fg:x="3665" fg:w="3"/><text x="29.0584%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.20%)</title><rect x="28.8398%" y="165" width="0.1965%" height="15" fill="rgb(231,138,38)" fg:x="3669" fg:w="25"/><text x="29.0898%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (26 samples, 0.20%)</title><rect x="28.8398%" y="181" width="0.2044%" height="15" fill="rgb(231,145,46)" fg:x="3669" fg:w="26"/><text x="29.0898%" y="191.50"></text></g><g><title>fekan`fekan::kan::Kan::merge_models (28 samples, 0.22%)</title><rect x="28.8319%" y="229" width="0.2201%" height="15" fill="rgb(251,118,11)" fg:x="3668" fg:w="28"/><text x="29.0819%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::merge_layers (28 samples, 0.22%)</title><rect x="28.8319%" y="213" width="0.2201%" height="15" fill="rgb(217,147,25)" fg:x="3668" fg:w="28"/><text x="29.0819%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::merge_edges (28 samples, 0.22%)</title><rect x="28.8319%" y="197" width="0.2201%" height="15" fill="rgb(247,81,37)" fg:x="3668" fg:w="28"/><text x="29.0819%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (70 samples, 0.55%)</title><rect x="29.0678%" y="197" width="0.5502%" height="15" fill="rgb(209,12,38)" fg:x="3698" fg:w="70"/><text x="29.3178%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (68 samples, 0.53%)</title><rect x="29.0835%" y="181" width="0.5345%" height="15" fill="rgb(227,1,9)" fg:x="3700" fg:w="68"/><text x="29.3335%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (55 samples, 0.43%)</title><rect x="29.1857%" y="165" width="0.4323%" height="15" fill="rgb(248,47,43)" fg:x="3713" fg:w="55"/><text x="29.4357%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (38 samples, 0.30%)</title><rect x="29.3193%" y="149" width="0.2987%" height="15" fill="rgb(221,10,30)" fg:x="3730" fg:w="38"/><text x="29.5693%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (10 samples, 0.08%)</title><rect x="29.5394%" y="133" width="0.0786%" height="15" fill="rgb(210,229,1)" fg:x="3758" fg:w="10"/><text x="29.7894%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (5 samples, 0.04%)</title><rect x="29.6180%" y="197" width="0.0393%" height="15" fill="rgb(222,148,37)" fg:x="3768" fg:w="5"/><text x="29.8680%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (78 samples, 0.61%)</title><rect x="29.0520%" y="213" width="0.6131%" height="15" fill="rgb(234,67,33)" fg:x="3696" fg:w="78"/><text x="29.3020%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (71 samples, 0.56%)</title><rect x="29.6730%" y="181" width="0.5581%" height="15" fill="rgb(247,98,35)" fg:x="3775" fg:w="71"/><text x="29.9230%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (70 samples, 0.55%)</title><rect x="29.6809%" y="165" width="0.5502%" height="15" fill="rgb(247,138,52)" fg:x="3776" fg:w="70"/><text x="29.9309%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (61 samples, 0.48%)</title><rect x="29.7516%" y="149" width="0.4795%" height="15" fill="rgb(213,79,30)" fg:x="3785" fg:w="61"/><text x="30.0016%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (51 samples, 0.40%)</title><rect x="29.8302%" y="133" width="0.4009%" height="15" fill="rgb(246,177,23)" fg:x="3795" fg:w="51"/><text x="30.0802%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (14 samples, 0.11%)</title><rect x="30.1211%" y="117" width="0.1100%" height="15" fill="rgb(230,62,27)" fg:x="3832" fg:w="14"/><text x="30.3711%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::prune (74 samples, 0.58%)</title><rect x="29.6651%" y="213" width="0.5817%" height="15" fill="rgb(216,154,8)" fg:x="3774" fg:w="74"/><text x="29.9151%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::prune (74 samples, 0.58%)</title><rect x="29.6651%" y="197" width="0.5817%" height="15" fill="rgb(244,35,45)" fg:x="3774" fg:w="74"/><text x="29.9151%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (2 samples, 0.02%)</title><rect x="30.2311%" y="181" width="0.0157%" height="15" fill="rgb(251,115,12)" fg:x="3846" fg:w="2"/><text x="30.4811%" y="191.50"></text></g><g><title>fekan`fekan::kan::Kan::prune (155 samples, 1.22%)</title><rect x="29.0520%" y="229" width="1.2184%" height="15" fill="rgb(240,54,50)" fg:x="3696" fg:w="155"/><text x="29.3020%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.02%)</title><rect x="30.2547%" y="213" width="0.0157%" height="15" fill="rgb(233,84,52)" fg:x="3849" fg:w="2"/><text x="30.5047%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.02%)</title><rect x="30.2547%" y="197" width="0.0157%" height="15" fill="rgb(207,117,47)" fg:x="3849" fg:w="2"/><text x="30.5047%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="30.2547%" y="181" width="0.0157%" height="15" fill="rgb(249,43,39)" fg:x="3849" fg:w="2"/><text x="30.5047%" y="191.50"></text></g><g><title>fekan`fekan::kan::Kan::test_and_set_symbolic (3 samples, 0.02%)</title><rect x="30.2704%" y="229" width="0.0236%" height="15" fill="rgb(209,38,44)" fg:x="3851" fg:w="3"/><text x="30.5204%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::test_and_set_symbolic (3 samples, 0.02%)</title><rect x="30.2704%" y="213" width="0.0236%" height="15" fill="rgb(236,212,23)" fg:x="3851" fg:w="3"/><text x="30.5204%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::suggest_symbolic (3 samples, 0.02%)</title><rect x="30.2704%" y="197" width="0.0236%" height="15" fill="rgb(242,79,21)" fg:x="3851" fg:w="3"/><text x="30.5204%" y="207.50"></text></g><g><title>fekan`std::thread::scoped::scope (3 samples, 0.02%)</title><rect x="30.2704%" y="181" width="0.0236%" height="15" fill="rgb(211,96,35)" fg:x="3851" fg:w="3"/><text x="30.5204%" y="191.50"></text></g><g><title>fekan`std::thread::scoped::_&lt;impl std::thread::Builder&gt;::spawn_scoped (3 samples, 0.02%)</title><rect x="30.2704%" y="165" width="0.0236%" height="15" fill="rgb(253,215,40)" fg:x="3851" fg:w="3"/><text x="30.5204%" y="175.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new (3 samples, 0.02%)</title><rect x="30.2704%" y="149" width="0.0236%" height="15" fill="rgb(211,81,21)" fg:x="3851" fg:w="3"/><text x="30.5204%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (3 samples, 0.02%)</title><rect x="30.2704%" y="133" width="0.0236%" height="15" fill="rgb(208,190,38)" fg:x="3851" fg:w="3"/><text x="30.5204%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="30.3018%" y="197" width="0.0157%" height="15" fill="rgb(235,213,38)" fg:x="3855" fg:w="2"/><text x="30.5518%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::clear_samples (3 samples, 0.02%)</title><rect x="30.3018%" y="213" width="0.0236%" height="15" fill="rgb(237,122,38)" fg:x="3855" fg:w="3"/><text x="30.5518%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (25 samples, 0.20%)</title><rect x="30.9543%" y="149" width="0.1965%" height="15" fill="rgb(244,218,35)" fg:x="3938" fg:w="25"/><text x="31.2043%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (17 samples, 0.13%)</title><rect x="31.0171%" y="133" width="0.1336%" height="15" fill="rgb(240,68,47)" fg:x="3946" fg:w="17"/><text x="31.2671%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (23 samples, 0.18%)</title><rect x="31.1508%" y="149" width="0.1808%" height="15" fill="rgb(210,16,53)" fg:x="3963" fg:w="23"/><text x="31.4008%" y="159.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (27 samples, 0.21%)</title><rect x="31.5123%" y="133" width="0.2122%" height="15" fill="rgb(235,124,12)" fg:x="4009" fg:w="27"/><text x="31.7623%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (147 samples, 1.16%)</title><rect x="30.5770%" y="165" width="1.1555%" height="15" fill="rgb(224,169,11)" fg:x="3890" fg:w="147"/><text x="30.8270%" y="175.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (51 samples, 0.40%)</title><rect x="31.3316%" y="149" width="0.4009%" height="15" fill="rgb(250,166,2)" fg:x="3986" fg:w="51"/><text x="31.5816%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (216 samples, 1.70%)</title><rect x="30.3647%" y="181" width="1.6978%" height="15" fill="rgb(242,216,29)" fg:x="3863" fg:w="216"/><text x="30.6147%" y="191.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.33%)</title><rect x="31.7324%" y="165" width="0.3301%" height="15" fill="rgb(230,116,27)" fg:x="4037" fg:w="42"/><text x="31.9824%" y="175.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.13%)</title><rect x="31.9289%" y="149" width="0.1336%" height="15" fill="rgb(228,99,48)" fg:x="4062" fg:w="17"/><text x="32.1789%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::forward (221 samples, 1.74%)</title><rect x="30.3569%" y="197" width="1.7371%" height="15" fill="rgb(253,11,6)" fg:x="3862" fg:w="221"/><text x="30.6069%" y="207.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.03%)</title><rect x="32.0626%" y="181" width="0.0314%" height="15" fill="rgb(247,143,39)" fg:x="4079" fg:w="4"/><text x="32.3126%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (5 samples, 0.04%)</title><rect x="32.0940%" y="197" width="0.0393%" height="15" fill="rgb(236,97,10)" fg:x="4083" fg:w="5"/><text x="32.3440%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (231 samples, 1.82%)</title><rect x="30.3254%" y="213" width="1.8158%" height="15" fill="rgb(233,208,19)" fg:x="3858" fg:w="231"/><text x="30.5754%" y="223.50">f..</text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.02%)</title><rect x="32.1412%" y="197" width="0.0157%" height="15" fill="rgb(216,164,2)" fg:x="4089" fg:w="2"/><text x="32.3912%" y="207.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="32.1412%" y="181" width="0.0157%" height="15" fill="rgb(220,129,5)" fg:x="4089" fg:w="2"/><text x="32.3912%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.02%)</title><rect x="32.1412%" y="165" width="0.0157%" height="15" fill="rgb(242,17,10)" fg:x="4089" fg:w="2"/><text x="32.3912%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.02%)</title><rect x="32.1412%" y="149" width="0.0157%" height="15" fill="rgb(242,107,0)" fg:x="4089" fg:w="2"/><text x="32.3912%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="32.1412%" y="133" width="0.0157%" height="15" fill="rgb(251,28,31)" fg:x="4089" fg:w="2"/><text x="32.3912%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (8 samples, 0.06%)</title><rect x="32.1412%" y="213" width="0.0629%" height="15" fill="rgb(233,223,10)" fg:x="4089" fg:w="8"/><text x="32.3912%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (6 samples, 0.05%)</title><rect x="32.1569%" y="197" width="0.0472%" height="15" fill="rgb(215,21,27)" fg:x="4091" fg:w="6"/><text x="32.4069%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (6 samples, 0.05%)</title><rect x="32.1569%" y="181" width="0.0472%" height="15" fill="rgb(232,23,21)" fg:x="4091" fg:w="6"/><text x="32.4069%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.05%)</title><rect x="32.1569%" y="165" width="0.0472%" height="15" fill="rgb(244,5,23)" fg:x="4091" fg:w="6"/><text x="32.4069%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.04%)</title><rect x="32.1648%" y="149" width="0.0393%" height="15" fill="rgb(226,81,46)" fg:x="4092" fg:w="5"/><text x="32.4148%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (4 samples, 0.03%)</title><rect x="32.1726%" y="133" width="0.0314%" height="15" fill="rgb(247,70,30)" fg:x="4093" fg:w="4"/><text x="32.4226%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (4 samples, 0.03%)</title><rect x="32.1726%" y="117" width="0.0314%" height="15" fill="rgb(212,68,19)" fg:x="4093" fg:w="4"/><text x="32.4226%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (4 samples, 0.03%)</title><rect x="32.1726%" y="101" width="0.0314%" height="15" fill="rgb(240,187,13)" fg:x="4093" fg:w="4"/><text x="32.4226%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (4 samples, 0.03%)</title><rect x="32.1726%" y="85" width="0.0314%" height="15" fill="rgb(223,113,26)" fg:x="4093" fg:w="4"/><text x="32.4226%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.02%)</title><rect x="32.1805%" y="69" width="0.0236%" height="15" fill="rgb(206,192,2)" fg:x="4094" fg:w="3"/><text x="32.4305%" y="79.50"></text></g><g><title>fekan`fekan::preset_knot_ranges (244 samples, 1.92%)</title><rect x="30.2940%" y="229" width="1.9179%" height="15" fill="rgb(241,108,4)" fg:x="3854" fg:w="244"/><text x="30.5440%" y="239.50">f..</text></g><g><title>fekan`fekan::calculate_huber_loss_and_gradient (4 samples, 0.03%)</title><rect x="32.2276%" y="213" width="0.0314%" height="15" fill="rgb(247,173,49)" fg:x="4100" fg:w="4"/><text x="32.4776%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (177 samples, 1.39%)</title><rect x="32.2748%" y="181" width="1.3913%" height="15" fill="rgb(224,114,35)" fg:x="4106" fg:w="177"/><text x="32.5248%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (171 samples, 1.34%)</title><rect x="32.3220%" y="165" width="1.3441%" height="15" fill="rgb(245,159,27)" fg:x="4112" fg:w="171"/><text x="32.5720%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (152 samples, 1.19%)</title><rect x="32.4713%" y="149" width="1.1948%" height="15" fill="rgb(245,172,44)" fg:x="4131" fg:w="152"/><text x="32.7213%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (106 samples, 0.83%)</title><rect x="32.8329%" y="133" width="0.8332%" height="15" fill="rgb(236,23,11)" fg:x="4177" fg:w="106"/><text x="33.0829%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (35 samples, 0.28%)</title><rect x="33.3910%" y="117" width="0.2751%" height="15" fill="rgb(205,117,38)" fg:x="4248" fg:w="35"/><text x="33.6410%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (10 samples, 0.08%)</title><rect x="33.6661%" y="181" width="0.0786%" height="15" fill="rgb(237,72,25)" fg:x="4283" fg:w="10"/><text x="33.9161%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.06%)</title><rect x="33.7526%" y="181" width="0.0629%" height="15" fill="rgb(244,70,9)" fg:x="4294" fg:w="8"/><text x="34.0026%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.06%)</title><rect x="33.7526%" y="165" width="0.0629%" height="15" fill="rgb(217,125,39)" fg:x="4294" fg:w="8"/><text x="34.0026%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (199 samples, 1.56%)</title><rect x="32.2591%" y="197" width="1.5642%" height="15" fill="rgb(235,36,10)" fg:x="4104" fg:w="199"/><text x="32.5091%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (203 samples, 1.60%)</title><rect x="32.2591%" y="213" width="1.5957%" height="15" fill="rgb(251,123,47)" fg:x="4104" fg:w="203"/><text x="32.5091%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="33.8233%" y="197" width="0.0314%" height="15" fill="rgb(221,13,13)" fg:x="4303" fg:w="4"/><text x="34.0733%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.02%)</title><rect x="33.8626%" y="213" width="0.0157%" height="15" fill="rgb(238,131,9)" fg:x="4308" fg:w="2"/><text x="34.1126%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="33.8783%" y="213" width="0.0157%" height="15" fill="rgb(211,50,8)" fg:x="4310" fg:w="2"/><text x="34.1283%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="33.8940%" y="213" width="0.0236%" height="15" fill="rgb(245,182,24)" fg:x="4312" fg:w="3"/><text x="34.1440%" y="223.50"></text></g><g><title>fekan`fekan::validate_model (220 samples, 1.73%)</title><rect x="32.2119%" y="229" width="1.7293%" height="15" fill="rgb(242,14,37)" fg:x="4098" fg:w="220"/><text x="32.4619%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="33.9255%" y="213" width="0.0157%" height="15" fill="rgb(246,228,12)" fg:x="4316" fg:w="2"/><text x="34.1755%" y="223.50"></text></g><g><title>fekan`rand::rng::Rng::gen_range (9 samples, 0.07%)</title><rect x="33.9412%" y="229" width="0.0707%" height="15" fill="rgb(213,55,15)" fg:x="4318" fg:w="9"/><text x="34.1912%" y="239.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (159 samples, 1.25%)</title><rect x="34.0119%" y="181" width="1.2498%" height="15" fill="rgb(209,9,3)" fg:x="4327" fg:w="159"/><text x="34.2619%" y="191.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (159 samples, 1.25%)</title><rect x="34.0119%" y="165" width="1.2498%" height="15" fill="rgb(230,59,30)" fg:x="4327" fg:w="159"/><text x="34.2619%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (159 samples, 1.25%)</title><rect x="34.0119%" y="149" width="1.2498%" height="15" fill="rgb(209,121,21)" fg:x="4327" fg:w="159"/><text x="34.2619%" y="159.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (160 samples, 1.26%)</title><rect x="34.0119%" y="213" width="1.2577%" height="15" fill="rgb(220,109,13)" fg:x="4327" fg:w="160"/><text x="34.2619%" y="223.50"></text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (160 samples, 1.26%)</title><rect x="34.0119%" y="197" width="1.2577%" height="15" fill="rgb(232,18,1)" fg:x="4327" fg:w="160"/><text x="34.2619%" y="207.50"></text></g><g><title>fekan`std::thread::scoped::scope (162 samples, 1.27%)</title><rect x="34.0119%" y="229" width="1.2734%" height="15" fill="rgb(215,41,42)" fg:x="4327" fg:w="162"/><text x="34.2619%" y="239.50"></text></g><g><title>fekan`core::iter::adapters::try_process (2 samples, 0.02%)</title><rect x="35.2696%" y="213" width="0.0157%" height="15" fill="rgb(224,123,36)" fg:x="4487" fg:w="2"/><text x="35.5196%" y="223.50"></text></g><g><title>fekan`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="35.2696%" y="197" width="0.0157%" height="15" fill="rgb(240,125,3)" fg:x="4487" fg:w="2"/><text x="35.5196%" y="207.50"></text></g><g><title>fekan`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.02%)</title><rect x="35.2696%" y="181" width="0.0157%" height="15" fill="rgb(205,98,50)" fg:x="4487" fg:w="2"/><text x="35.5196%" y="191.50"></text></g><g><title>fekan`std::thread::JoinInner&lt;T&gt;::join (2 samples, 0.02%)</title><rect x="35.2696%" y="165" width="0.0157%" height="15" fill="rgb(205,185,37)" fg:x="4487" fg:w="2"/><text x="35.5196%" y="175.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::join (2 samples, 0.02%)</title><rect x="35.2696%" y="149" width="0.0157%" height="15" fill="rgb(238,207,15)" fg:x="4487" fg:w="2"/><text x="35.5196%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2 samples, 0.02%)</title><rect x="35.2696%" y="133" width="0.0157%" height="15" fill="rgb(213,199,42)" fg:x="4487" fg:w="2"/><text x="35.5196%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (7 samples, 0.06%)</title><rect x="35.2853%" y="229" width="0.0550%" height="15" fill="rgb(235,201,11)" fg:x="4489" fg:w="7"/><text x="35.5353%" y="239.50"></text></g><g><title>fekan`fekan::train_model (892 samples, 7.01%)</title><rect x="28.3682%" y="245" width="7.0115%" height="15" fill="rgb(207,46,11)" fg:x="3609" fg:w="892"/><text x="28.6182%" y="255.50">fekan`fek..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (4 samples, 0.03%)</title><rect x="35.3482%" y="229" width="0.0314%" height="15" fill="rgb(241,35,35)" fg:x="4497" fg:w="4"/><text x="35.5982%" y="239.50"></text></g><g><title>fekan`fekan::calculate_huber_loss_and_gradient (2 samples, 0.02%)</title><rect x="35.3797%" y="229" width="0.0157%" height="15" fill="rgb(243,32,47)" fg:x="4501" fg:w="2"/><text x="35.6297%" y="239.50"></text></g><g><title>fekan`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.02%)</title><rect x="35.4032%" y="197" width="0.0157%" height="15" fill="rgb(247,202,23)" fg:x="4504" fg:w="2"/><text x="35.6532%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.02%)</title><rect x="35.4032%" y="181" width="0.0157%" height="15" fill="rgb(219,102,11)" fg:x="4504" fg:w="2"/><text x="35.6532%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (79 samples, 0.62%)</title><rect x="35.3954%" y="213" width="0.6210%" height="15" fill="rgb(243,110,44)" fg:x="4503" fg:w="79"/><text x="35.6454%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (76 samples, 0.60%)</title><rect x="35.4190%" y="197" width="0.5974%" height="15" fill="rgb(222,74,54)" fg:x="4506" fg:w="76"/><text x="35.6690%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (72 samples, 0.57%)</title><rect x="35.4504%" y="181" width="0.5659%" height="15" fill="rgb(216,99,12)" fg:x="4510" fg:w="72"/><text x="35.7004%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (66 samples, 0.52%)</title><rect x="35.4976%" y="165" width="0.5188%" height="15" fill="rgb(226,22,26)" fg:x="4516" fg:w="66"/><text x="35.7476%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (53 samples, 0.42%)</title><rect x="35.5997%" y="149" width="0.4166%" height="15" fill="rgb(217,163,10)" fg:x="4529" fg:w="53"/><text x="35.8497%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (19 samples, 0.15%)</title><rect x="35.8670%" y="133" width="0.1493%" height="15" fill="rgb(213,25,53)" fg:x="4563" fg:w="19"/><text x="36.1170%" y="143.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (80 samples, 0.63%)</title><rect x="35.3954%" y="229" width="0.6288%" height="15" fill="rgb(252,105,26)" fg:x="4503" fg:w="80"/><text x="35.6454%" y="239.50"></text></g><g><title>fekan`fekan::validate_model (84 samples, 0.66%)</title><rect x="35.3797%" y="245" width="0.6603%" height="15" fill="rgb(220,39,43)" fg:x="4501" fg:w="84"/><text x="35.6297%" y="255.50"></text></g><g><title>fekan`rand::rng::Rng::gen_range (2 samples, 0.02%)</title><rect x="36.0399%" y="245" width="0.0157%" height="15" fill="rgb(229,68,48)" fg:x="4585" fg:w="2"/><text x="36.2899%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="36.0557%" y="245" width="0.0472%" height="15" fill="rgb(252,8,32)" fg:x="4587" fg:w="6"/><text x="36.3057%" y="255.50"></text></g><g><title>fekan`main (4,596 samples, 36.13%)</title><rect x="0.0000%" y="325" width="36.1264%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="4596"/><text x="0.2500%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (4,596 samples, 36.13%)</title><rect x="0.0000%" y="309" width="36.1264%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="4596"/><text x="0.2500%" y="319.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (4,596 samples, 36.13%)</title><rect x="0.0000%" y="293" width="36.1264%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="4596"/><text x="0.2500%" y="303.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (4,596 samples, 36.13%)</title><rect x="0.0000%" y="277" width="36.1264%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="4596"/><text x="0.2500%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (4,596 samples, 36.13%)</title><rect x="0.0000%" y="261" width="36.1264%" height="15" fill="rgb(249,174,33)" fg:x="0" fg:w="4596"/><text x="0.2500%" y="271.50">fekan`fekan::main</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="36.1107%" y="245" width="0.0157%" height="15" fill="rgb(233,201,37)" fg:x="4594" fg:w="2"/><text x="36.3607%" y="255.50"></text></g><g><title>dyld`start (4,597 samples, 36.13%)</title><rect x="0.0000%" y="341" width="36.1343%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="4597"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.03%)</title><rect x="36.1421%" y="341" width="0.0314%" height="15" fill="rgb(250,127,30)" fg:x="4598" fg:w="4"/><text x="36.3921%" y="351.50"></text></g><g><title>fekan`DYLD-STUB$$free (5 samples, 0.04%)</title><rect x="36.2207%" y="261" width="0.0393%" height="15" fill="rgb(230,49,44)" fg:x="4608" fg:w="5"/><text x="36.4707%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="36.4251%" y="245" width="0.0314%" height="15" fill="rgb(229,67,23)" fg:x="4634" fg:w="4"/><text x="36.6751%" y="255.50"></text></g><g><title>fekan`fekan::calculate_huber_loss_and_gradient (27 samples, 0.21%)</title><rect x="36.2600%" y="261" width="0.2122%" height="15" fill="rgb(249,83,47)" fg:x="4613" fg:w="27"/><text x="36.5100%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="36.4565%" y="245" width="0.0157%" height="15" fill="rgb(215,43,3)" fg:x="4638" fg:w="2"/><text x="36.7065%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (12 samples, 0.09%)</title><rect x="36.5744%" y="213" width="0.0943%" height="15" fill="rgb(238,154,13)" fg:x="4653" fg:w="12"/><text x="36.8244%" y="223.50"></text></g><g><title>fekan`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (15 samples, 0.12%)</title><rect x="36.5666%" y="229" width="0.1179%" height="15" fill="rgb(219,56,2)" fg:x="4652" fg:w="15"/><text x="36.8166%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="36.6688%" y="213" width="0.0157%" height="15" fill="rgb(233,0,4)" fg:x="4665" fg:w="2"/><text x="36.9188%" y="223.50"></text></g><g><title>fekan`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::make_contiguous (2 samples, 0.02%)</title><rect x="36.6845%" y="229" width="0.0157%" height="15" fill="rgb(235,30,7)" fg:x="4667" fg:w="2"/><text x="36.9345%" y="239.50"></text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,657 samples, 13.02%)</title><rect x="38.1858%" y="197" width="13.0247%" height="15" fill="rgb(250,79,13)" fg:x="4858" fg:w="1657"/><text x="38.4358%" y="207.50">fekan`&lt;core::iter::a..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (746 samples, 5.86%)</title><rect x="45.3466%" y="181" width="5.8639%" height="15" fill="rgb(211,146,34)" fg:x="5769" fg:w="746"/><text x="45.5966%" y="191.50">fekan`f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (1,107 samples, 8.70%)</title><rect x="51.2105%" y="197" width="8.7015%" height="15" fill="rgb(228,22,38)" fg:x="6515" fg:w="1107"/><text x="51.4605%" y="207.50">fekan`fekan:..</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.02%)</title><rect x="59.9513%" y="165" width="0.0236%" height="15" fill="rgb(235,168,5)" fg:x="7627" fg:w="3"/><text x="60.2013%" y="175.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,811 samples, 22.10%)</title><rect x="37.9264%" y="213" width="22.0956%" height="15" fill="rgb(221,155,16)" fg:x="4825" fg:w="2811"/><text x="38.1764%" y="223.50">fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc:..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.11%)</title><rect x="59.9120%" y="197" width="0.1100%" height="15" fill="rgb(215,215,53)" fg:x="7622" fg:w="14"/><text x="60.1620%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.10%)</title><rect x="59.9198%" y="181" width="0.1022%" height="15" fill="rgb(223,4,10)" fg:x="7623" fg:w="13"/><text x="60.1698%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.05%)</title><rect x="59.9748%" y="165" width="0.0472%" height="15" fill="rgb(234,103,6)" fg:x="7630" fg:w="6"/><text x="60.2248%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (122 samples, 0.96%)</title><rect x="60.0299%" y="213" width="0.9590%" height="15" fill="rgb(227,97,0)" fg:x="7637" fg:w="122"/><text x="60.2799%" y="223.50"></text></g><g><title>fekan`log::__private_api::log_impl (5 samples, 0.04%)</title><rect x="60.9888%" y="213" width="0.0393%" height="15" fill="rgb(234,150,53)" fg:x="7759" fg:w="5"/><text x="61.2388%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.09%)</title><rect x="61.0517%" y="213" width="0.0943%" height="15" fill="rgb(228,201,54)" fg:x="7767" fg:w="12"/><text x="61.3017%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.07%)</title><rect x="61.0753%" y="197" width="0.0707%" height="15" fill="rgb(222,22,37)" fg:x="7770" fg:w="9"/><text x="61.3253%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="61.1460%" y="213" width="0.0157%" height="15" fill="rgb(237,53,32)" fg:x="7779" fg:w="2"/><text x="61.3960%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (3,118 samples, 24.51%)</title><rect x="36.7002%" y="229" width="24.5087%" height="15" fill="rgb(233,25,53)" fg:x="4669" fg:w="3118"/><text x="36.9502%" y="239.50">fekan`fekan::kan_layer::edge::Edge::bac..</text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.04%)</title><rect x="61.1696%" y="213" width="0.0393%" height="15" fill="rgb(210,40,34)" fg:x="7782" fg:w="5"/><text x="61.4196%" y="223.50"></text></g><g><title>fekan`log::__private_api::log_impl (2 samples, 0.02%)</title><rect x="61.2168%" y="229" width="0.0157%" height="15" fill="rgb(241,220,44)" fg:x="7788" fg:w="2"/><text x="61.4668%" y="239.50"></text></g><g><title>fekan`&lt;fekan::TrainingProgress as log::Log&gt;::log (2 samples, 0.02%)</title><rect x="61.2168%" y="213" width="0.0157%" height="15" fill="rgb(235,28,35)" fg:x="7788" fg:w="2"/><text x="61.4668%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="61.2404%" y="229" width="0.0236%" height="15" fill="rgb(210,56,17)" fg:x="7791" fg:w="3"/><text x="61.4904%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.02%)</title><rect x="61.2718%" y="229" width="0.0157%" height="15" fill="rgb(224,130,29)" fg:x="7795" fg:w="2"/><text x="61.5218%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.02%)</title><rect x="61.2875%" y="229" width="0.0236%" height="15" fill="rgb(235,212,8)" fg:x="7797" fg:w="3"/><text x="61.5375%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="61.2875%" y="213" width="0.0236%" height="15" fill="rgb(223,33,50)" fg:x="7797" fg:w="3"/><text x="61.5375%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="61.3190%" y="229" width="0.0236%" height="15" fill="rgb(219,149,13)" fg:x="7801" fg:w="3"/><text x="61.5690%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (3,163 samples, 24.86%)</title><rect x="36.4880%" y="245" width="24.8624%" height="15" fill="rgb(250,156,29)" fg:x="4642" fg:w="3163"/><text x="36.7380%" y="255.50">fekan`fekan::kan_layer::KanLayer::backwa..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (24 samples, 0.19%)</title><rect x="61.3661%" y="245" width="0.1886%" height="15" fill="rgb(216,193,19)" fg:x="7807" fg:w="24"/><text x="61.6161%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (3,193 samples, 25.10%)</title><rect x="36.4723%" y="261" width="25.0983%" height="15" fill="rgb(216,135,14)" fg:x="4640" fg:w="3193"/><text x="36.7223%" y="271.50">fekan`fekan::kan::Kan::backward</text></g><g><title>fekan`fekan::kan::Kan::clear_samples (11 samples, 0.09%)</title><rect x="61.5705%" y="261" width="0.0865%" height="15" fill="rgb(241,47,5)" fg:x="7833" fg:w="11"/><text x="61.8205%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.08%)</title><rect x="61.5784%" y="245" width="0.0786%" height="15" fill="rgb(233,42,35)" fg:x="7834" fg:w="10"/><text x="61.8284%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (6 samples, 0.05%)</title><rect x="61.7827%" y="213" width="0.0472%" height="15" fill="rgb(231,13,6)" fg:x="7860" fg:w="6"/><text x="62.0327%" y="223.50"></text></g><g><title>fekan`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9 samples, 0.07%)</title><rect x="61.7670%" y="229" width="0.0707%" height="15" fill="rgb(207,181,40)" fg:x="7858" fg:w="9"/><text x="62.0170%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (4 samples, 0.03%)</title><rect x="62.0421%" y="213" width="0.0314%" height="15" fill="rgb(254,173,49)" fg:x="7893" fg:w="4"/><text x="62.2921%" y="223.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="62.0421%" y="197" width="0.0314%" height="15" fill="rgb(221,1,38)" fg:x="7893" fg:w="4"/><text x="62.2921%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (4 samples, 0.03%)</title><rect x="62.0421%" y="181" width="0.0314%" height="15" fill="rgb(206,124,46)" fg:x="7893" fg:w="4"/><text x="62.2921%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.03%)</title><rect x="62.0421%" y="165" width="0.0314%" height="15" fill="rgb(249,21,11)" fg:x="7893" fg:w="4"/><text x="62.2921%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="62.0421%" y="149" width="0.0314%" height="15" fill="rgb(222,201,40)" fg:x="7893" fg:w="4"/><text x="62.2921%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (304 samples, 2.39%)</title><rect x="68.7313%" y="181" width="2.3896%" height="15" fill="rgb(235,61,29)" fg:x="8744" fg:w="304"/><text x="68.9813%" y="191.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (176 samples, 1.38%)</title><rect x="69.7375%" y="165" width="1.3834%" height="15" fill="rgb(219,207,3)" fg:x="8872" fg:w="176"/><text x="69.9875%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (157 samples, 1.23%)</title><rect x="71.1209%" y="181" width="1.2341%" height="15" fill="rgb(222,56,46)" fg:x="9048" fg:w="157"/><text x="71.3709%" y="191.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="74.2965%" y="165" width="0.0157%" height="15" fill="rgb(239,76,54)" fg:x="9452" fg:w="2"/><text x="74.5465%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (1,077 samples, 8.47%)</title><rect x="65.8544%" y="197" width="8.4657%" height="15" fill="rgb(231,124,27)" fg:x="8378" fg:w="1077"/><text x="66.1044%" y="207.50">fekan`fekan:..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (250 samples, 1.97%)</title><rect x="72.3550%" y="181" width="1.9651%" height="15" fill="rgb(249,195,6)" fg:x="9205" fg:w="250"/><text x="72.6050%" y="191.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (1,787 samples, 14.05%)</title><rect x="62.0736%" y="213" width="14.0465%" height="15" fill="rgb(237,174,47)" fg:x="7897" fg:w="1787"/><text x="62.3236%" y="223.50">fekan`fekan::kan_laye..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (229 samples, 1.80%)</title><rect x="74.3201%" y="197" width="1.8000%" height="15" fill="rgb(206,201,31)" fg:x="9455" fg:w="229"/><text x="74.5701%" y="207.50">f..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="76.1044%" y="181" width="0.0157%" height="15" fill="rgb(231,57,52)" fg:x="9682" fg:w="2"/><text x="76.3544%" y="191.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 0.27%)</title><rect x="76.1201%" y="213" width="0.2673%" height="15" fill="rgb(248,177,22)" fg:x="9684" fg:w="34"/><text x="76.3701%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="76.3952%" y="181" width="0.0157%" height="15" fill="rgb(215,211,37)" fg:x="9719" fg:w="2"/><text x="76.6452%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::forward (1,853 samples, 14.57%)</title><rect x="61.8535%" y="229" width="14.5653%" height="15" fill="rgb(241,128,51)" fg:x="7869" fg:w="1853"/><text x="62.1035%" y="239.50">fekan`fekan::kan_layer..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.03%)</title><rect x="76.3874%" y="213" width="0.0314%" height="15" fill="rgb(227,165,31)" fg:x="9718" fg:w="4"/><text x="76.6374%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.02%)</title><rect x="76.3952%" y="197" width="0.0236%" height="15" fill="rgb(228,167,24)" fg:x="9719" fg:w="3"/><text x="76.6452%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (36 samples, 0.28%)</title><rect x="76.4188%" y="229" width="0.2830%" height="15" fill="rgb(228,143,12)" fg:x="9722" fg:w="36"/><text x="76.6688%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="76.7096%" y="229" width="0.0236%" height="15" fill="rgb(249,149,8)" fg:x="9759" fg:w="3"/><text x="76.9596%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.03%)</title><rect x="76.7332%" y="229" width="0.0314%" height="15" fill="rgb(243,35,44)" fg:x="9762" fg:w="4"/><text x="76.9832%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="76.7489%" y="213" width="0.0157%" height="15" fill="rgb(246,89,9)" fg:x="9764" fg:w="2"/><text x="76.9989%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.05%)</title><rect x="76.7804%" y="229" width="0.0472%" height="15" fill="rgb(233,213,13)" fg:x="9768" fg:w="6"/><text x="77.0304%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (1,930 samples, 15.17%)</title><rect x="61.6648%" y="245" width="15.1706%" height="15" fill="rgb(233,141,41)" fg:x="7845" fg:w="1930"/><text x="61.9148%" y="255.50">fekan`fekan::kan_layer:..</text></g><g><title>fekan`fekan::kan::Kan::forward (1,932 samples, 15.19%)</title><rect x="61.6570%" y="261" width="15.1863%" height="15" fill="rgb(239,167,4)" fg:x="7844" fg:w="1932"/><text x="61.9070%" y="271.50">fekan`fekan::kan::Kan::..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="76.9454%" y="165" width="0.0157%" height="15" fill="rgb(209,217,16)" fg:x="9789" fg:w="2"/><text x="77.1954%" y="175.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (7 samples, 0.06%)</title><rect x="76.9297%" y="229" width="0.0550%" height="15" fill="rgb(219,88,35)" fg:x="9787" fg:w="7"/><text x="77.1797%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (7 samples, 0.06%)</title><rect x="76.9297%" y="213" width="0.0550%" height="15" fill="rgb(220,193,23)" fg:x="9787" fg:w="7"/><text x="77.1797%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.06%)</title><rect x="76.9297%" y="197" width="0.0550%" height="15" fill="rgb(230,90,52)" fg:x="9787" fg:w="7"/><text x="77.1797%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (6 samples, 0.05%)</title><rect x="76.9376%" y="181" width="0.0472%" height="15" fill="rgb(252,106,19)" fg:x="9788" fg:w="6"/><text x="77.1876%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.02%)</title><rect x="76.9612%" y="165" width="0.0236%" height="15" fill="rgb(206,74,20)" fg:x="9791" fg:w="3"/><text x="77.2112%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.02%)</title><rect x="77.0948%" y="181" width="0.0157%" height="15" fill="rgb(230,138,44)" fg:x="9808" fg:w="2"/><text x="77.3448%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.02%)</title><rect x="77.1105%" y="181" width="0.0157%" height="15" fill="rgb(235,182,43)" fg:x="9810" fg:w="2"/><text x="77.3605%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.02%)</title><rect x="77.1891%" y="165" width="0.0236%" height="15" fill="rgb(242,16,51)" fg:x="9820" fg:w="3"/><text x="77.4391%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (3 samples, 0.02%)</title><rect x="77.1891%" y="149" width="0.0236%" height="15" fill="rgb(248,9,4)" fg:x="9820" fg:w="3"/><text x="77.4391%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (22 samples, 0.17%)</title><rect x="77.1262%" y="181" width="0.1729%" height="15" fill="rgb(210,31,22)" fg:x="9812" fg:w="22"/><text x="77.3762%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (11 samples, 0.09%)</title><rect x="77.2127%" y="165" width="0.0865%" height="15" fill="rgb(239,54,39)" fg:x="9823" fg:w="11"/><text x="77.4627%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.05%)</title><rect x="77.2520%" y="149" width="0.0472%" height="15" fill="rgb(230,99,41)" fg:x="9828" fg:w="6"/><text x="77.5020%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (41 samples, 0.32%)</title><rect x="76.9848%" y="229" width="0.3223%" height="15" fill="rgb(253,106,12)" fg:x="9794" fg:w="41"/><text x="77.2348%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (41 samples, 0.32%)</title><rect x="76.9848%" y="213" width="0.3223%" height="15" fill="rgb(213,46,41)" fg:x="9794" fg:w="41"/><text x="77.2348%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (39 samples, 0.31%)</title><rect x="77.0005%" y="197" width="0.3066%" height="15" fill="rgb(215,133,35)" fg:x="9796" fg:w="39"/><text x="77.2505%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (6 samples, 0.05%)</title><rect x="77.3227%" y="181" width="0.0472%" height="15" fill="rgb(213,28,5)" fg:x="9837" fg:w="6"/><text x="77.5727%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (6 samples, 0.05%)</title><rect x="77.3227%" y="165" width="0.0472%" height="15" fill="rgb(215,77,49)" fg:x="9837" fg:w="6"/><text x="77.5727%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.02%)</title><rect x="77.3463%" y="149" width="0.0236%" height="15" fill="rgb(248,100,22)" fg:x="9840" fg:w="3"/><text x="77.5963%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="77.3542%" y="133" width="0.0157%" height="15" fill="rgb(208,67,9)" fg:x="9841" fg:w="2"/><text x="77.6042%" y="143.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (7 samples, 0.06%)</title><rect x="77.3227%" y="197" width="0.0550%" height="15" fill="rgb(219,133,21)" fg:x="9837" fg:w="7"/><text x="77.5727%" y="207.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 0.06%)</title><rect x="77.3227%" y="213" width="0.0629%" height="15" fill="rgb(246,46,29)" fg:x="9837" fg:w="8"/><text x="77.5727%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::update_knots_from_samples (15 samples, 0.12%)</title><rect x="77.3070%" y="229" width="0.1179%" height="15" fill="rgb(246,185,52)" fg:x="9835" fg:w="15"/><text x="77.5570%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.04%)</title><rect x="77.3856%" y="213" width="0.0393%" height="15" fill="rgb(252,136,11)" fg:x="9845" fg:w="5"/><text x="77.6356%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (225 samples, 1.77%)</title><rect x="76.8590%" y="245" width="1.7686%" height="15" fill="rgb(219,138,53)" fg:x="9778" fg:w="225"/><text x="77.1090%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (152 samples, 1.19%)</title><rect x="77.4328%" y="229" width="1.1948%" height="15" fill="rgb(211,51,23)" fg:x="9851" fg:w="152"/><text x="77.6828%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (228 samples, 1.79%)</title><rect x="76.8511%" y="261" width="1.7922%" height="15" fill="rgb(247,221,28)" fg:x="9777" fg:w="228"/><text x="77.1011%" y="271.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (13 samples, 0.10%)</title><rect x="78.6433%" y="261" width="0.1022%" height="15" fill="rgb(251,222,45)" fg:x="10005" fg:w="13"/><text x="78.8933%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$cbrt (7 samples, 0.06%)</title><rect x="83.7368%" y="245" width="0.0550%" height="15" fill="rgb(217,162,53)" fg:x="10653" fg:w="7"/><text x="83.9868%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$exp (5 samples, 0.04%)</title><rect x="83.7919%" y="245" width="0.0393%" height="15" fill="rgb(229,93,14)" fg:x="10660" fg:w="5"/><text x="84.0419%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$log (5 samples, 0.04%)</title><rect x="83.8312%" y="245" width="0.0393%" height="15" fill="rgb(209,67,49)" fg:x="10665" fg:w="5"/><text x="84.0812%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$pow (14 samples, 0.11%)</title><rect x="83.8705%" y="245" width="0.1100%" height="15" fill="rgb(213,87,29)" fg:x="10670" fg:w="14"/><text x="84.1205%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$sin (6 samples, 0.05%)</title><rect x="83.9805%" y="245" width="0.0472%" height="15" fill="rgb(205,151,52)" fg:x="10684" fg:w="6"/><text x="84.2305%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$tan (11 samples, 0.09%)</title><rect x="84.0277%" y="245" width="0.0865%" height="15" fill="rgb(253,215,39)" fg:x="10690" fg:w="11"/><text x="84.2777%" y="255.50"></text></g><g><title>fekan`__rdl_alloc (3 samples, 0.02%)</title><rect x="84.1141%" y="245" width="0.0236%" height="15" fill="rgb(221,220,41)" fg:x="10701" fg:w="3"/><text x="84.3641%" y="255.50"></text></g><g><title>libsystem_m.dylib`0x000000019a1989e4 (33 samples, 0.26%)</title><rect x="88.4059%" y="229" width="0.2594%" height="15" fill="rgb(218,133,21)" fg:x="11247" fg:w="33"/><text x="88.6559%" y="239.50"></text></g><g><title>libsystem_m.dylib`0x000000019a198afc (33 samples, 0.26%)</title><rect x="88.6653%" y="229" width="0.2594%" height="15" fill="rgb(221,193,43)" fg:x="11280" fg:w="33"/><text x="88.9153%" y="239.50"></text></g><g><title>libsystem_m.dylib`cbrt (77 samples, 0.61%)</title><rect x="88.9247%" y="229" width="0.6053%" height="15" fill="rgb(240,128,52)" fg:x="11313" fg:w="77"/><text x="89.1747%" y="239.50"></text></g><g><title>libsystem_m.dylib`exp (76 samples, 0.60%)</title><rect x="89.5299%" y="229" width="0.5974%" height="15" fill="rgb(253,114,12)" fg:x="11390" fg:w="76"/><text x="89.7799%" y="239.50"></text></g><g><title>libsystem_m.dylib`log (74 samples, 0.58%)</title><rect x="90.1273%" y="229" width="0.5817%" height="15" fill="rgb(215,223,47)" fg:x="11466" fg:w="74"/><text x="90.3773%" y="239.50"></text></g><g><title>libsystem_m.dylib`pow (500 samples, 3.93%)</title><rect x="90.7090%" y="229" width="3.9302%" height="15" fill="rgb(248,225,23)" fg:x="11540" fg:w="500"/><text x="90.9590%" y="239.50">libs..</text></g><g><title>libsystem_m.dylib`sin (54 samples, 0.42%)</title><rect x="94.6392%" y="229" width="0.4245%" height="15" fill="rgb(250,108,0)" fg:x="12040" fg:w="54"/><text x="94.8892%" y="239.50"></text></g><g><title>libsystem_m.dylib`tan (137 samples, 1.08%)</title><rect x="95.0637%" y="229" width="1.0769%" height="15" fill="rgb(228,208,7)" fg:x="12094" fg:w="137"/><text x="95.3137%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (5 samples, 0.04%)</title><rect x="96.2191%" y="213" width="0.0393%" height="15" fill="rgb(244,45,10)" fg:x="12241" fg:w="5"/><text x="96.4691%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="96.2584%" y="213" width="0.0157%" height="15" fill="rgb(207,125,25)" fg:x="12246" fg:w="2"/><text x="96.5084%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.10%)</title><rect x="96.4471%" y="197" width="0.1022%" height="15" fill="rgb(210,195,18)" fg:x="12270" fg:w="13"/><text x="96.6971%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="96.7930%" y="181" width="0.0157%" height="15" fill="rgb(249,80,12)" fg:x="12314" fg:w="2"/><text x="97.0430%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (91 samples, 0.72%)</title><rect x="96.1484%" y="229" width="0.7153%" height="15" fill="rgb(221,65,9)" fg:x="12232" fg:w="91"/><text x="96.3984%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (75 samples, 0.59%)</title><rect x="96.2742%" y="213" width="0.5895%" height="15" fill="rgb(235,49,36)" fg:x="12248" fg:w="75"/><text x="96.5242%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (40 samples, 0.31%)</title><rect x="96.5493%" y="197" width="0.3144%" height="15" fill="rgb(225,32,20)" fg:x="12283" fg:w="40"/><text x="96.7993%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.06%)</title><rect x="96.8087%" y="181" width="0.0550%" height="15" fill="rgb(215,141,46)" fg:x="12316" fg:w="7"/><text x="97.0587%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (1,620 samples, 12.73%)</title><rect x="84.1377%" y="245" width="12.7338%" height="15" fill="rgb(250,160,47)" fg:x="10704" fg:w="1620"/><text x="84.3877%" y="255.50">fekan`fekan::kan_la..</text></g><g><title>libsystem_m.dylib`cbrt (15 samples, 0.12%)</title><rect x="96.8873%" y="245" width="0.1179%" height="15" fill="rgb(216,222,40)" fg:x="12326" fg:w="15"/><text x="97.1373%" y="255.50"></text></g><g><title>libsystem_m.dylib`log (4 samples, 0.03%)</title><rect x="97.0130%" y="245" width="0.0314%" height="15" fill="rgb(234,217,39)" fg:x="12342" fg:w="4"/><text x="97.2630%" y="255.50"></text></g><g><title>libsystem_m.dylib`pow (3 samples, 0.02%)</title><rect x="97.0445%" y="245" width="0.0236%" height="15" fill="rgb(207,178,40)" fg:x="12346" fg:w="3"/><text x="97.2945%" y="255.50"></text></g><g><title>libsystem_m.dylib`sin (9 samples, 0.07%)</title><rect x="97.0681%" y="245" width="0.0707%" height="15" fill="rgb(221,136,13)" fg:x="12349" fg:w="9"/><text x="97.3181%" y="255.50"></text></g><g><title>libsystem_m.dylib`tan (10 samples, 0.08%)</title><rect x="97.1388%" y="245" width="0.0786%" height="15" fill="rgb(249,199,10)" fg:x="12358" fg:w="10"/><text x="97.3888%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.05%)</title><rect x="97.2253%" y="245" width="0.0472%" height="15" fill="rgb(249,222,13)" fg:x="12369" fg:w="6"/><text x="97.4753%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="97.2724%" y="245" width="0.0314%" height="15" fill="rgb(244,185,38)" fg:x="12375" fg:w="4"/><text x="97.5224%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (7 samples, 0.06%)</title><rect x="97.5947%" y="229" width="0.0550%" height="15" fill="rgb(236,202,9)" fg:x="12416" fg:w="7"/><text x="97.8447%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.02%)</title><rect x="97.6497%" y="229" width="0.0157%" height="15" fill="rgb(250,229,37)" fg:x="12423" fg:w="2"/><text x="97.8997%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.05%)</title><rect x="97.6655%" y="229" width="0.0472%" height="15" fill="rgb(206,174,23)" fg:x="12425" fg:w="6"/><text x="97.9155%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.18%)</title><rect x="98.7974%" y="213" width="0.1808%" height="15" fill="rgb(211,33,43)" fg:x="12569" fg:w="23"/><text x="99.0474%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (229 samples, 1.80%)</title><rect x="97.3039%" y="245" width="1.8000%" height="15" fill="rgb(245,58,50)" fg:x="12379" fg:w="229"/><text x="97.5539%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (177 samples, 1.39%)</title><rect x="97.7126%" y="229" width="1.3913%" height="15" fill="rgb(244,68,36)" fg:x="12431" fg:w="177"/><text x="97.9626%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (16 samples, 0.13%)</title><rect x="98.9781%" y="213" width="0.1258%" height="15" fill="rgb(232,229,15)" fg:x="12592" fg:w="16"/><text x="99.2281%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.02%)</title><rect x="99.1039%" y="245" width="0.0236%" height="15" fill="rgb(254,30,23)" fg:x="12608" fg:w="3"/><text x="99.3539%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11 samples, 0.09%)</title><rect x="99.1354%" y="245" width="0.0865%" height="15" fill="rgb(235,160,14)" fg:x="12612" fg:w="11"/><text x="99.3854%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::parameter_search (2,624 samples, 20.63%)</title><rect x="78.7455%" y="261" width="20.6257%" height="15" fill="rgb(212,155,44)" fg:x="10018" fg:w="2624"/><text x="78.9955%" y="271.50">fekan`fekan::kan_layer::edge::Ed..</text></g><g><title>libsystem_platform.dylib`_platform_memset (19 samples, 0.15%)</title><rect x="99.2218%" y="245" width="0.1493%" height="15" fill="rgb(226,2,50)" fg:x="12623" fg:w="19"/><text x="99.4718%" y="255.50"></text></g><g><title>fekan`fekan::split_sample_batch (11 samples, 0.09%)</title><rect x="99.3712%" y="261" width="0.0865%" height="15" fill="rgb(234,177,6)" fg:x="12642" fg:w="11"/><text x="99.6212%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (9 samples, 0.07%)</title><rect x="99.3869%" y="245" width="0.0707%" height="15" fill="rgb(217,24,9)" fg:x="12644" fg:w="9"/><text x="99.6369%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_free (15 samples, 0.12%)</title><rect x="99.4655%" y="261" width="0.1179%" height="15" fill="rgb(220,13,46)" fg:x="12654" fg:w="15"/><text x="99.7155%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="99.5834%" y="261" width="0.0236%" height="15" fill="rgb(239,221,27)" fg:x="12669" fg:w="3"/><text x="99.8334%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (15 samples, 0.12%)</title><rect x="99.6070%" y="261" width="0.1179%" height="15" fill="rgb(222,198,25)" fg:x="12672" fg:w="15"/><text x="99.8570%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.04%)</title><rect x="99.7249%" y="261" width="0.0393%" height="15" fill="rgb(211,99,13)" fg:x="12687" fg:w="5"/><text x="99.9749%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.16%)</title><rect x="99.7642%" y="261" width="0.1572%" height="15" fill="rgb(232,111,31)" fg:x="12692" fg:w="20"/><text x="100.0142%" y="271.50"></text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (8,111 samples, 63.76%)</title><rect x="36.1971%" y="277" width="63.7557%" height="15" fill="rgb(245,82,37)" fg:x="4605" fg:w="8111"/><text x="36.4471%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="99.9214%" y="261" width="0.0314%" height="15" fill="rgb(227,149,46)" fg:x="12712" fg:w="4"/><text x="100.1714%" y="271.50"></text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (8,114 samples, 63.78%)</title><rect x="36.1893%" y="293" width="63.7793%" height="15" fill="rgb(218,36,50)" fg:x="4604" fg:w="8114"/><text x="36.4393%" y="303.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (8,117 samples, 63.80%)</title><rect x="36.1893%" y="309" width="63.8029%" height="15" fill="rgb(226,80,48)" fg:x="4604" fg:w="8117"/><text x="36.4393%" y="319.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (12,722 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(238,224,15)" fg:x="0" fg:w="12722"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (8,120 samples, 63.83%)</title><rect x="36.1736%" y="341" width="63.8264%" height="15" fill="rgb(241,136,10)" fg:x="4602" fg:w="8120"/><text x="36.4236%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (8,118 samples, 63.81%)</title><rect x="36.1893%" y="325" width="63.8107%" height="15" fill="rgb(208,32,45)" fg:x="4604" fg:w="8118"/><text x="36.4393%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g></svg></svg>