<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="10762"><g><title>fekan`fekan::split_data (3 samples, 0.03%)</title><rect x="0.0093%" y="229" width="0.0279%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2593%" y="239.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (92 samples, 0.85%)</title><rect x="0.1115%" y="85" width="0.8549%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="92"/><text x="0.3615%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.85%)</title><rect x="0.1208%" y="69" width="0.8456%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="91"/><text x="0.3708%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (89 samples, 0.83%)</title><rect x="0.1394%" y="53" width="0.8270%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="89"/><text x="0.3894%" y="63.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="1.0500%" y="53" width="0.0186%" height="15" fill="rgb(208,68,35)" fg:x="113" fg:w="2"/><text x="1.3000%" y="63.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.02%)</title><rect x="1.1057%" y="37" width="0.0186%" height="15" fill="rgb(232,128,0)" fg:x="119" fg:w="2"/><text x="1.3557%" y="47.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,501 samples, 13.95%)</title><rect x="0.9757%" y="69" width="13.9472%" height="15" fill="rgb(207,160,47)" fg:x="105" fg:w="1501"/><text x="1.2257%" y="79.50">fekan`serde_json::de:..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,491 samples, 13.85%)</title><rect x="1.0686%" y="53" width="13.8543%" height="15" fill="rgb(228,23,34)" fg:x="115" fg:w="1491"/><text x="1.3186%" y="63.50">fekan`&lt;std::io::Bytes..</text></g><g><title>libsystem_kernel.dylib`read (1,485 samples, 13.80%)</title><rect x="1.1243%" y="37" width="13.7986%" height="15" fill="rgb(218,30,26)" fg:x="121" fg:w="1485"/><text x="1.3743%" y="47.50">libsystem_kernel.dyli..</text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,597 samples, 14.84%)</title><rect x="0.0929%" y="101" width="14.8392%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="1597"/><text x="0.3429%" y="111.50">fekan`&lt;core::marker::Ph..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,503 samples, 13.97%)</title><rect x="0.9664%" y="85" width="13.9658%" height="15" fill="rgb(250,228,42)" fg:x="104" fg:w="1503"/><text x="1.2164%" y="95.50">fekan`serde_json::de:..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (125 samples, 1.16%)</title><rect x="14.9322%" y="101" width="1.1615%" height="15" fill="rgb(240,193,28)" fg:x="1607" fg:w="125"/><text x="15.1822%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (124 samples, 1.15%)</title><rect x="14.9415%" y="85" width="1.1522%" height="15" fill="rgb(216,20,37)" fg:x="1608" fg:w="124"/><text x="15.1915%" y="95.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,725 samples, 16.03%)</title><rect x="0.0743%" y="117" width="16.0286%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1725"/><text x="0.3243%" y="127.50">fekan`&lt;serde_json::de::Se..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,727 samples, 16.05%)</title><rect x="0.0743%" y="133" width="16.0472%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1727"/><text x="0.3243%" y="143.50">fekan`&lt;serde::de::impls::..</text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.02%)</title><rect x="16.1030%" y="117" width="0.0186%" height="15" fill="rgb(231,73,38)" fg:x="1733" fg:w="2"/><text x="16.3530%" y="127.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (2 samples, 0.02%)</title><rect x="16.1215%" y="133" width="0.0186%" height="15" fill="rgb(225,20,46)" fg:x="1735" fg:w="2"/><text x="16.3715%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,803 samples, 16.75%)</title><rect x="0.0743%" y="149" width="16.7534%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1803"/><text x="0.3243%" y="159.50">fekan`&lt;&amp;mut serde_json::de..</text></g><g><title>libsystem_kernel.dylib`read (73 samples, 0.68%)</title><rect x="16.1494%" y="133" width="0.6783%" height="15" fill="rgb(221,200,47)" fg:x="1738" fg:w="73"/><text x="16.3994%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.71%)</title><rect x="16.8463%" y="133" width="0.7062%" height="15" fill="rgb(226,26,5)" fg:x="1813" fg:w="76"/><text x="17.0963%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (76 samples, 0.71%)</title><rect x="16.8463%" y="117" width="0.7062%" height="15" fill="rgb(249,33,26)" fg:x="1813" fg:w="76"/><text x="17.0963%" y="127.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (40 samples, 0.37%)</title><rect x="17.5618%" y="133" width="0.3717%" height="15" fill="rgb(235,183,28)" fg:x="1890" fg:w="40"/><text x="17.8118%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.37%)</title><rect x="17.5618%" y="117" width="0.3717%" height="15" fill="rgb(221,5,38)" fg:x="1890" fg:w="40"/><text x="17.8118%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (40 samples, 0.37%)</title><rect x="17.5618%" y="101" width="0.3717%" height="15" fill="rgb(247,18,42)" fg:x="1890" fg:w="40"/><text x="17.8118%" y="111.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.03%)</title><rect x="17.9521%" y="85" width="0.0279%" height="15" fill="rgb(241,131,45)" fg:x="1932" fg:w="3"/><text x="18.2021%" y="95.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.02%)</title><rect x="17.9799%" y="85" width="0.0186%" height="15" fill="rgb(249,31,29)" fg:x="1935" fg:w="2"/><text x="18.2299%" y="95.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (806 samples, 7.49%)</title><rect x="16.8277%" y="149" width="7.4893%" height="15" fill="rgb(225,111,53)" fg:x="1811" fg:w="806"/><text x="17.0777%" y="159.50">fekan`&lt;cor..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (687 samples, 6.38%)</title><rect x="17.9335%" y="133" width="6.3836%" height="15" fill="rgb(238,160,17)" fg:x="1930" fg:w="687"/><text x="18.1835%" y="143.50">fekan`se..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (686 samples, 6.37%)</title><rect x="17.9428%" y="117" width="6.3743%" height="15" fill="rgb(214,148,48)" fg:x="1931" fg:w="686"/><text x="18.1928%" y="127.50">fekan`se..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (686 samples, 6.37%)</title><rect x="17.9428%" y="101" width="6.3743%" height="15" fill="rgb(232,36,49)" fg:x="1931" fg:w="686"/><text x="18.1928%" y="111.50">fekan`&lt;s..</text></g><g><title>libsystem_kernel.dylib`read (680 samples, 6.32%)</title><rect x="17.9985%" y="85" width="6.3185%" height="15" fill="rgb(209,103,24)" fg:x="1937" fg:w="680"/><text x="18.2485%" y="95.50">libsyste..</text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.02%)</title><rect x="24.3542%" y="117" width="0.0186%" height="15" fill="rgb(229,88,8)" fg:x="2621" fg:w="2"/><text x="24.6042%" y="127.50"></text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (596 samples, 5.54%)</title><rect x="24.3170%" y="149" width="5.5380%" height="15" fill="rgb(213,181,19)" fg:x="2617" fg:w="596"/><text x="24.5670%" y="159.50">fekan`&lt;..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (593 samples, 5.51%)</title><rect x="24.3449%" y="133" width="5.5101%" height="15" fill="rgb(254,191,54)" fg:x="2620" fg:w="593"/><text x="24.5949%" y="143.50">fekan`&lt;..</text></g><g><title>libsystem_kernel.dylib`read (589 samples, 5.47%)</title><rect x="24.3821%" y="117" width="5.4730%" height="15" fill="rgb(241,83,37)" fg:x="2624" fg:w="589"/><text x="24.6321%" y="127.50">libsyst..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (177 samples, 1.64%)</title><rect x="29.8550%" y="149" width="1.6447%" height="15" fill="rgb(233,36,39)" fg:x="3213" fg:w="177"/><text x="30.1050%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (176 samples, 1.64%)</title><rect x="29.8643%" y="133" width="1.6354%" height="15" fill="rgb(226,3,54)" fg:x="3214" fg:w="176"/><text x="30.1143%" y="143.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.02%)</title><rect x="31.5090%" y="133" width="0.0186%" height="15" fill="rgb(245,192,40)" fg:x="3391" fg:w="2"/><text x="31.7590%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,467 samples, 32.22%)</title><rect x="0.0558%" y="165" width="32.2152%" height="15" fill="rgb(238,167,29)" fg:x="6" fg:w="3467"/><text x="0.3058%" y="175.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (82 samples, 0.76%)</title><rect x="31.5090%" y="149" width="0.7619%" height="15" fill="rgb(232,182,51)" fg:x="3391" fg:w="82"/><text x="31.7590%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (80 samples, 0.74%)</title><rect x="31.5276%" y="133" width="0.7434%" height="15" fill="rgb(231,60,39)" fg:x="3393" fg:w="80"/><text x="31.7776%" y="143.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,608 samples, 33.53%)</title><rect x="0.0372%" y="181" width="33.5254%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="3608"/><text x="0.2872%" y="191.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqA..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (139 samples, 1.29%)</title><rect x="32.2710%" y="165" width="1.2916%" height="15" fill="rgb(235,93,37)" fg:x="3473" fg:w="139"/><text x="32.5210%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (137 samples, 1.27%)</title><rect x="32.2895%" y="149" width="1.2730%" height="15" fill="rgb(213,116,39)" fg:x="3475" fg:w="137"/><text x="32.5395%" y="159.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,609 samples, 33.53%)</title><rect x="0.0372%" y="213" width="33.5347%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="3609"/><text x="0.2872%" y="223.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,609 samples, 33.53%)</title><rect x="0.0372%" y="197" width="33.5347%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="3609"/><text x="0.2872%" y="207.50">fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize ..</text></g><g><title>fekan`fekan::load_regression_data (3,613 samples, 33.57%)</title><rect x="0.0093%" y="245" width="33.5718%" height="15" fill="rgb(218,138,4)" fg:x="1" fg:w="3613"/><text x="0.2593%" y="255.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`serde_json::de::from_trait (3,610 samples, 33.54%)</title><rect x="0.0372%" y="229" width="33.5440%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="3610"/><text x="0.2872%" y="239.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (14 samples, 0.13%)</title><rect x="33.6462%" y="229" width="0.1301%" height="15" fill="rgb(239,60,40)" fg:x="3621" fg:w="14"/><text x="33.8962%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.06%)</title><rect x="33.7762%" y="165" width="0.0558%" height="15" fill="rgb(206,27,48)" fg:x="3635" fg:w="6"/><text x="34.0262%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.11%)</title><rect x="33.7762%" y="181" width="0.1115%" height="15" fill="rgb(225,35,8)" fg:x="3635" fg:w="12"/><text x="34.0262%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (6 samples, 0.06%)</title><rect x="33.8320%" y="165" width="0.0558%" height="15" fill="rgb(250,213,24)" fg:x="3641" fg:w="6"/><text x="34.0820%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.06%)</title><rect x="33.8320%" y="149" width="0.0558%" height="15" fill="rgb(247,123,22)" fg:x="3641" fg:w="6"/><text x="34.0820%" y="159.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (13 samples, 0.12%)</title><rect x="33.7762%" y="213" width="0.1208%" height="15" fill="rgb(231,138,38)" fg:x="3635" fg:w="13"/><text x="34.0262%" y="223.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::edge::EdgeType&gt; (13 samples, 0.12%)</title><rect x="33.7762%" y="197" width="0.1208%" height="15" fill="rgb(231,145,46)" fg:x="3635" fg:w="13"/><text x="34.0262%" y="207.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (14 samples, 0.13%)</title><rect x="33.7762%" y="229" width="0.1301%" height="15" fill="rgb(251,118,11)" fg:x="3635" fg:w="14"/><text x="34.0262%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (41 samples, 0.38%)</title><rect x="33.9249%" y="165" width="0.3810%" height="15" fill="rgb(217,147,25)" fg:x="3651" fg:w="41"/><text x="34.1749%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (48 samples, 0.45%)</title><rect x="33.9156%" y="181" width="0.4460%" height="15" fill="rgb(247,81,37)" fg:x="3650" fg:w="48"/><text x="34.1656%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (5 samples, 0.05%)</title><rect x="34.3152%" y="165" width="0.0465%" height="15" fill="rgb(209,12,38)" fg:x="3693" fg:w="5"/><text x="34.5652%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.05%)</title><rect x="34.3152%" y="149" width="0.0465%" height="15" fill="rgb(227,1,9)" fg:x="3693" fg:w="5"/><text x="34.5652%" y="159.50"></text></g><g><title>fekan`fekan::kan::Kan::merge_models (52 samples, 0.48%)</title><rect x="33.9063%" y="229" width="0.4832%" height="15" fill="rgb(248,47,43)" fg:x="3649" fg:w="52"/><text x="34.1563%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::merge_layers (52 samples, 0.48%)</title><rect x="33.9063%" y="213" width="0.4832%" height="15" fill="rgb(221,10,30)" fg:x="3649" fg:w="52"/><text x="34.1563%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::merge_edges (52 samples, 0.48%)</title><rect x="33.9063%" y="197" width="0.4832%" height="15" fill="rgb(210,229,1)" fg:x="3649" fg:w="52"/><text x="34.1563%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (3 samples, 0.03%)</title><rect x="34.3616%" y="181" width="0.0279%" height="15" fill="rgb(222,148,37)" fg:x="3698" fg:w="3"/><text x="34.6116%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.03%)</title><rect x="34.3616%" y="165" width="0.0279%" height="15" fill="rgb(234,67,33)" fg:x="3698" fg:w="3"/><text x="34.6116%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (74 samples, 0.69%)</title><rect x="34.3988%" y="197" width="0.6876%" height="15" fill="rgb(247,98,35)" fg:x="3702" fg:w="74"/><text x="34.6488%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (71 samples, 0.66%)</title><rect x="34.4267%" y="181" width="0.6597%" height="15" fill="rgb(247,138,52)" fg:x="3705" fg:w="71"/><text x="34.6767%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (62 samples, 0.58%)</title><rect x="34.5103%" y="165" width="0.5761%" height="15" fill="rgb(213,79,30)" fg:x="3714" fg:w="62"/><text x="34.7603%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (50 samples, 0.46%)</title><rect x="34.6218%" y="149" width="0.4646%" height="15" fill="rgb(246,177,23)" fg:x="3726" fg:w="50"/><text x="34.8718%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (7 samples, 0.07%)</title><rect x="35.0214%" y="133" width="0.0650%" height="15" fill="rgb(230,62,27)" fg:x="3769" fg:w="7"/><text x="35.2714%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (4 samples, 0.04%)</title><rect x="35.0864%" y="197" width="0.0372%" height="15" fill="rgb(216,154,8)" fg:x="3776" fg:w="4"/><text x="35.3364%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (81 samples, 0.75%)</title><rect x="34.3895%" y="213" width="0.7526%" height="15" fill="rgb(244,35,45)" fg:x="3701" fg:w="81"/><text x="34.6395%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="35.1236%" y="197" width="0.0186%" height="15" fill="rgb(251,115,12)" fg:x="3780" fg:w="2"/><text x="35.3736%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (78 samples, 0.72%)</title><rect x="35.1422%" y="181" width="0.7248%" height="15" fill="rgb(240,54,50)" fg:x="3782" fg:w="78"/><text x="35.3922%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (74 samples, 0.69%)</title><rect x="35.1793%" y="165" width="0.6876%" height="15" fill="rgb(233,84,52)" fg:x="3786" fg:w="74"/><text x="35.4293%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (67 samples, 0.62%)</title><rect x="35.2444%" y="149" width="0.6226%" height="15" fill="rgb(207,117,47)" fg:x="3793" fg:w="67"/><text x="35.4944%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (47 samples, 0.44%)</title><rect x="35.4302%" y="133" width="0.4367%" height="15" fill="rgb(249,43,39)" fg:x="3813" fg:w="47"/><text x="35.6802%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (15 samples, 0.14%)</title><rect x="35.7276%" y="117" width="0.1394%" height="15" fill="rgb(209,38,44)" fg:x="3845" fg:w="15"/><text x="35.9776%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::prune (82 samples, 0.76%)</title><rect x="35.1422%" y="213" width="0.7619%" height="15" fill="rgb(236,212,23)" fg:x="3782" fg:w="82"/><text x="35.3922%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::prune (82 samples, 0.76%)</title><rect x="35.1422%" y="197" width="0.7619%" height="15" fill="rgb(242,79,21)" fg:x="3782" fg:w="82"/><text x="35.3922%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (4 samples, 0.04%)</title><rect x="35.8669%" y="181" width="0.0372%" height="15" fill="rgb(211,96,35)" fg:x="3860" fg:w="4"/><text x="36.1169%" y="191.50"></text></g><g><title>fekan`fekan::kan::Kan::prune (165 samples, 1.53%)</title><rect x="34.3895%" y="229" width="1.5332%" height="15" fill="rgb(253,215,40)" fg:x="3701" fg:w="165"/><text x="34.6395%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="35.9041%" y="213" width="0.0186%" height="15" fill="rgb(211,81,21)" fg:x="3864" fg:w="2"/><text x="36.1541%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (33 samples, 0.31%)</title><rect x="36.8519%" y="149" width="0.3066%" height="15" fill="rgb(208,190,38)" fg:x="3966" fg:w="33"/><text x="37.1019%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (23 samples, 0.21%)</title><rect x="36.9448%" y="133" width="0.2137%" height="15" fill="rgb(235,213,38)" fg:x="3976" fg:w="23"/><text x="37.1948%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (18 samples, 0.17%)</title><rect x="37.1585%" y="149" width="0.1673%" height="15" fill="rgb(237,122,38)" fg:x="3999" fg:w="18"/><text x="37.4085%" y="159.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (29 samples, 0.27%)</title><rect x="37.4930%" y="133" width="0.2695%" height="15" fill="rgb(244,218,35)" fg:x="4035" fg:w="29"/><text x="37.7430%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (150 samples, 1.39%)</title><rect x="36.3780%" y="165" width="1.3938%" height="15" fill="rgb(240,68,47)" fg:x="3915" fg:w="150"/><text x="36.6280%" y="175.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (48 samples, 0.45%)</title><rect x="37.3258%" y="149" width="0.4460%" height="15" fill="rgb(210,16,53)" fg:x="4017" fg:w="48"/><text x="37.5758%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (235 samples, 2.18%)</title><rect x="36.0249%" y="181" width="2.1836%" height="15" fill="rgb(235,124,12)" fg:x="3877" fg:w="235"/><text x="36.2749%" y="191.50">f..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (47 samples, 0.44%)</title><rect x="37.7718%" y="165" width="0.4367%" height="15" fill="rgb(224,169,11)" fg:x="4065" fg:w="47"/><text x="38.0218%" y="175.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.22%)</title><rect x="37.9855%" y="149" width="0.2230%" height="15" fill="rgb(250,166,2)" fg:x="4088" fg:w="24"/><text x="38.2355%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::forward (244 samples, 2.27%)</title><rect x="35.9877%" y="197" width="2.2672%" height="15" fill="rgb(242,216,29)" fg:x="3873" fg:w="244"/><text x="36.2377%" y="207.50">f..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (5 samples, 0.05%)</title><rect x="38.2085%" y="181" width="0.0465%" height="15" fill="rgb(230,116,27)" fg:x="4112" fg:w="5"/><text x="38.4585%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (6 samples, 0.06%)</title><rect x="38.2550%" y="197" width="0.0558%" height="15" fill="rgb(228,99,48)" fg:x="4117" fg:w="6"/><text x="38.5050%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (256 samples, 2.38%)</title><rect x="35.9506%" y="213" width="2.3787%" height="15" fill="rgb(253,11,6)" fg:x="3869" fg:w="256"/><text x="36.2006%" y="223.50">fe..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (9 samples, 0.08%)</title><rect x="38.3293%" y="213" width="0.0836%" height="15" fill="rgb(247,143,39)" fg:x="4125" fg:w="9"/><text x="38.5793%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (7 samples, 0.07%)</title><rect x="38.3479%" y="197" width="0.0650%" height="15" fill="rgb(236,97,10)" fg:x="4127" fg:w="7"/><text x="38.5979%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (7 samples, 0.07%)</title><rect x="38.3479%" y="181" width="0.0650%" height="15" fill="rgb(233,208,19)" fg:x="4127" fg:w="7"/><text x="38.5979%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (7 samples, 0.07%)</title><rect x="38.3479%" y="165" width="0.0650%" height="15" fill="rgb(216,164,2)" fg:x="4127" fg:w="7"/><text x="38.5979%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (7 samples, 0.07%)</title><rect x="38.3479%" y="149" width="0.0650%" height="15" fill="rgb(220,129,5)" fg:x="4127" fg:w="7"/><text x="38.5979%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.06%)</title><rect x="38.3572%" y="133" width="0.0558%" height="15" fill="rgb(242,17,10)" fg:x="4128" fg:w="6"/><text x="38.6072%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.06%)</title><rect x="38.3572%" y="117" width="0.0558%" height="15" fill="rgb(242,107,0)" fg:x="4128" fg:w="6"/><text x="38.6072%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.06%)</title><rect x="38.3572%" y="101" width="0.0558%" height="15" fill="rgb(251,28,31)" fg:x="4128" fg:w="6"/><text x="38.6072%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (4 samples, 0.04%)</title><rect x="38.3758%" y="85" width="0.0372%" height="15" fill="rgb(233,223,10)" fg:x="4130" fg:w="4"/><text x="38.6258%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.03%)</title><rect x="38.3851%" y="69" width="0.0279%" height="15" fill="rgb(215,21,27)" fg:x="4131" fg:w="3"/><text x="38.6351%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.03%)</title><rect x="38.3851%" y="53" width="0.0279%" height="15" fill="rgb(232,23,21)" fg:x="4131" fg:w="3"/><text x="38.6351%" y="63.50"></text></g><g><title>fekan`fekan::preset_knot_ranges (270 samples, 2.51%)</title><rect x="35.9320%" y="229" width="2.5088%" height="15" fill="rgb(244,5,23)" fg:x="3867" fg:w="270"/><text x="36.1820%" y="239.50">fe..</text></g><g><title>libsystem_m.dylib`log (2 samples, 0.02%)</title><rect x="38.4408%" y="165" width="0.0186%" height="15" fill="rgb(226,81,46)" fg:x="4137" fg:w="2"/><text x="38.6908%" y="175.50"></text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.03%)</title><rect x="38.4408%" y="181" width="0.0279%" height="15" fill="rgb(247,70,30)" fg:x="4137" fg:w="3"/><text x="38.6908%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="38.4873%" y="181" width="0.0186%" height="15" fill="rgb(212,68,19)" fg:x="4142" fg:w="2"/><text x="38.7373%" y="191.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.09%)</title><rect x="38.4408%" y="197" width="0.0929%" height="15" fill="rgb(240,187,13)" fg:x="4137" fg:w="10"/><text x="38.6908%" y="207.50"></text></g><g><title>fekan`fekan::calculate_nll_loss_and_gradient (13 samples, 0.12%)</title><rect x="38.4408%" y="213" width="0.1208%" height="15" fill="rgb(223,113,26)" fg:x="4137" fg:w="13"/><text x="38.6908%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (192 samples, 1.78%)</title><rect x="38.5895%" y="181" width="1.7841%" height="15" fill="rgb(206,192,2)" fg:x="4153" fg:w="192"/><text x="38.8395%" y="191.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (184 samples, 1.71%)</title><rect x="38.6638%" y="165" width="1.7097%" height="15" fill="rgb(241,108,4)" fg:x="4161" fg:w="184"/><text x="38.9138%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (171 samples, 1.59%)</title><rect x="38.7846%" y="149" width="1.5889%" height="15" fill="rgb(247,173,49)" fg:x="4174" fg:w="171"/><text x="39.0346%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (132 samples, 1.23%)</title><rect x="39.1470%" y="133" width="1.2265%" height="15" fill="rgb(224,114,35)" fg:x="4213" fg:w="132"/><text x="39.3970%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (38 samples, 0.35%)</title><rect x="40.0204%" y="117" width="0.3531%" height="15" fill="rgb(245,159,27)" fg:x="4307" fg:w="38"/><text x="40.2704%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (7 samples, 0.07%)</title><rect x="40.3735%" y="181" width="0.0650%" height="15" fill="rgb(245,172,44)" fg:x="4345" fg:w="7"/><text x="40.6235%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.07%)</title><rect x="40.4479%" y="181" width="0.0650%" height="15" fill="rgb(236,23,11)" fg:x="4353" fg:w="7"/><text x="40.6979%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.07%)</title><rect x="40.4479%" y="165" width="0.0650%" height="15" fill="rgb(205,117,38)" fg:x="4353" fg:w="7"/><text x="40.6979%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="40.5129%" y="181" width="0.0186%" height="15" fill="rgb(237,72,25)" fg:x="4360" fg:w="2"/><text x="40.7629%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (213 samples, 1.98%)</title><rect x="38.5616%" y="197" width="1.9792%" height="15" fill="rgb(244,70,9)" fg:x="4150" fg:w="213"/><text x="38.8116%" y="207.50">f..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="40.5408%" y="197" width="0.0279%" height="15" fill="rgb(217,125,39)" fg:x="4363" fg:w="3"/><text x="40.7908%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (218 samples, 2.03%)</title><rect x="38.5616%" y="213" width="2.0256%" height="15" fill="rgb(235,36,10)" fg:x="4150" fg:w="218"/><text x="38.8116%" y="223.50">f..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.02%)</title><rect x="40.5687%" y="197" width="0.0186%" height="15" fill="rgb(251,123,47)" fg:x="4366" fg:w="2"/><text x="40.8187%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.02%)</title><rect x="40.5687%" y="181" width="0.0186%" height="15" fill="rgb(221,13,13)" fg:x="4366" fg:w="2"/><text x="40.8187%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="40.5687%" y="165" width="0.0186%" height="15" fill="rgb(238,131,9)" fg:x="4366" fg:w="2"/><text x="40.8187%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.05%)</title><rect x="40.5873%" y="213" width="0.0465%" height="15" fill="rgb(211,50,8)" fg:x="4368" fg:w="5"/><text x="40.8373%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.02%)</title><rect x="40.6337%" y="213" width="0.0186%" height="15" fill="rgb(245,182,24)" fg:x="4373" fg:w="2"/><text x="40.8837%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="40.6337%" y="197" width="0.0186%" height="15" fill="rgb(242,14,37)" fg:x="4373" fg:w="2"/><text x="40.8837%" y="207.50"></text></g><g><title>fekan`fekan::validate_model (239 samples, 2.22%)</title><rect x="38.4408%" y="229" width="2.2208%" height="15" fill="rgb(246,228,12)" fg:x="4137" fg:w="239"/><text x="38.6908%" y="239.50">f..</text></g><g><title>fekan`log::__private_api::log_impl (2 samples, 0.02%)</title><rect x="40.6616%" y="229" width="0.0186%" height="15" fill="rgb(213,55,15)" fg:x="4376" fg:w="2"/><text x="40.9116%" y="239.50"></text></g><g><title>fekan`rand::rng::Rng::gen_range (5 samples, 0.05%)</title><rect x="40.6802%" y="229" width="0.0465%" height="15" fill="rgb(209,9,3)" fg:x="4378" fg:w="5"/><text x="40.9302%" y="239.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (220 samples, 2.04%)</title><rect x="40.7266%" y="181" width="2.0442%" height="15" fill="rgb(230,59,30)" fg:x="4383" fg:w="220"/><text x="40.9766%" y="191.50">f..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (220 samples, 2.04%)</title><rect x="40.7266%" y="165" width="2.0442%" height="15" fill="rgb(209,121,21)" fg:x="4383" fg:w="220"/><text x="40.9766%" y="175.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (220 samples, 2.04%)</title><rect x="40.7266%" y="149" width="2.0442%" height="15" fill="rgb(220,109,13)" fg:x="4383" fg:w="220"/><text x="40.9766%" y="159.50">l..</text></g><g><title>fekan`std::thread::scoped::scope (222 samples, 2.06%)</title><rect x="40.7266%" y="229" width="2.0628%" height="15" fill="rgb(232,18,1)" fg:x="4383" fg:w="222"/><text x="40.9766%" y="239.50">f..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (222 samples, 2.06%)</title><rect x="40.7266%" y="213" width="2.0628%" height="15" fill="rgb(215,41,42)" fg:x="4383" fg:w="222"/><text x="40.9766%" y="223.50">f..</text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (222 samples, 2.06%)</title><rect x="40.7266%" y="197" width="2.0628%" height="15" fill="rgb(224,123,36)" fg:x="4383" fg:w="222"/><text x="40.9766%" y="207.50">f..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.06%)</title><rect x="42.7987%" y="229" width="0.0558%" height="15" fill="rgb(240,125,3)" fg:x="4606" fg:w="6"/><text x="43.0487%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.02%)</title><rect x="42.8545%" y="229" width="0.0186%" height="15" fill="rgb(205,98,50)" fg:x="4612" fg:w="2"/><text x="43.1045%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="42.8545%" y="213" width="0.0186%" height="15" fill="rgb(205,185,37)" fg:x="4612" fg:w="2"/><text x="43.1045%" y="223.50"></text></g><g><title>fekan`fekan::train_model (1,001 samples, 9.30%)</title><rect x="33.5811%" y="245" width="9.3012%" height="15" fill="rgb(238,207,15)" fg:x="3614" fg:w="1001"/><text x="33.8311%" y="255.50">fekan`fekan::..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.03%)</title><rect x="42.9009%" y="213" width="0.0279%" height="15" fill="rgb(213,199,42)" fg:x="4617" fg:w="3"/><text x="43.1509%" y="223.50"></text></g><g><title>fekan`fekan::calculate_nll_loss_and_gradient (4 samples, 0.04%)</title><rect x="42.9009%" y="229" width="0.0372%" height="15" fill="rgb(235,201,11)" fg:x="4617" fg:w="4"/><text x="43.1509%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (75 samples, 0.70%)</title><rect x="42.9474%" y="197" width="0.6969%" height="15" fill="rgb(207,46,11)" fg:x="4622" fg:w="75"/><text x="43.1974%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (72 samples, 0.67%)</title><rect x="42.9753%" y="181" width="0.6690%" height="15" fill="rgb(241,35,35)" fg:x="4625" fg:w="72"/><text x="43.2253%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (64 samples, 0.59%)</title><rect x="43.0496%" y="165" width="0.5947%" height="15" fill="rgb(243,32,47)" fg:x="4633" fg:w="64"/><text x="43.2996%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (47 samples, 0.44%)</title><rect x="43.2076%" y="149" width="0.4367%" height="15" fill="rgb(247,202,23)" fg:x="4650" fg:w="47"/><text x="43.4576%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (15 samples, 0.14%)</title><rect x="43.5049%" y="133" width="0.1394%" height="15" fill="rgb(219,102,11)" fg:x="4682" fg:w="15"/><text x="43.7549%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (7 samples, 0.07%)</title><rect x="43.6443%" y="197" width="0.0650%" height="15" fill="rgb(243,110,44)" fg:x="4697" fg:w="7"/><text x="43.8943%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (84 samples, 0.78%)</title><rect x="42.9381%" y="213" width="0.7805%" height="15" fill="rgb(222,74,54)" fg:x="4621" fg:w="84"/><text x="43.1881%" y="223.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (86 samples, 0.80%)</title><rect x="42.9381%" y="229" width="0.7991%" height="15" fill="rgb(216,99,12)" fg:x="4621" fg:w="86"/><text x="43.1881%" y="239.50"></text></g><g><title>fekan`fekan::validate_model (94 samples, 0.87%)</title><rect x="42.8824%" y="245" width="0.8734%" height="15" fill="rgb(226,22,26)" fg:x="4615" fg:w="94"/><text x="43.1324%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="43.7651%" y="245" width="0.0186%" height="15" fill="rgb(217,163,10)" fg:x="4710" fg:w="2"/><text x="44.0151%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="43.7837%" y="245" width="0.0279%" height="15" fill="rgb(213,25,53)" fg:x="4712" fg:w="3"/><text x="44.0337%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="43.8301%" y="245" width="0.0186%" height="15" fill="rgb(252,105,26)" fg:x="4717" fg:w="2"/><text x="44.0801%" y="255.50"></text></g><g><title>dyld`start (4,720 samples, 43.86%)</title><rect x="0.0000%" y="341" width="43.8580%" height="15" fill="rgb(220,39,43)" fg:x="0" fg:w="4720"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>fekan`main (4,720 samples, 43.86%)</title><rect x="0.0000%" y="325" width="43.8580%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="4720"/><text x="0.2500%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (4,720 samples, 43.86%)</title><rect x="0.0000%" y="309" width="43.8580%" height="15" fill="rgb(252,8,32)" fg:x="0" fg:w="4720"/><text x="0.2500%" y="319.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (4,720 samples, 43.86%)</title><rect x="0.0000%" y="293" width="43.8580%" height="15" fill="rgb(223,20,43)" fg:x="0" fg:w="4720"/><text x="0.2500%" y="303.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (4,720 samples, 43.86%)</title><rect x="0.0000%" y="277" width="43.8580%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="4720"/><text x="0.2500%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (4,720 samples, 43.86%)</title><rect x="0.0000%" y="261" width="43.8580%" height="15" fill="rgb(236,28,36)" fg:x="0" fg:w="4720"/><text x="0.2500%" y="271.50">fekan`fekan::main</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (74 samples, 0.69%)</title><rect x="43.8580%" y="341" width="0.6876%" height="15" fill="rgb(249,185,26)" fg:x="4720" fg:w="74"/><text x="44.1080%" y="351.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (74 samples, 0.69%)</title><rect x="43.8580%" y="325" width="0.6876%" height="15" fill="rgb(249,174,33)" fg:x="4720" fg:w="74"/><text x="44.1080%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (74 samples, 0.69%)</title><rect x="43.8580%" y="309" width="0.6876%" height="15" fill="rgb(233,201,37)" fg:x="4720" fg:w="74"/><text x="44.1080%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.07%)</title><rect x="44.5456%" y="293" width="0.0743%" height="15" fill="rgb(221,78,26)" fg:x="4794" fg:w="8"/><text x="44.7956%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`medium_free_scan_madvise_free (3 samples, 0.03%)</title><rect x="44.6200%" y="293" width="0.0279%" height="15" fill="rgb(250,127,30)" fg:x="4802" fg:w="3"/><text x="44.8700%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.03%)</title><rect x="44.6200%" y="277" width="0.0279%" height="15" fill="rgb(230,49,44)" fg:x="4802" fg:w="3"/><text x="44.8700%" y="287.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::merge_layers (14 samples, 0.13%)</title><rect x="44.5456%" y="341" width="0.1301%" height="15" fill="rgb(229,67,23)" fg:x="4794" fg:w="14"/><text x="44.7956%" y="351.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::merge_edges (14 samples, 0.13%)</title><rect x="44.5456%" y="325" width="0.1301%" height="15" fill="rgb(249,83,47)" fg:x="4794" fg:w="14"/><text x="44.7956%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (14 samples, 0.13%)</title><rect x="44.5456%" y="309" width="0.1301%" height="15" fill="rgb(215,43,3)" fg:x="4794" fg:w="14"/><text x="44.7956%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`medium_madvise_free_range_no_lock (3 samples, 0.03%)</title><rect x="44.6478%" y="293" width="0.0279%" height="15" fill="rgb(238,154,13)" fg:x="4805" fg:w="3"/><text x="44.8978%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.03%)</title><rect x="44.6478%" y="277" width="0.0279%" height="15" fill="rgb(219,56,2)" fg:x="4805" fg:w="3"/><text x="44.8978%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.04%)</title><rect x="44.6757%" y="341" width="0.0372%" height="15" fill="rgb(233,0,4)" fg:x="4808" fg:w="4"/><text x="44.9257%" y="351.50"></text></g><g><title>fekan`&lt;Iter as core::iter::traits::collect::SpecTupleExtend&lt;ExtendA,ExtendB&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="44.7686%" y="261" width="0.0186%" height="15" fill="rgb(235,30,7)" fg:x="4818" fg:w="2"/><text x="45.0186%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="44.7872%" y="261" width="0.0186%" height="15" fill="rgb(250,79,13)" fg:x="4820" fg:w="2"/><text x="45.0372%" y="271.50"></text></g><g><title>libsystem_m.dylib`exp (4 samples, 0.04%)</title><rect x="44.9080%" y="213" width="0.0372%" height="15" fill="rgb(211,146,34)" fg:x="4833" fg:w="4"/><text x="45.1580%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (15 samples, 0.14%)</title><rect x="44.9545%" y="213" width="0.1394%" height="15" fill="rgb(228,22,38)" fg:x="4838" fg:w="15"/><text x="45.2045%" y="223.50"></text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (29 samples, 0.27%)</title><rect x="44.8337%" y="229" width="0.2695%" height="15" fill="rgb(235,168,5)" fg:x="4825" fg:w="29"/><text x="45.0837%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (4 samples, 0.04%)</title><rect x="45.1310%" y="229" width="0.0372%" height="15" fill="rgb(221,155,16)" fg:x="4857" fg:w="4"/><text x="45.3810%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="45.1682%" y="229" width="0.0372%" height="15" fill="rgb(215,215,53)" fg:x="4861" fg:w="4"/><text x="45.4182%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.12%)</title><rect x="45.2054%" y="229" width="0.1208%" height="15" fill="rgb(223,4,10)" fg:x="4865" fg:w="13"/><text x="45.4554%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.02%)</title><rect x="45.3261%" y="213" width="0.0186%" height="15" fill="rgb(234,103,6)" fg:x="4878" fg:w="2"/><text x="45.5761%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.02%)</title><rect x="45.3261%" y="197" width="0.0186%" height="15" fill="rgb(227,97,0)" fg:x="4878" fg:w="2"/><text x="45.5761%" y="207.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (56 samples, 0.52%)</title><rect x="44.8337%" y="245" width="0.5203%" height="15" fill="rgb(234,150,53)" fg:x="4825" fg:w="56"/><text x="45.0837%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.03%)</title><rect x="45.3261%" y="229" width="0.0279%" height="15" fill="rgb(228,201,54)" fg:x="4878" fg:w="3"/><text x="45.5761%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.07%)</title><rect x="45.3819%" y="245" width="0.0650%" height="15" fill="rgb(222,22,37)" fg:x="4884" fg:w="7"/><text x="45.6319%" y="255.50"></text></g><g><title>fekan`fekan::calculate_nll_loss_and_gradient (71 samples, 0.66%)</title><rect x="44.8244%" y="261" width="0.6597%" height="15" fill="rgb(237,53,32)" fg:x="4824" fg:w="71"/><text x="45.0744%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="45.4469%" y="245" width="0.0372%" height="15" fill="rgb(233,25,53)" fg:x="4891" fg:w="4"/><text x="45.6969%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$free (2 samples, 0.02%)</title><rect x="45.5956%" y="229" width="0.0186%" height="15" fill="rgb(210,40,34)" fg:x="4907" fg:w="2"/><text x="45.8456%" y="239.50"></text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,224 samples, 11.37%)</title><rect x="46.5713%" y="197" width="11.3734%" height="15" fill="rgb(241,220,44)" fg:x="5012" fg:w="1224"/><text x="46.8213%" y="207.50">fekan`&lt;core::iter..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (537 samples, 4.99%)</title><rect x="52.9548%" y="181" width="4.9898%" height="15" fill="rgb(235,28,35)" fg:x="5699" fg:w="537"/><text x="53.2048%" y="191.50">fekan`..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (209 samples, 1.94%)</title><rect x="57.9446%" y="197" width="1.9420%" height="15" fill="rgb(210,56,17)" fg:x="6236" fg:w="209"/><text x="58.1946%" y="207.50">f..</text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (2 samples, 0.02%)</title><rect x="59.8866%" y="181" width="0.0186%" height="15" fill="rgb(224,130,29)" fg:x="6445" fg:w="2"/><text x="60.1366%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.16%)</title><rect x="59.8866%" y="197" width="0.1580%" height="15" fill="rgb(235,212,8)" fg:x="6445" fg:w="17"/><text x="60.1366%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.14%)</title><rect x="59.9052%" y="181" width="0.1394%" height="15" fill="rgb(223,33,50)" fg:x="6447" fg:w="15"/><text x="60.1552%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9 samples, 0.08%)</title><rect x="59.9610%" y="165" width="0.0836%" height="15" fill="rgb(219,149,13)" fg:x="6453" fg:w="9"/><text x="60.2110%" y="175.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,451 samples, 13.48%)</title><rect x="46.5713%" y="213" width="13.4826%" height="15" fill="rgb(250,156,29)" fg:x="5012" fg:w="1451"/><text x="46.8213%" y="223.50">fekan`&lt;alloc::vec::V..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="60.0725%" y="213" width="0.0186%" height="15" fill="rgb(216,193,19)" fg:x="6465" fg:w="2"/><text x="60.3225%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.02%)</title><rect x="60.0911%" y="213" width="0.0186%" height="15" fill="rgb(216,135,14)" fg:x="6467" fg:w="2"/><text x="60.3411%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (4 samples, 0.04%)</title><rect x="60.1375%" y="197" width="0.0372%" height="15" fill="rgb(241,47,5)" fg:x="6472" fg:w="4"/><text x="60.3875%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.20%)</title><rect x="60.1096%" y="213" width="0.1951%" height="15" fill="rgb(233,42,35)" fg:x="6469" fg:w="21"/><text x="60.3596%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (14 samples, 0.13%)</title><rect x="60.1747%" y="197" width="0.1301%" height="15" fill="rgb(231,13,6)" fg:x="6476" fg:w="14"/><text x="60.4247%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.04%)</title><rect x="60.2676%" y="181" width="0.0372%" height="15" fill="rgb(207,181,40)" fg:x="6486" fg:w="4"/><text x="60.5176%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.02%)</title><rect x="60.3141%" y="213" width="0.0186%" height="15" fill="rgb(254,173,49)" fg:x="6491" fg:w="2"/><text x="60.5641%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (1,591 samples, 14.78%)</title><rect x="45.6421%" y="229" width="14.7835%" height="15" fill="rgb(221,1,38)" fg:x="4912" fg:w="1591"/><text x="45.8921%" y="239.50">fekan`fekan::kan_layer:..</text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 0.09%)</title><rect x="60.3327%" y="213" width="0.0929%" height="15" fill="rgb(206,124,46)" fg:x="6493" fg:w="10"/><text x="60.5827%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.11%)</title><rect x="60.4534%" y="229" width="0.1115%" height="15" fill="rgb(249,21,11)" fg:x="6506" fg:w="12"/><text x="60.7034%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (1,624 samples, 15.09%)</title><rect x="45.4934%" y="245" width="15.0901%" height="15" fill="rgb(222,201,40)" fg:x="4896" fg:w="1624"/><text x="45.7434%" y="255.50">fekan`fekan::kan_layer:..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.12%)</title><rect x="60.5835%" y="245" width="0.1208%" height="15" fill="rgb(235,61,29)" fg:x="6520" fg:w="13"/><text x="60.8335%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (1,641 samples, 15.25%)</title><rect x="45.4841%" y="261" width="15.2481%" height="15" fill="rgb(219,207,3)" fg:x="4895" fg:w="1641"/><text x="45.7341%" y="271.50">fekan`fekan::kan::Kan::..</text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.02%)</title><rect x="60.7136%" y="245" width="0.0186%" height="15" fill="rgb(222,56,46)" fg:x="6534" fg:w="2"/><text x="60.9636%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::clear_samples (20 samples, 0.19%)</title><rect x="60.7322%" y="261" width="0.1858%" height="15" fill="rgb(239,76,54)" fg:x="6536" fg:w="20"/><text x="60.9822%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (18 samples, 0.17%)</title><rect x="60.7508%" y="245" width="0.1673%" height="15" fill="rgb(231,124,27)" fg:x="6538" fg:w="18"/><text x="61.0008%" y="255.50"></text></g><g><title>fekan`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3 samples, 0.03%)</title><rect x="61.0667%" y="229" width="0.0279%" height="15" fill="rgb(249,195,6)" fg:x="6572" fg:w="3"/><text x="61.3167%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="61.0760%" y="213" width="0.0186%" height="15" fill="rgb(237,174,47)" fg:x="6573" fg:w="2"/><text x="61.3260%" y="223.50"></text></g><g><title>fekan`__rdl_alloc (2 samples, 0.02%)</title><rect x="61.0946%" y="229" width="0.0186%" height="15" fill="rgb(206,201,31)" fg:x="6575" fg:w="2"/><text x="61.3446%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5 samples, 0.05%)</title><rect x="61.3362%" y="213" width="0.0465%" height="15" fill="rgb(231,57,52)" fg:x="6601" fg:w="5"/><text x="61.5862%" y="223.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (5 samples, 0.05%)</title><rect x="61.3362%" y="197" width="0.0465%" height="15" fill="rgb(248,177,22)" fg:x="6601" fg:w="5"/><text x="61.5862%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.05%)</title><rect x="61.3362%" y="181" width="0.0465%" height="15" fill="rgb(215,211,37)" fg:x="6601" fg:w="5"/><text x="61.5862%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.05%)</title><rect x="61.3362%" y="165" width="0.0465%" height="15" fill="rgb(241,128,51)" fg:x="6601" fg:w="5"/><text x="61.5862%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.05%)</title><rect x="61.3362%" y="149" width="0.0465%" height="15" fill="rgb(227,165,31)" fg:x="6601" fg:w="5"/><text x="61.5862%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (379 samples, 3.52%)</title><rect x="70.4609%" y="181" width="3.5217%" height="15" fill="rgb(228,167,24)" fg:x="7583" fg:w="379"/><text x="70.7109%" y="191.50">fek..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (220 samples, 2.04%)</title><rect x="71.9383%" y="165" width="2.0442%" height="15" fill="rgb(228,143,12)" fg:x="7742" fg:w="220"/><text x="72.1883%" y="175.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (171 samples, 1.59%)</title><rect x="73.9825%" y="181" width="1.5889%" height="15" fill="rgb(249,149,8)" fg:x="7962" fg:w="171"/><text x="74.2325%" y="191.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.07%)</title><rect x="79.2975%" y="165" width="0.0743%" height="15" fill="rgb(243,35,44)" fg:x="8534" fg:w="8"/><text x="79.5475%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (1,390 samples, 12.92%)</title><rect x="66.4653%" y="197" width="12.9158%" height="15" fill="rgb(246,89,9)" fg:x="7153" fg:w="1390"/><text x="66.7153%" y="207.50">fekan`fekan::kan_la..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (410 samples, 3.81%)</title><rect x="75.5715%" y="181" width="3.8097%" height="15" fill="rgb(233,213,13)" fg:x="8133" fg:w="410"/><text x="75.8215%" y="191.50">feka..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (2,274 samples, 21.13%)</title><rect x="61.3826%" y="213" width="21.1299%" height="15" fill="rgb(233,141,41)" fg:x="6606" fg:w="2274"/><text x="61.6326%" y="223.50">fekan`fekan::kan_layer::edge::bas..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (337 samples, 3.13%)</title><rect x="79.3812%" y="197" width="3.1314%" height="15" fill="rgb(239,167,4)" fg:x="8543" fg:w="337"/><text x="79.6312%" y="207.50">fek..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="82.4940%" y="181" width="0.0186%" height="15" fill="rgb(209,217,16)" fg:x="8878" fg:w="2"/><text x="82.7440%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::forward (2,336 samples, 21.71%)</title><rect x="61.1132%" y="229" width="21.7060%" height="15" fill="rgb(219,88,35)" fg:x="6577" fg:w="2336"/><text x="61.3632%" y="239.50">fekan`fekan::kan_layer::edge::Edge..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (33 samples, 0.31%)</title><rect x="82.5125%" y="213" width="0.3066%" height="15" fill="rgb(220,193,23)" fg:x="8880" fg:w="33"/><text x="82.7625%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (53 samples, 0.49%)</title><rect x="82.8192%" y="229" width="0.4925%" height="15" fill="rgb(230,90,52)" fg:x="8913" fg:w="53"/><text x="83.0692%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.07%)</title><rect x="83.3209%" y="229" width="0.0743%" height="15" fill="rgb(252,106,19)" fg:x="8967" fg:w="8"/><text x="83.5709%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.03%)</title><rect x="83.4046%" y="229" width="0.0279%" height="15" fill="rgb(206,74,20)" fg:x="8976" fg:w="3"/><text x="83.6546%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.03%)</title><rect x="83.4046%" y="213" width="0.0279%" height="15" fill="rgb(230,138,44)" fg:x="8976" fg:w="3"/><text x="83.6546%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.07%)</title><rect x="83.4324%" y="229" width="0.0743%" height="15" fill="rgb(235,182,43)" fg:x="8979" fg:w="8"/><text x="83.6824%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.07%)</title><rect x="83.5068%" y="229" width="0.0743%" height="15" fill="rgb(242,16,51)" fg:x="8987" fg:w="8"/><text x="83.7568%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (2,441 samples, 22.68%)</title><rect x="60.9180%" y="245" width="22.6817%" height="15" fill="rgb(248,9,4)" fg:x="6556" fg:w="2441"/><text x="61.1680%" y="255.50">fekan`fekan::kan_layer::KanLayer::fo..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.02%)</title><rect x="83.5811%" y="229" width="0.0186%" height="15" fill="rgb(210,31,22)" fg:x="8995" fg:w="2"/><text x="83.8311%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (2,445 samples, 22.72%)</title><rect x="60.9180%" y="261" width="22.7188%" height="15" fill="rgb(239,54,39)" fg:x="6556" fg:w="2445"/><text x="61.1680%" y="271.50">fekan`fekan::kan::Kan::forward</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="83.6090%" y="245" width="0.0279%" height="15" fill="rgb(230,99,41)" fg:x="8998" fg:w="3"/><text x="83.8590%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (4 samples, 0.04%)</title><rect x="83.7112%" y="181" width="0.0372%" height="15" fill="rgb(253,106,12)" fg:x="9009" fg:w="4"/><text x="83.9612%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (7 samples, 0.07%)</title><rect x="83.7019%" y="197" width="0.0650%" height="15" fill="rgb(213,46,41)" fg:x="9008" fg:w="7"/><text x="83.9519%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="83.7484%" y="181" width="0.0186%" height="15" fill="rgb(215,133,35)" fg:x="9013" fg:w="2"/><text x="83.9984%" y="191.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 0.07%)</title><rect x="83.7019%" y="229" width="0.0743%" height="15" fill="rgb(213,28,5)" fg:x="9008" fg:w="8"/><text x="83.9519%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (8 samples, 0.07%)</title><rect x="83.7019%" y="213" width="0.0743%" height="15" fill="rgb(215,77,49)" fg:x="9008" fg:w="8"/><text x="83.9519%" y="223.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (4 samples, 0.04%)</title><rect x="83.8878%" y="181" width="0.0372%" height="15" fill="rgb(248,100,22)" fg:x="9028" fg:w="4"/><text x="84.1378%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.02%)</title><rect x="84.1201%" y="149" width="0.0186%" height="15" fill="rgb(208,67,9)" fg:x="9053" fg:w="2"/><text x="84.3701%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (40 samples, 0.37%)</title><rect x="83.7948%" y="197" width="0.3717%" height="15" fill="rgb(219,133,21)" fg:x="9018" fg:w="40"/><text x="84.0448%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (26 samples, 0.24%)</title><rect x="83.9249%" y="181" width="0.2416%" height="15" fill="rgb(246,46,29)" fg:x="9032" fg:w="26"/><text x="84.1749%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (13 samples, 0.12%)</title><rect x="84.0457%" y="165" width="0.1208%" height="15" fill="rgb(246,185,52)" fg:x="9045" fg:w="13"/><text x="84.2957%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.03%)</title><rect x="84.1386%" y="149" width="0.0279%" height="15" fill="rgb(252,136,11)" fg:x="9055" fg:w="3"/><text x="84.3886%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (43 samples, 0.40%)</title><rect x="83.7762%" y="229" width="0.3996%" height="15" fill="rgb(219,138,53)" fg:x="9016" fg:w="43"/><text x="84.0262%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (43 samples, 0.40%)</title><rect x="83.7762%" y="213" width="0.3996%" height="15" fill="rgb(211,51,23)" fg:x="9016" fg:w="43"/><text x="84.0262%" y="223.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.05%)</title><rect x="84.1944%" y="213" width="0.0465%" height="15" fill="rgb(247,221,28)" fg:x="9061" fg:w="5"/><text x="84.4444%" y="223.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="84.2037%" y="197" width="0.0372%" height="15" fill="rgb(251,222,45)" fg:x="9062" fg:w="4"/><text x="84.4537%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.03%)</title><rect x="84.2130%" y="181" width="0.0279%" height="15" fill="rgb(217,162,53)" fg:x="9063" fg:w="3"/><text x="84.4630%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.02%)</title><rect x="84.2223%" y="165" width="0.0186%" height="15" fill="rgb(229,93,14)" fg:x="9064" fg:w="2"/><text x="84.4723%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="84.2223%" y="149" width="0.0186%" height="15" fill="rgb(209,67,49)" fg:x="9064" fg:w="2"/><text x="84.4723%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="84.2223%" y="133" width="0.0186%" height="15" fill="rgb(213,87,29)" fg:x="9064" fg:w="2"/><text x="84.4723%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::update_knots_from_samples (12 samples, 0.11%)</title><rect x="84.1758%" y="229" width="0.1115%" height="15" fill="rgb(205,151,52)" fg:x="9059" fg:w="12"/><text x="84.4258%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="84.2594%" y="213" width="0.0279%" height="15" fill="rgb(253,215,39)" fg:x="9068" fg:w="3"/><text x="84.5094%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="84.3152%" y="229" width="0.0186%" height="15" fill="rgb(221,220,41)" fg:x="9074" fg:w="2"/><text x="84.5652%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (248 samples, 2.30%)</title><rect x="83.6369%" y="261" width="2.3044%" height="15" fill="rgb(218,133,21)" fg:x="9001" fg:w="248"/><text x="83.8869%" y="271.50">f..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (248 samples, 2.30%)</title><rect x="83.6369%" y="245" width="2.3044%" height="15" fill="rgb(221,193,43)" fg:x="9001" fg:w="248"/><text x="83.8869%" y="255.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memset (173 samples, 1.61%)</title><rect x="84.3338%" y="229" width="1.6075%" height="15" fill="rgb(240,128,52)" fg:x="9076" fg:w="173"/><text x="84.5838%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (12 samples, 0.11%)</title><rect x="85.9413%" y="261" width="0.1115%" height="15" fill="rgb(253,114,12)" fg:x="9249" fg:w="12"/><text x="86.1913%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$cbrt (5 samples, 0.05%)</title><rect x="89.2028%" y="245" width="0.0465%" height="15" fill="rgb(215,223,47)" fg:x="9600" fg:w="5"/><text x="89.4528%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$exp (5 samples, 0.05%)</title><rect x="89.2492%" y="245" width="0.0465%" height="15" fill="rgb(248,225,23)" fg:x="9605" fg:w="5"/><text x="89.4992%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$log (2 samples, 0.02%)</title><rect x="89.2957%" y="245" width="0.0186%" height="15" fill="rgb(250,108,0)" fg:x="9610" fg:w="2"/><text x="89.5457%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$pow (6 samples, 0.06%)</title><rect x="89.3143%" y="245" width="0.0558%" height="15" fill="rgb(228,208,7)" fg:x="9612" fg:w="6"/><text x="89.5643%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$tan (3 samples, 0.03%)</title><rect x="89.3700%" y="245" width="0.0279%" height="15" fill="rgb(244,45,10)" fg:x="9618" fg:w="3"/><text x="89.6200%" y="255.50"></text></g><g><title>libsystem_m.dylib`0x000000019bf43be4 (15 samples, 0.14%)</title><rect x="92.1111%" y="229" width="0.1394%" height="15" fill="rgb(207,125,25)" fg:x="9913" fg:w="15"/><text x="92.3611%" y="239.50"></text></g><g><title>libsystem_m.dylib`0x000000019bf43cfc (15 samples, 0.14%)</title><rect x="92.2505%" y="229" width="0.1394%" height="15" fill="rgb(210,195,18)" fg:x="9928" fg:w="15"/><text x="92.5005%" y="239.50"></text></g><g><title>libsystem_m.dylib`cbrt (36 samples, 0.33%)</title><rect x="92.3899%" y="229" width="0.3345%" height="15" fill="rgb(249,80,12)" fg:x="9943" fg:w="36"/><text x="92.6399%" y="239.50"></text></g><g><title>libsystem_m.dylib`exp (42 samples, 0.39%)</title><rect x="92.7244%" y="229" width="0.3903%" height="15" fill="rgb(221,65,9)" fg:x="9979" fg:w="42"/><text x="92.9744%" y="239.50"></text></g><g><title>libsystem_m.dylib`log (45 samples, 0.42%)</title><rect x="93.1147%" y="229" width="0.4181%" height="15" fill="rgb(235,49,36)" fg:x="10021" fg:w="45"/><text x="93.3647%" y="239.50"></text></g><g><title>libsystem_m.dylib`pow (271 samples, 2.52%)</title><rect x="93.5328%" y="229" width="2.5181%" height="15" fill="rgb(225,32,20)" fg:x="10066" fg:w="271"/><text x="93.7828%" y="239.50">li..</text></g><g><title>libsystem_m.dylib`sin (38 samples, 0.35%)</title><rect x="96.0509%" y="229" width="0.3531%" height="15" fill="rgb(215,141,46)" fg:x="10337" fg:w="38"/><text x="96.3009%" y="239.50"></text></g><g><title>libsystem_m.dylib`tan (102 samples, 0.95%)</title><rect x="96.4040%" y="229" width="0.9478%" height="15" fill="rgb(250,160,47)" fg:x="10375" fg:w="102"/><text x="96.6540%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (3 samples, 0.03%)</title><rect x="97.3611%" y="213" width="0.0279%" height="15" fill="rgb(216,222,40)" fg:x="10478" fg:w="3"/><text x="97.6111%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.02%)</title><rect x="97.3890%" y="213" width="0.0186%" height="15" fill="rgb(234,217,39)" fg:x="10481" fg:w="2"/><text x="97.6390%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="97.5283%" y="197" width="0.0186%" height="15" fill="rgb(207,178,40)" fg:x="10496" fg:w="2"/><text x="97.7783%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (8 samples, 0.07%)</title><rect x="97.5469%" y="197" width="0.0743%" height="15" fill="rgb(221,136,13)" fg:x="10498" fg:w="8"/><text x="97.7969%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (2 samples, 0.02%)</title><rect x="97.7049%" y="181" width="0.0186%" height="15" fill="rgb(249,199,10)" fg:x="10515" fg:w="2"/><text x="97.9549%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (898 samples, 8.34%)</title><rect x="89.4072%" y="245" width="8.3442%" height="15" fill="rgb(249,222,13)" fg:x="9622" fg:w="898"/><text x="89.6572%" y="255.50">fekan`fekan:..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (43 samples, 0.40%)</title><rect x="97.3518%" y="229" width="0.3996%" height="15" fill="rgb(244,185,38)" fg:x="10477" fg:w="43"/><text x="97.6018%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (37 samples, 0.34%)</title><rect x="97.4075%" y="213" width="0.3438%" height="15" fill="rgb(236,202,9)" fg:x="10483" fg:w="37"/><text x="97.6575%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (14 samples, 0.13%)</title><rect x="97.6213%" y="197" width="0.1301%" height="15" fill="rgb(250,229,37)" fg:x="10506" fg:w="14"/><text x="97.8713%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.03%)</title><rect x="97.7235%" y="181" width="0.0279%" height="15" fill="rgb(206,174,23)" fg:x="10517" fg:w="3"/><text x="97.9735%" y="191.50"></text></g><g><title>libsystem_m.dylib`cbrt (16 samples, 0.15%)</title><rect x="97.7606%" y="245" width="0.1487%" height="15" fill="rgb(211,33,43)" fg:x="10521" fg:w="16"/><text x="98.0106%" y="255.50"></text></g><g><title>libsystem_m.dylib`log (3 samples, 0.03%)</title><rect x="97.9186%" y="245" width="0.0279%" height="15" fill="rgb(245,58,50)" fg:x="10538" fg:w="3"/><text x="98.1686%" y="255.50"></text></g><g><title>libsystem_m.dylib`pow (6 samples, 0.06%)</title><rect x="97.9465%" y="245" width="0.0558%" height="15" fill="rgb(244,68,36)" fg:x="10541" fg:w="6"/><text x="98.1965%" y="255.50"></text></g><g><title>libsystem_m.dylib`sin (5 samples, 0.05%)</title><rect x="98.0022%" y="245" width="0.0465%" height="15" fill="rgb(232,229,15)" fg:x="10547" fg:w="5"/><text x="98.2522%" y="255.50"></text></g><g><title>libsystem_m.dylib`tan (13 samples, 0.12%)</title><rect x="98.0487%" y="245" width="0.1208%" height="15" fill="rgb(254,30,23)" fg:x="10552" fg:w="13"/><text x="98.2987%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (3 samples, 0.03%)</title><rect x="98.1695%" y="245" width="0.0279%" height="15" fill="rgb(235,160,14)" fg:x="10565" fg:w="3"/><text x="98.4195%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="98.1974%" y="245" width="0.0372%" height="15" fill="rgb(212,155,44)" fg:x="10568" fg:w="4"/><text x="98.4474%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.05%)</title><rect x="98.2438%" y="245" width="0.0465%" height="15" fill="rgb(226,2,50)" fg:x="10573" fg:w="5"/><text x="98.4938%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (2 samples, 0.02%)</title><rect x="98.5690%" y="229" width="0.0186%" height="15" fill="rgb(234,177,6)" fg:x="10608" fg:w="2"/><text x="98.8190%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.05%)</title><rect x="99.1358%" y="213" width="0.0465%" height="15" fill="rgb(217,24,9)" fg:x="10669" fg:w="5"/><text x="99.3858%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (105 samples, 0.98%)</title><rect x="98.2903%" y="245" width="0.9757%" height="15" fill="rgb(220,13,46)" fg:x="10578" fg:w="105"/><text x="98.5403%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (73 samples, 0.68%)</title><rect x="98.5876%" y="229" width="0.6783%" height="15" fill="rgb(239,221,27)" fg:x="10610" fg:w="73"/><text x="98.8376%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (9 samples, 0.08%)</title><rect x="99.1823%" y="213" width="0.0836%" height="15" fill="rgb(222,198,25)" fg:x="10674" fg:w="9"/><text x="99.4323%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.06%)</title><rect x="99.2845%" y="245" width="0.0558%" height="15" fill="rgb(211,99,13)" fg:x="10685" fg:w="6"/><text x="99.5345%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::parameter_search (1,436 samples, 13.34%)</title><rect x="86.0528%" y="261" width="13.3432%" height="15" fill="rgb(232,111,31)" fg:x="9261" fg:w="1436"/><text x="86.3028%" y="271.50">fekan`fekan::kan_lay..</text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.06%)</title><rect x="99.3403%" y="245" width="0.0558%" height="15" fill="rgb(245,82,37)" fg:x="10691" fg:w="6"/><text x="99.5903%" y="255.50"></text></g><g><title>fekan`indicatif::progress_bar::TickerControl::run (3 samples, 0.03%)</title><rect x="99.3960%" y="261" width="0.0279%" height="15" fill="rgb(227,149,46)" fg:x="10697" fg:w="3"/><text x="99.6460%" y="271.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait_timeout_while (3 samples, 0.03%)</title><rect x="99.3960%" y="245" width="0.0279%" height="15" fill="rgb(218,36,50)" fg:x="10697" fg:w="3"/><text x="99.6460%" y="255.50"></text></g><g><title>fekan`std::sys::sync::condvar::pthread::Condvar::wait_timeout (3 samples, 0.03%)</title><rect x="99.3960%" y="229" width="0.0279%" height="15" fill="rgb(226,80,48)" fg:x="10697" fg:w="3"/><text x="99.6460%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3 samples, 0.03%)</title><rect x="99.3960%" y="213" width="0.0279%" height="15" fill="rgb(238,224,15)" fg:x="10697" fg:w="3"/><text x="99.6460%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (19 samples, 0.18%)</title><rect x="99.4239%" y="261" width="0.1765%" height="15" fill="rgb(241,136,10)" fg:x="10700" fg:w="19"/><text x="99.6739%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="99.6004%" y="261" width="0.0372%" height="15" fill="rgb(208,32,45)" fg:x="10719" fg:w="4"/><text x="99.8504%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (10 samples, 0.09%)</title><rect x="99.6376%" y="261" width="0.0929%" height="15" fill="rgb(207,135,9)" fg:x="10723" fg:w="10"/><text x="99.8876%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.03%)</title><rect x="99.7305%" y="261" width="0.0279%" height="15" fill="rgb(206,86,44)" fg:x="10733" fg:w="3"/><text x="99.9805%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.06%)</title><rect x="99.7584%" y="261" width="0.0558%" height="15" fill="rgb(245,177,15)" fg:x="10736" fg:w="6"/><text x="100.0084%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="99.8142%" y="261" width="0.0279%" height="15" fill="rgb(206,64,50)" fg:x="10742" fg:w="3"/><text x="100.0642%" y="271.50"></text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (5,939 samples, 55.18%)</title><rect x="44.7315%" y="277" width="55.1849%" height="15" fill="rgb(234,36,40)" fg:x="4814" fg:w="5939"/><text x="44.9815%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.07%)</title><rect x="99.8513%" y="261" width="0.0650%" height="15" fill="rgb(213,64,8)" fg:x="10746" fg:w="7"/><text x="100.1013%" y="271.50"></text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (5,944 samples, 55.23%)</title><rect x="44.7315%" y="293" width="55.2314%" height="15" fill="rgb(210,75,36)" fg:x="4814" fg:w="5944"/><text x="44.9815%" y="303.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_malloc.dylib`_free (5 samples, 0.05%)</title><rect x="99.9164%" y="277" width="0.0465%" height="15" fill="rgb(229,88,21)" fg:x="10753" fg:w="5"/><text x="100.1664%" y="287.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (5,945 samples, 55.24%)</title><rect x="44.7315%" y="309" width="55.2407%" height="15" fill="rgb(252,204,47)" fg:x="4814" fg:w="5945"/><text x="44.9815%" y="319.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>libsystem_kernel.dylib`__munmap (2 samples, 0.02%)</title><rect x="99.9721%" y="309" width="0.0186%" height="15" fill="rgb(208,77,27)" fg:x="10759" fg:w="2"/><text x="100.2221%" y="319.50"></text></g><g><title>all (10,762 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="10762"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5,949 samples, 55.28%)</title><rect x="44.7222%" y="341" width="55.2778%" height="15" fill="rgb(225,139,18)" fg:x="4813" fg:w="5949"/><text x="44.9722%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (5,948 samples, 55.27%)</title><rect x="44.7315%" y="325" width="55.2685%" height="15" fill="rgb(230,137,11)" fg:x="4814" fg:w="5948"/><text x="44.9815%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g></svg></svg>