<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="14407"><g><title>fekan`fekan::split_data (2 samples, 0.01%)</title><rect x="0.0139%" y="229" width="0.0139%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.2639%" y="239.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (74 samples, 0.51%)</title><rect x="0.0694%" y="85" width="0.5136%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="74"/><text x="0.3194%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 0.51%)</title><rect x="0.0694%" y="69" width="0.5136%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="74"/><text x="0.3194%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (74 samples, 0.51%)</title><rect x="0.0694%" y="53" width="0.5136%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="74"/><text x="0.3194%" y="63.50"></text></g><g><title>fekan`DYLD-STUB$$read (4 samples, 0.03%)</title><rect x="0.6594%" y="37" width="0.0278%" height="15" fill="rgb(208,68,35)" fg:x="95" fg:w="4"/><text x="0.9094%" y="47.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,431 samples, 9.93%)</title><rect x="0.0694%" y="101" width="9.9327%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="1431"/><text x="0.3194%" y="111.50">fekan`&lt;core::m..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,357 samples, 9.42%)</title><rect x="0.5830%" y="85" width="9.4190%" height="15" fill="rgb(207,160,47)" fg:x="84" fg:w="1357"/><text x="0.8330%" y="95.50">fekan`serde_j..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,357 samples, 9.42%)</title><rect x="0.5830%" y="69" width="9.4190%" height="15" fill="rgb(228,23,34)" fg:x="84" fg:w="1357"/><text x="0.8330%" y="79.50">fekan`serde_j..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,349 samples, 9.36%)</title><rect x="0.6386%" y="53" width="9.3635%" height="15" fill="rgb(218,30,26)" fg:x="92" fg:w="1349"/><text x="0.8886%" y="63.50">fekan`&lt;std::i..</text></g><g><title>libsystem_kernel.dylib`read (1,342 samples, 9.31%)</title><rect x="0.6872%" y="37" width="9.3149%" height="15" fill="rgb(220,122,19)" fg:x="99" fg:w="1342"/><text x="0.9372%" y="47.50">libsystem_ker..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 0.92%)</title><rect x="10.0021%" y="101" width="0.9232%" height="15" fill="rgb(250,228,42)" fg:x="1441" fg:w="133"/><text x="10.2521%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (132 samples, 0.92%)</title><rect x="10.0090%" y="85" width="0.9162%" height="15" fill="rgb(240,193,28)" fg:x="1442" fg:w="132"/><text x="10.2590%" y="95.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,566 samples, 10.87%)</title><rect x="0.0625%" y="117" width="10.8697%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="1566"/><text x="0.3125%" y="127.50">fekan`&lt;serde_jso..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,568 samples, 10.88%)</title><rect x="0.0555%" y="133" width="10.8836%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1568"/><text x="0.3055%" y="143.50">fekan`&lt;serde::de..</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,635 samples, 11.35%)</title><rect x="0.0555%" y="149" width="11.3486%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1635"/><text x="0.3055%" y="159.50">fekan`&lt;&amp;mut serde..</text></g><g><title>libsystem_kernel.dylib`read (66 samples, 0.46%)</title><rect x="10.9461%" y="133" width="0.4581%" height="15" fill="rgb(231,73,38)" fg:x="1577" fg:w="66"/><text x="11.1961%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.59%)</title><rect x="11.4111%" y="133" width="0.5900%" height="15" fill="rgb(225,20,46)" fg:x="1644" fg:w="85"/><text x="11.6611%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (84 samples, 0.58%)</title><rect x="11.4181%" y="117" width="0.5830%" height="15" fill="rgb(210,31,41)" fg:x="1645" fg:w="84"/><text x="11.6681%" y="127.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (35 samples, 0.24%)</title><rect x="12.0011%" y="133" width="0.2429%" height="15" fill="rgb(221,200,47)" fg:x="1729" fg:w="35"/><text x="12.2511%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.24%)</title><rect x="12.0011%" y="117" width="0.2429%" height="15" fill="rgb(226,26,5)" fg:x="1729" fg:w="35"/><text x="12.2511%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (34 samples, 0.24%)</title><rect x="12.0081%" y="101" width="0.2360%" height="15" fill="rgb(249,33,26)" fg:x="1730" fg:w="34"/><text x="12.2581%" y="111.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.01%)</title><rect x="12.2857%" y="85" width="0.0139%" height="15" fill="rgb(235,183,28)" fg:x="1770" fg:w="2"/><text x="12.5357%" y="95.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (804 samples, 5.58%)</title><rect x="11.4042%" y="149" width="5.5806%" height="15" fill="rgb(221,5,38)" fg:x="1643" fg:w="804"/><text x="11.6542%" y="159.50">fekan`&lt;..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (683 samples, 4.74%)</title><rect x="12.2440%" y="133" width="4.7408%" height="15" fill="rgb(247,18,42)" fg:x="1764" fg:w="683"/><text x="12.4940%" y="143.50">fekan`..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (682 samples, 4.73%)</title><rect x="12.2510%" y="117" width="4.7338%" height="15" fill="rgb(241,131,45)" fg:x="1765" fg:w="682"/><text x="12.5010%" y="127.50">fekan`..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (678 samples, 4.71%)</title><rect x="12.2788%" y="101" width="4.7060%" height="15" fill="rgb(249,31,29)" fg:x="1769" fg:w="678"/><text x="12.5288%" y="111.50">fekan..</text></g><g><title>libsystem_kernel.dylib`read (675 samples, 4.69%)</title><rect x="12.2996%" y="85" width="4.6852%" height="15" fill="rgb(225,111,53)" fg:x="1772" fg:w="675"/><text x="12.5496%" y="95.50">libsy..</text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="17.0126%" y="117" width="0.0139%" height="15" fill="rgb(238,160,17)" fg:x="2451" fg:w="2"/><text x="17.2626%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (558 samples, 3.87%)</title><rect x="17.0126%" y="133" width="3.8731%" height="15" fill="rgb(214,148,48)" fg:x="2451" fg:w="558"/><text x="17.2626%" y="143.50">feka..</text></g><g><title>libsystem_kernel.dylib`read (556 samples, 3.86%)</title><rect x="17.0264%" y="117" width="3.8592%" height="15" fill="rgb(232,36,49)" fg:x="2453" fg:w="556"/><text x="17.2764%" y="127.50">libs..</text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (566 samples, 3.93%)</title><rect x="16.9848%" y="149" width="3.9286%" height="15" fill="rgb(209,103,24)" fg:x="2447" fg:w="566"/><text x="17.2348%" y="159.50">feka..</text></g><g><title>fekan`core::str::converts::from_utf8 (4 samples, 0.03%)</title><rect x="20.8857%" y="133" width="0.0278%" height="15" fill="rgb(229,88,8)" fg:x="3009" fg:w="4"/><text x="21.1357%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (167 samples, 1.16%)</title><rect x="20.9134%" y="149" width="1.1592%" height="15" fill="rgb(213,181,19)" fg:x="3013" fg:w="167"/><text x="21.1634%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (166 samples, 1.15%)</title><rect x="20.9204%" y="133" width="1.1522%" height="15" fill="rgb(254,191,54)" fg:x="3014" fg:w="166"/><text x="21.1704%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,259 samples, 22.62%)</title><rect x="0.0416%" y="165" width="22.6209%" height="15" fill="rgb(241,83,37)" fg:x="6" fg:w="3259"/><text x="0.2916%" y="175.50">fekan`&lt;&amp;mut serde_json::de::Deserial..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (85 samples, 0.59%)</title><rect x="22.0726%" y="149" width="0.5900%" height="15" fill="rgb(233,36,39)" fg:x="3180" fg:w="85"/><text x="22.3226%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (85 samples, 0.59%)</title><rect x="22.0726%" y="133" width="0.5900%" height="15" fill="rgb(226,3,54)" fg:x="3180" fg:w="85"/><text x="22.3226%" y="143.50"></text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,398 samples, 23.59%)</title><rect x="0.0347%" y="181" width="23.5858%" height="15" fill="rgb(245,192,40)" fg:x="5" fg:w="3398"/><text x="0.2847%" y="191.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; a..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (138 samples, 0.96%)</title><rect x="22.6626%" y="165" width="0.9579%" height="15" fill="rgb(238,167,29)" fg:x="3265" fg:w="138"/><text x="22.9126%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (137 samples, 0.95%)</title><rect x="22.6695%" y="149" width="0.9509%" height="15" fill="rgb(232,182,51)" fg:x="3266" fg:w="137"/><text x="22.9195%" y="159.50"></text></g><g><title>fekan`fekan::load_regression_data (3,402 samples, 23.61%)</title><rect x="0.0139%" y="245" width="23.6135%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="3402"/><text x="0.2639%" y="255.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`serde_json::de::from_trait (3,400 samples, 23.60%)</title><rect x="0.0278%" y="229" width="23.5996%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="3400"/><text x="0.2778%" y="239.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,400 samples, 23.60%)</title><rect x="0.0278%" y="213" width="23.5996%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="3400"/><text x="0.2778%" y="223.50">fekan`&lt;&amp;mut serde_json::de::Deseriali..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,400 samples, 23.60%)</title><rect x="0.0278%" y="197" width="23.5996%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="3400"/><text x="0.2778%" y="207.50">fekan`&lt;serde::de::impls::&lt;impl serde:..</text></g><g><title>fekan`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (12 samples, 0.08%)</title><rect x="23.6482%" y="229" width="0.0833%" height="15" fill="rgb(222,207,29)" fg:x="3407" fg:w="12"/><text x="23.8982%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.11%)</title><rect x="23.7385%" y="165" width="0.1111%" height="15" fill="rgb(206,96,30)" fg:x="3420" fg:w="16"/><text x="23.9885%" y="175.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::edge::Edge&gt; (17 samples, 0.12%)</title><rect x="23.7385%" y="197" width="0.1180%" height="15" fill="rgb(218,138,4)" fg:x="3420" fg:w="17"/><text x="23.9885%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (17 samples, 0.12%)</title><rect x="23.7385%" y="181" width="0.1180%" height="15" fill="rgb(250,191,14)" fg:x="3420" fg:w="17"/><text x="23.9885%" y="191.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (21 samples, 0.15%)</title><rect x="23.7315%" y="213" width="0.1458%" height="15" fill="rgb(239,60,40)" fg:x="3419" fg:w="21"/><text x="23.9815%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="23.8565%" y="197" width="0.0208%" height="15" fill="rgb(206,27,48)" fg:x="3437" fg:w="3"/><text x="24.1065%" y="207.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (22 samples, 0.15%)</title><rect x="23.7315%" y="229" width="0.1527%" height="15" fill="rgb(225,35,8)" fg:x="3419" fg:w="22"/><text x="23.9815%" y="239.50"></text></g><g><title>fekan`alloc::vec::in_place_collect::from_iter_in_place (3 samples, 0.02%)</title><rect x="23.8912%" y="197" width="0.0208%" height="15" fill="rgb(250,213,24)" fg:x="3442" fg:w="3"/><text x="24.1412%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.02%)</title><rect x="23.8912%" y="181" width="0.0208%" height="15" fill="rgb(247,123,22)" fg:x="3442" fg:w="3"/><text x="24.1412%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="23.8912%" y="165" width="0.0208%" height="15" fill="rgb(231,138,38)" fg:x="3442" fg:w="3"/><text x="24.1412%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 0.15%)</title><rect x="23.9120%" y="165" width="0.1527%" height="15" fill="rgb(231,145,46)" fg:x="3445" fg:w="22"/><text x="24.1620%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (28 samples, 0.19%)</title><rect x="23.9120%" y="181" width="0.1943%" height="15" fill="rgb(251,118,11)" fg:x="3445" fg:w="28"/><text x="24.1620%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_large (6 samples, 0.04%)</title><rect x="24.0647%" y="165" width="0.0416%" height="15" fill="rgb(217,147,25)" fg:x="3467" fg:w="6"/><text x="24.3147%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (6 samples, 0.04%)</title><rect x="24.0647%" y="149" width="0.0416%" height="15" fill="rgb(247,81,37)" fg:x="3467" fg:w="6"/><text x="24.3147%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (6 samples, 0.04%)</title><rect x="24.0647%" y="133" width="0.0416%" height="15" fill="rgb(209,12,38)" fg:x="3467" fg:w="6"/><text x="24.3147%" y="143.50"></text></g><g><title>fekan`fekan::kan::Kan::merge_models (33 samples, 0.23%)</title><rect x="23.8912%" y="229" width="0.2291%" height="15" fill="rgb(227,1,9)" fg:x="3442" fg:w="33"/><text x="24.1412%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::merge_layers (33 samples, 0.23%)</title><rect x="23.8912%" y="213" width="0.2291%" height="15" fill="rgb(248,47,43)" fg:x="3442" fg:w="33"/><text x="24.1412%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::merge_edges (30 samples, 0.21%)</title><rect x="23.9120%" y="197" width="0.2082%" height="15" fill="rgb(221,10,30)" fg:x="3445" fg:w="30"/><text x="24.1620%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.01%)</title><rect x="24.1063%" y="181" width="0.0139%" height="15" fill="rgb(210,229,1)" fg:x="3473" fg:w="2"/><text x="24.3563%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="24.1063%" y="165" width="0.0139%" height="15" fill="rgb(222,148,37)" fg:x="3473" fg:w="2"/><text x="24.3563%" y="175.50"></text></g><g><title>fekan`fekan::kan::Kan::test_and_set_symbolic (3 samples, 0.02%)</title><rect x="24.1202%" y="229" width="0.0208%" height="15" fill="rgb(234,67,33)" fg:x="3475" fg:w="3"/><text x="24.3702%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::test_and_set_symbolic (3 samples, 0.02%)</title><rect x="24.1202%" y="213" width="0.0208%" height="15" fill="rgb(247,98,35)" fg:x="3475" fg:w="3"/><text x="24.3702%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::suggest_symbolic (3 samples, 0.02%)</title><rect x="24.1202%" y="197" width="0.0208%" height="15" fill="rgb(247,138,52)" fg:x="3475" fg:w="3"/><text x="24.3702%" y="207.50"></text></g><g><title>fekan`std::thread::scoped::scope (3 samples, 0.02%)</title><rect x="24.1202%" y="181" width="0.0208%" height="15" fill="rgb(213,79,30)" fg:x="3475" fg:w="3"/><text x="24.3702%" y="191.50"></text></g><g><title>fekan`std::thread::scoped::_&lt;impl std::thread::Builder&gt;::spawn_scoped (2 samples, 0.01%)</title><rect x="24.1272%" y="165" width="0.0139%" height="15" fill="rgb(246,177,23)" fg:x="3476" fg:w="2"/><text x="24.3772%" y="175.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new (2 samples, 0.01%)</title><rect x="24.1272%" y="149" width="0.0139%" height="15" fill="rgb(230,62,27)" fg:x="3476" fg:w="2"/><text x="24.3772%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (2 samples, 0.01%)</title><rect x="24.1272%" y="133" width="0.0139%" height="15" fill="rgb(216,154,8)" fg:x="3476" fg:w="2"/><text x="24.3772%" y="143.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (2 samples, 0.01%)</title><rect x="24.3146%" y="181" width="0.0139%" height="15" fill="rgb(244,35,45)" fg:x="3503" fg:w="2"/><text x="24.5646%" y="191.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (2 samples, 0.01%)</title><rect x="24.3146%" y="165" width="0.0139%" height="15" fill="rgb(251,115,12)" fg:x="3503" fg:w="2"/><text x="24.5646%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.01%)</title><rect x="24.3146%" y="149" width="0.0139%" height="15" fill="rgb(240,54,50)" fg:x="3503" fg:w="2"/><text x="24.5646%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.01%)</title><rect x="24.3146%" y="133" width="0.0139%" height="15" fill="rgb(233,84,52)" fg:x="3503" fg:w="2"/><text x="24.5646%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (51 samples, 0.35%)</title><rect x="25.4529%" y="149" width="0.3540%" height="15" fill="rgb(207,117,47)" fg:x="3667" fg:w="51"/><text x="25.7029%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (28 samples, 0.19%)</title><rect x="25.6125%" y="133" width="0.1943%" height="15" fill="rgb(249,43,39)" fg:x="3690" fg:w="28"/><text x="25.8625%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (43 samples, 0.30%)</title><rect x="25.8069%" y="149" width="0.2985%" height="15" fill="rgb(209,38,44)" fg:x="3718" fg:w="43"/><text x="26.0569%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (248 samples, 1.72%)</title><rect x="24.7310%" y="165" width="1.7214%" height="15" fill="rgb(236,212,23)" fg:x="3563" fg:w="248"/><text x="24.9810%" y="175.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (50 samples, 0.35%)</title><rect x="26.1054%" y="149" width="0.3471%" height="15" fill="rgb(242,79,21)" fg:x="3761" fg:w="50"/><text x="26.3554%" y="159.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.06%)</title><rect x="26.3969%" y="133" width="0.0555%" height="15" fill="rgb(211,96,35)" fg:x="3803" fg:w="8"/><text x="26.6469%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.01%)</title><rect x="27.3270%" y="133" width="0.0139%" height="15" fill="rgb(253,215,40)" fg:x="3937" fg:w="2"/><text x="27.5770%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="27.3270%" y="117" width="0.0139%" height="15" fill="rgb(211,81,21)" fg:x="3937" fg:w="2"/><text x="27.5770%" y="127.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (51 samples, 0.35%)</title><rect x="26.9938%" y="149" width="0.3540%" height="15" fill="rgb(208,190,38)" fg:x="3889" fg:w="51"/><text x="27.2438%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (440 samples, 3.05%)</title><rect x="24.3285%" y="181" width="3.0541%" height="15" fill="rgb(235,213,38)" fg:x="3505" fg:w="440"/><text x="24.5785%" y="191.50">fek..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (134 samples, 0.93%)</title><rect x="26.4524%" y="165" width="0.9301%" height="15" fill="rgb(237,122,38)" fg:x="3811" fg:w="134"/><text x="26.7024%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.03%)</title><rect x="27.3478%" y="149" width="0.0347%" height="15" fill="rgb(244,218,35)" fg:x="3940" fg:w="5"/><text x="27.5978%" y="159.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.06%)</title><rect x="27.3825%" y="181" width="0.0625%" height="15" fill="rgb(240,68,47)" fg:x="3945" fg:w="9"/><text x="27.6325%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (473 samples, 3.28%)</title><rect x="24.1688%" y="197" width="3.2831%" height="15" fill="rgb(210,16,53)" fg:x="3482" fg:w="473"/><text x="24.4188%" y="207.50">fek..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (11 samples, 0.08%)</title><rect x="27.4519%" y="197" width="0.0764%" height="15" fill="rgb(235,124,12)" fg:x="3955" fg:w="11"/><text x="27.7019%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (490 samples, 3.40%)</title><rect x="24.1410%" y="213" width="3.4011%" height="15" fill="rgb(224,169,11)" fg:x="3478" fg:w="490"/><text x="24.3910%" y="223.50">fek..</text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (23 samples, 0.16%)</title><rect x="27.5422%" y="197" width="0.1596%" height="15" fill="rgb(250,166,2)" fg:x="3968" fg:w="23"/><text x="27.7922%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (23 samples, 0.16%)</title><rect x="27.5422%" y="181" width="0.1596%" height="15" fill="rgb(242,216,29)" fg:x="3968" fg:w="23"/><text x="27.7922%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (23 samples, 0.16%)</title><rect x="27.5422%" y="165" width="0.1596%" height="15" fill="rgb(230,116,27)" fg:x="3968" fg:w="23"/><text x="27.7922%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (19 samples, 0.13%)</title><rect x="27.5699%" y="149" width="0.1319%" height="15" fill="rgb(228,99,48)" fg:x="3972" fg:w="19"/><text x="27.8199%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (17 samples, 0.12%)</title><rect x="27.5838%" y="133" width="0.1180%" height="15" fill="rgb(253,11,6)" fg:x="3974" fg:w="17"/><text x="27.8338%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (14 samples, 0.10%)</title><rect x="27.6046%" y="117" width="0.0972%" height="15" fill="rgb(247,143,39)" fg:x="3977" fg:w="14"/><text x="27.8546%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (12 samples, 0.08%)</title><rect x="27.6185%" y="101" width="0.0833%" height="15" fill="rgb(236,97,10)" fg:x="3979" fg:w="12"/><text x="27.8685%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (10 samples, 0.07%)</title><rect x="27.6324%" y="85" width="0.0694%" height="15" fill="rgb(233,208,19)" fg:x="3981" fg:w="10"/><text x="27.8824%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.06%)</title><rect x="27.6463%" y="69" width="0.0555%" height="15" fill="rgb(216,164,2)" fg:x="3983" fg:w="8"/><text x="27.8963%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.04%)</title><rect x="27.6602%" y="53" width="0.0416%" height="15" fill="rgb(220,129,5)" fg:x="3985" fg:w="6"/><text x="27.9102%" y="63.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.01%)</title><rect x="27.6879%" y="37" width="0.0139%" height="15" fill="rgb(242,17,10)" fg:x="3989" fg:w="2"/><text x="27.9379%" y="47.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (24 samples, 0.17%)</title><rect x="27.5422%" y="213" width="0.1666%" height="15" fill="rgb(242,107,0)" fg:x="3968" fg:w="24"/><text x="27.7922%" y="223.50"></text></g><g><title>fekan`fekan::preset_knot_ranges (515 samples, 3.57%)</title><rect x="24.1410%" y="229" width="3.5747%" height="15" fill="rgb(251,28,31)" fg:x="3478" fg:w="515"/><text x="24.3910%" y="239.50">feka..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (368 samples, 2.55%)</title><rect x="27.7365%" y="165" width="2.5543%" height="15" fill="rgb(233,223,10)" fg:x="3996" fg:w="368"/><text x="27.9865%" y="175.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (329 samples, 2.28%)</title><rect x="28.0072%" y="149" width="2.2836%" height="15" fill="rgb(215,21,27)" fg:x="4035" fg:w="329"/><text x="28.2572%" y="159.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (245 samples, 1.70%)</title><rect x="28.5903%" y="133" width="1.7006%" height="15" fill="rgb(232,23,21)" fg:x="4119" fg:w="245"/><text x="28.8403%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (70 samples, 0.49%)</title><rect x="29.8050%" y="117" width="0.4859%" height="15" fill="rgb(244,5,23)" fg:x="4294" fg:w="70"/><text x="30.0550%" y="127.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bcfc (2 samples, 0.01%)</title><rect x="30.2908%" y="165" width="0.0139%" height="15" fill="rgb(226,81,46)" fg:x="4364" fg:w="2"/><text x="30.5408%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (374 samples, 2.60%)</title><rect x="27.7157%" y="181" width="2.5960%" height="15" fill="rgb(247,70,30)" fg:x="3993" fg:w="374"/><text x="27.9657%" y="191.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (7 samples, 0.05%)</title><rect x="30.3117%" y="181" width="0.0486%" height="15" fill="rgb(212,68,19)" fg:x="4367" fg:w="7"/><text x="30.5617%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (382 samples, 2.65%)</title><rect x="27.7157%" y="197" width="2.6515%" height="15" fill="rgb(240,187,13)" fg:x="3993" fg:w="382"/><text x="27.9657%" y="207.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (2 samples, 0.01%)</title><rect x="30.3672%" y="197" width="0.0139%" height="15" fill="rgb(223,113,26)" fg:x="4375" fg:w="2"/><text x="30.6172%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (387 samples, 2.69%)</title><rect x="27.7157%" y="213" width="2.6862%" height="15" fill="rgb(206,192,2)" fg:x="3993" fg:w="387"/><text x="27.9657%" y="223.50">fe..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="30.3880%" y="197" width="0.0139%" height="15" fill="rgb(241,108,4)" fg:x="4378" fg:w="2"/><text x="30.6380%" y="207.50"></text></g><g><title>fekan`fekan::validate_model (388 samples, 2.69%)</title><rect x="27.7157%" y="229" width="2.6931%" height="15" fill="rgb(247,173,49)" fg:x="3993" fg:w="388"/><text x="27.9657%" y="239.50">fe..</text></g><g><title>fekan`rand::rng::Rng::gen_range (3 samples, 0.02%)</title><rect x="30.4088%" y="229" width="0.0208%" height="15" fill="rgb(224,114,35)" fg:x="4381" fg:w="3"/><text x="30.6588%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.04%)</title><rect x="30.5199%" y="165" width="0.0416%" height="15" fill="rgb(245,159,27)" fg:x="4397" fg:w="6"/><text x="30.7699%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.02%)</title><rect x="30.5407%" y="149" width="0.0208%" height="15" fill="rgb(245,172,44)" fg:x="4400" fg:w="3"/><text x="30.7907%" y="159.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (230 samples, 1.60%)</title><rect x="30.4297%" y="181" width="1.5964%" height="15" fill="rgb(236,23,11)" fg:x="4384" fg:w="230"/><text x="30.6797%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (211 samples, 1.46%)</title><rect x="30.5615%" y="165" width="1.4646%" height="15" fill="rgb(205,117,38)" fg:x="4403" fg:w="211"/><text x="30.8115%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (8 samples, 0.06%)</title><rect x="32.0469%" y="181" width="0.0555%" height="15" fill="rgb(237,72,25)" fg:x="4617" fg:w="8"/><text x="32.2969%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.08%)</title><rect x="32.1094%" y="181" width="0.0764%" height="15" fill="rgb(244,70,9)" fg:x="4626" fg:w="11"/><text x="32.3594%" y="191.50"></text></g><g><title>fekan`std::thread::scoped::scope (260 samples, 1.80%)</title><rect x="30.4297%" y="229" width="1.8047%" height="15" fill="rgb(217,125,39)" fg:x="4384" fg:w="260"/><text x="30.6797%" y="239.50">f..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (260 samples, 1.80%)</title><rect x="30.4297%" y="213" width="1.8047%" height="15" fill="rgb(235,36,10)" fg:x="4384" fg:w="260"/><text x="30.6797%" y="223.50">f..</text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (260 samples, 1.80%)</title><rect x="30.4297%" y="197" width="1.8047%" height="15" fill="rgb(251,123,47)" fg:x="4384" fg:w="260"/><text x="30.6797%" y="207.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.05%)</title><rect x="32.1857%" y="181" width="0.0486%" height="15" fill="rgb(221,13,13)" fg:x="4637" fg:w="7"/><text x="32.4357%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.02%)</title><rect x="32.2343%" y="229" width="0.0208%" height="15" fill="rgb(238,131,9)" fg:x="4644" fg:w="3"/><text x="32.4843%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="32.2621%" y="229" width="0.0278%" height="15" fill="rgb(211,50,8)" fg:x="4648" fg:w="4"/><text x="32.5121%" y="239.50"></text></g><g><title>fekan`fekan::train_model (1,250 samples, 8.68%)</title><rect x="23.6274%" y="245" width="8.6763%" height="15" fill="rgb(245,182,24)" fg:x="3404" fg:w="1250"/><text x="23.8774%" y="255.50">fekan`fekan:..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.01%)</title><rect x="32.3107%" y="245" width="0.0139%" height="15" fill="rgb(242,14,37)" fg:x="4655" fg:w="2"/><text x="32.5607%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="32.3246%" y="245" width="0.0208%" height="15" fill="rgb(246,228,12)" fg:x="4657" fg:w="3"/><text x="32.5746%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="32.3454%" y="245" width="0.0208%" height="15" fill="rgb(213,55,15)" fg:x="4660" fg:w="3"/><text x="32.5954%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="32.3662%" y="245" width="0.0139%" height="15" fill="rgb(209,9,3)" fg:x="4663" fg:w="2"/><text x="32.6162%" y="255.50"></text></g><g><title>dyld`start (4,666 samples, 32.39%)</title><rect x="0.0000%" y="341" width="32.3870%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="4666"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>fekan`main (4,666 samples, 32.39%)</title><rect x="0.0000%" y="325" width="32.3870%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="4666"/><text x="0.2500%" y="335.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (4,666 samples, 32.39%)</title><rect x="0.0000%" y="309" width="32.3870%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="4666"/><text x="0.2500%" y="319.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (4,666 samples, 32.39%)</title><rect x="0.0000%" y="293" width="32.3870%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="4666"/><text x="0.2500%" y="303.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (4,666 samples, 32.39%)</title><rect x="0.0000%" y="277" width="32.3870%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="4666"/><text x="0.2500%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtr..</text></g><g><title>fekan`fekan::main (4,666 samples, 32.39%)</title><rect x="0.0000%" y="261" width="32.3870%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="4666"/><text x="0.2500%" y="271.50">fekan`fekan::main</text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.02%)</title><rect x="32.3870%" y="341" width="0.0208%" height="15" fill="rgb(240,125,3)" fg:x="4666" fg:w="3"/><text x="32.6370%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (10 samples, 0.07%)</title><rect x="32.4079%" y="341" width="0.0694%" height="15" fill="rgb(205,98,50)" fg:x="4669" fg:w="10"/><text x="32.6579%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="32.4773%" y="341" width="0.0208%" height="15" fill="rgb(205,185,37)" fg:x="4679" fg:w="3"/><text x="32.7273%" y="351.50"></text></g><g><title>fekan`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="32.5050%" y="277" width="0.0208%" height="15" fill="rgb(238,207,15)" fg:x="4683" fg:w="3"/><text x="32.7550%" y="287.50"></text></g><g><title>fekan`__rdl_alloc (3 samples, 0.02%)</title><rect x="32.5328%" y="277" width="0.0208%" height="15" fill="rgb(213,199,42)" fg:x="4687" fg:w="3"/><text x="32.7828%" y="287.50"></text></g><g><title>fekan`DYLD-STUB$$free (4 samples, 0.03%)</title><rect x="33.0742%" y="261" width="0.0278%" height="15" fill="rgb(235,201,11)" fg:x="4765" fg:w="4"/><text x="33.3242%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (3 samples, 0.02%)</title><rect x="33.1020%" y="261" width="0.0208%" height="15" fill="rgb(207,46,11)" fg:x="4769" fg:w="3"/><text x="33.3520%" y="271.50"></text></g><g><title>fekan`__rdl_alloc (7 samples, 0.05%)</title><rect x="33.1228%" y="261" width="0.0486%" height="15" fill="rgb(241,35,35)" fg:x="4772" fg:w="7"/><text x="33.3728%" y="271.50"></text></g><g><title>fekan`__rdl_dealloc (3 samples, 0.02%)</title><rect x="33.1714%" y="261" width="0.0208%" height="15" fill="rgb(243,32,47)" fg:x="4779" fg:w="3"/><text x="33.4214%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (429 samples, 2.98%)</title><rect x="35.3786%" y="213" width="2.9777%" height="15" fill="rgb(247,202,23)" fg:x="5097" fg:w="429"/><text x="35.6286%" y="223.50">fek..</text></g><g><title>libsystem_m.dylib`0x00000001a728bcfc (2 samples, 0.01%)</title><rect x="38.3564%" y="213" width="0.0139%" height="15" fill="rgb(219,102,11)" fg:x="5526" fg:w="2"/><text x="38.6064%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (717 samples, 4.98%)</title><rect x="33.4074%" y="229" width="4.9767%" height="15" fill="rgb(243,110,44)" fg:x="4813" fg:w="717"/><text x="33.6574%" y="239.50">fekan`..</text></g><g><title>libsystem_m.dylib`cos (2 samples, 0.01%)</title><rect x="38.3702%" y="213" width="0.0139%" height="15" fill="rgb(222,74,54)" fg:x="5528" fg:w="2"/><text x="38.6202%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (171 samples, 1.19%)</title><rect x="38.3841%" y="229" width="1.1869%" height="15" fill="rgb(216,99,12)" fg:x="5530" fg:w="171"/><text x="38.6341%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (916 samples, 6.36%)</title><rect x="33.2616%" y="245" width="6.3580%" height="15" fill="rgb(226,22,26)" fg:x="4792" fg:w="916"/><text x="33.5116%" y="255.50">fekan`fe..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (7 samples, 0.05%)</title><rect x="39.5710%" y="229" width="0.0486%" height="15" fill="rgb(217,163,10)" fg:x="5701" fg:w="7"/><text x="39.8210%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (13 samples, 0.09%)</title><rect x="39.6196%" y="245" width="0.0902%" height="15" fill="rgb(213,25,53)" fg:x="5708" fg:w="13"/><text x="39.8696%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.03%)</title><rect x="39.7099%" y="245" width="0.0347%" height="15" fill="rgb(252,105,26)" fg:x="5721" fg:w="5"/><text x="39.9599%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.03%)</title><rect x="39.7446%" y="245" width="0.0347%" height="15" fill="rgb(220,39,43)" fg:x="5726" fg:w="5"/><text x="39.9946%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (952 samples, 6.61%)</title><rect x="33.1922%" y="261" width="6.6079%" height="15" fill="rgb(229,68,48)" fg:x="4782" fg:w="952"/><text x="33.4422%" y="271.50">fekan`fek..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (2 samples, 0.01%)</title><rect x="39.7862%" y="245" width="0.0139%" height="15" fill="rgb(252,8,32)" fg:x="5732" fg:w="2"/><text x="40.0362%" y="255.50"></text></g><g><title>fekan`__rdl_dealloc (2 samples, 0.01%)</title><rect x="39.9320%" y="245" width="0.0139%" height="15" fill="rgb(223,20,43)" fg:x="5753" fg:w="2"/><text x="40.1820%" y="255.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 0.08%)</title><rect x="40.4248%" y="229" width="0.0833%" height="15" fill="rgb(229,81,49)" fg:x="5824" fg:w="12"/><text x="40.6748%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (12 samples, 0.08%)</title><rect x="40.4248%" y="213" width="0.0833%" height="15" fill="rgb(236,28,36)" fg:x="5824" fg:w="12"/><text x="40.6748%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (12 samples, 0.08%)</title><rect x="40.4248%" y="197" width="0.0833%" height="15" fill="rgb(249,185,26)" fg:x="5824" fg:w="12"/><text x="40.6748%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (12 samples, 0.08%)</title><rect x="40.4248%" y="181" width="0.0833%" height="15" fill="rgb(249,174,33)" fg:x="5824" fg:w="12"/><text x="40.6748%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.08%)</title><rect x="40.4248%" y="165" width="0.0833%" height="15" fill="rgb(233,201,37)" fg:x="5824" fg:w="12"/><text x="40.6748%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (12 samples, 0.08%)</title><rect x="40.4248%" y="149" width="0.0833%" height="15" fill="rgb(221,78,26)" fg:x="5824" fg:w="12"/><text x="40.6748%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (12 samples, 0.08%)</title><rect x="40.4248%" y="133" width="0.0833%" height="15" fill="rgb(250,127,30)" fg:x="5824" fg:w="12"/><text x="40.6748%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (2 samples, 0.01%)</title><rect x="40.5081%" y="229" width="0.0139%" height="15" fill="rgb(230,49,44)" fg:x="5836" fg:w="2"/><text x="40.7581%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (818 samples, 5.68%)</title><rect x="53.6475%" y="197" width="5.6778%" height="15" fill="rgb(229,67,23)" fg:x="7729" fg:w="818"/><text x="53.8975%" y="207.50">fekan`f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (549 samples, 3.81%)</title><rect x="55.5147%" y="181" width="3.8106%" height="15" fill="rgb(249,83,47)" fg:x="7998" fg:w="549"/><text x="55.7647%" y="191.50">feka..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (227 samples, 1.58%)</title><rect x="59.3253%" y="197" width="1.5756%" height="15" fill="rgb(215,43,3)" fg:x="8547" fg:w="227"/><text x="59.5753%" y="207.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (15 samples, 0.10%)</title><rect x="65.3988%" y="181" width="0.1041%" height="15" fill="rgb(238,154,13)" fg:x="9422" fg:w="15"/><text x="65.6488%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.02%)</title><rect x="65.4821%" y="165" width="0.0208%" height="15" fill="rgb(219,56,2)" fg:x="9434" fg:w="3"/><text x="65.7321%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="65.4821%" y="149" width="0.0208%" height="15" fill="rgb(233,0,4)" fg:x="9434" fg:w="3"/><text x="65.7321%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (2,889 samples, 20.05%)</title><rect x="45.4571%" y="213" width="20.0528%" height="15" fill="rgb(235,30,7)" fg:x="6549" fg:w="2889"/><text x="45.7071%" y="223.50">fekan`fekan::kan_layer::edge::b..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (664 samples, 4.61%)</title><rect x="60.9010%" y="197" width="4.6089%" height="15" fill="rgb(250,79,13)" fg:x="8774" fg:w="664"/><text x="61.1510%" y="207.50">fekan..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (4,290 samples, 29.78%)</title><rect x="40.5220%" y="229" width="29.7772%" height="15" fill="rgb(211,146,34)" fg:x="5838" fg:w="4290"/><text x="40.7720%" y="239.50">fekan`fekan::kan_layer::edge::basis_cached</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (690 samples, 4.79%)</title><rect x="65.5098%" y="213" width="4.7893%" height="15" fill="rgb(228,22,38)" fg:x="9438" fg:w="690"/><text x="65.7598%" y="223.50">fekan`..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.04%)</title><rect x="70.2575%" y="197" width="0.0416%" height="15" fill="rgb(235,168,5)" fg:x="10122" fg:w="6"/><text x="70.5075%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.01%)</title><rect x="70.2853%" y="181" width="0.0139%" height="15" fill="rgb(221,155,16)" fg:x="10126" fg:w="2"/><text x="70.5353%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="70.2853%" y="165" width="0.0139%" height="15" fill="rgb(215,215,53)" fg:x="10126" fg:w="2"/><text x="70.5353%" y="175.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (43 samples, 0.30%)</title><rect x="70.2992%" y="229" width="0.2985%" height="15" fill="rgb(223,4,10)" fg:x="10128" fg:w="43"/><text x="70.5492%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (4,426 samples, 30.72%)</title><rect x="39.9459%" y="245" width="30.7212%" height="15" fill="rgb(234,103,6)" fg:x="5755" fg:w="4426"/><text x="40.1959%" y="255.50">fekan`fekan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (10 samples, 0.07%)</title><rect x="70.5976%" y="229" width="0.0694%" height="15" fill="rgb(227,97,0)" fg:x="10171" fg:w="10"/><text x="70.8476%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (71 samples, 0.49%)</title><rect x="70.6670%" y="245" width="0.4928%" height="15" fill="rgb(234,150,53)" fg:x="10181" fg:w="71"/><text x="70.9170%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.03%)</title><rect x="71.1599%" y="245" width="0.0347%" height="15" fill="rgb(228,201,54)" fg:x="10252" fg:w="5"/><text x="71.4099%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="71.1946%" y="245" width="0.0416%" height="15" fill="rgb(222,22,37)" fg:x="10257" fg:w="6"/><text x="71.4446%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.08%)</title><rect x="71.2362%" y="245" width="0.0833%" height="15" fill="rgb(237,53,32)" fg:x="10263" fg:w="12"/><text x="71.4862%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.10%)</title><rect x="71.3264%" y="245" width="0.1041%" height="15" fill="rgb(233,25,53)" fg:x="10276" fg:w="15"/><text x="71.5764%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (4,560 samples, 31.65%)</title><rect x="39.8001%" y="261" width="31.6513%" height="15" fill="rgb(210,40,34)" fg:x="5734" fg:w="4560"/><text x="40.0501%" y="271.50">fekan`fekan::kan::Kan::forward</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="71.4306%" y="245" width="0.0208%" height="15" fill="rgb(241,220,44)" fg:x="10291" fg:w="3"/><text x="71.6806%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (4 samples, 0.03%)</title><rect x="71.4514%" y="261" width="0.0278%" height="15" fill="rgb(235,28,35)" fg:x="10294" fg:w="4"/><text x="71.7014%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (3 samples, 0.02%)</title><rect x="71.4791%" y="261" width="0.0208%" height="15" fill="rgb(210,56,17)" fg:x="10298" fg:w="3"/><text x="71.7291%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.02%)</title><rect x="71.8193%" y="181" width="0.0208%" height="15" fill="rgb(224,130,29)" fg:x="10347" fg:w="3"/><text x="72.0693%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.01%)</title><rect x="71.8262%" y="165" width="0.0139%" height="15" fill="rgb(235,212,8)" fg:x="10348" fg:w="2"/><text x="72.0762%" y="175.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 0.06%)</title><rect x="71.7915%" y="245" width="0.0555%" height="15" fill="rgb(223,33,50)" fg:x="10343" fg:w="8"/><text x="72.0415%" y="255.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (8 samples, 0.06%)</title><rect x="71.7915%" y="229" width="0.0555%" height="15" fill="rgb(219,149,13)" fg:x="10343" fg:w="8"/><text x="72.0415%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (6 samples, 0.04%)</title><rect x="71.8054%" y="213" width="0.0416%" height="15" fill="rgb(250,156,29)" fg:x="10345" fg:w="6"/><text x="72.0554%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (6 samples, 0.04%)</title><rect x="71.8054%" y="197" width="0.0416%" height="15" fill="rgb(216,193,19)" fg:x="10345" fg:w="6"/><text x="72.0554%" y="207.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="72.0553%" y="197" width="0.0139%" height="15" fill="rgb(216,135,14)" fg:x="10381" fg:w="2"/><text x="72.3053%" y="207.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="72.0553%" y="181" width="0.0139%" height="15" fill="rgb(241,47,5)" fg:x="10381" fg:w="2"/><text x="72.3053%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.01%)</title><rect x="72.2357%" y="181" width="0.0139%" height="15" fill="rgb(233,42,35)" fg:x="10407" fg:w="2"/><text x="72.4857%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (5 samples, 0.03%)</title><rect x="72.3676%" y="165" width="0.0347%" height="15" fill="rgb(231,13,6)" fg:x="10426" fg:w="5"/><text x="72.6176%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (5 samples, 0.03%)</title><rect x="72.3676%" y="149" width="0.0347%" height="15" fill="rgb(207,181,40)" fg:x="10426" fg:w="5"/><text x="72.6176%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (2 samples, 0.01%)</title><rect x="72.6730%" y="133" width="0.0139%" height="15" fill="rgb(254,173,49)" fg:x="10470" fg:w="2"/><text x="72.9230%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (21 samples, 0.15%)</title><rect x="73.0201%" y="85" width="0.1458%" height="15" fill="rgb(221,1,38)" fg:x="10520" fg:w="21"/><text x="73.2701%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (15 samples, 0.10%)</title><rect x="73.0617%" y="69" width="0.1041%" height="15" fill="rgb(206,124,46)" fg:x="10526" fg:w="15"/><text x="73.3117%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.06%)</title><rect x="73.1103%" y="53" width="0.0555%" height="15" fill="rgb(249,21,11)" fg:x="10533" fg:w="8"/><text x="73.3603%" y="63.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.02%)</title><rect x="73.1450%" y="37" width="0.0208%" height="15" fill="rgb(222,201,40)" fg:x="10538" fg:w="3"/><text x="73.3950%" y="47.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (32 samples, 0.22%)</title><rect x="72.9506%" y="101" width="0.2221%" height="15" fill="rgb(235,61,29)" fg:x="10510" fg:w="32"/><text x="73.2006%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (52 samples, 0.36%)</title><rect x="72.8257%" y="117" width="0.3609%" height="15" fill="rgb(219,207,3)" fg:x="10492" fg:w="52"/><text x="73.0757%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="73.1728%" y="101" width="0.0139%" height="15" fill="rgb(222,56,46)" fg:x="10542" fg:w="2"/><text x="73.4228%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (90 samples, 0.62%)</title><rect x="72.5758%" y="149" width="0.6247%" height="15" fill="rgb(239,76,54)" fg:x="10456" fg:w="90"/><text x="72.8258%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (74 samples, 0.51%)</title><rect x="72.6869%" y="133" width="0.5136%" height="15" fill="rgb(231,124,27)" fg:x="10472" fg:w="74"/><text x="72.9369%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="73.1866%" y="117" width="0.0139%" height="15" fill="rgb(249,195,6)" fg:x="10544" fg:w="2"/><text x="73.4366%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (116 samples, 0.81%)</title><rect x="72.4023%" y="165" width="0.8052%" height="15" fill="rgb(237,174,47)" fg:x="10431" fg:w="116"/><text x="72.6523%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (139 samples, 0.96%)</title><rect x="72.2496%" y="181" width="0.9648%" height="15" fill="rgb(206,201,31)" fg:x="10409" fg:w="139"/><text x="72.4996%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (167 samples, 1.16%)</title><rect x="72.0761%" y="197" width="1.1592%" height="15" fill="rgb(231,57,52)" fg:x="10384" fg:w="167"/><text x="72.3261%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="73.2144%" y="181" width="0.0208%" height="15" fill="rgb(248,177,22)" fg:x="10548" fg:w="3"/><text x="73.4644%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (203 samples, 1.41%)</title><rect x="71.8540%" y="213" width="1.4090%" height="15" fill="rgb(215,211,37)" fg:x="10352" fg:w="203"/><text x="72.1040%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="73.2352%" y="197" width="0.0278%" height="15" fill="rgb(241,128,51)" fg:x="10551" fg:w="4"/><text x="73.4852%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (208 samples, 1.44%)</title><rect x="71.8470%" y="245" width="1.4437%" height="15" fill="rgb(227,165,31)" fg:x="10351" fg:w="208"/><text x="72.0970%" y="255.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (208 samples, 1.44%)</title><rect x="71.8470%" y="229" width="1.4437%" height="15" fill="rgb(228,167,24)" fg:x="10351" fg:w="208"/><text x="72.0970%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="73.2630%" y="213" width="0.0278%" height="15" fill="rgb(228,143,12)" fg:x="10555" fg:w="4"/><text x="73.5130%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.01%)</title><rect x="73.3116%" y="197" width="0.0139%" height="15" fill="rgb(249,149,8)" fg:x="10562" fg:w="2"/><text x="73.5616%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.01%)</title><rect x="73.3116%" y="181" width="0.0139%" height="15" fill="rgb(243,35,44)" fg:x="10562" fg:w="2"/><text x="73.5616%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="73.3116%" y="165" width="0.0139%" height="15" fill="rgb(246,89,9)" fg:x="10562" fg:w="2"/><text x="73.5616%" y="175.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (5 samples, 0.03%)</title><rect x="73.3046%" y="229" width="0.0347%" height="15" fill="rgb(233,213,13)" fg:x="10561" fg:w="5"/><text x="73.5546%" y="239.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (4 samples, 0.03%)</title><rect x="73.3116%" y="213" width="0.0278%" height="15" fill="rgb(233,141,41)" fg:x="10562" fg:w="4"/><text x="73.5616%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.01%)</title><rect x="73.3255%" y="197" width="0.0139%" height="15" fill="rgb(239,167,4)" fg:x="10564" fg:w="2"/><text x="73.5755%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::update_knots_from_samples (8 samples, 0.06%)</title><rect x="73.2908%" y="245" width="0.0555%" height="15" fill="rgb(209,217,16)" fg:x="10559" fg:w="8"/><text x="73.5408%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.02%)</title><rect x="73.3602%" y="245" width="0.0208%" height="15" fill="rgb(219,88,35)" fg:x="10569" fg:w="3"/><text x="73.6102%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.02%)</title><rect x="73.3602%" y="229" width="0.0208%" height="15" fill="rgb(220,193,23)" fg:x="10569" fg:w="3"/><text x="73.6102%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (368 samples, 2.55%)</title><rect x="71.5000%" y="261" width="2.5543%" height="15" fill="rgb(230,90,52)" fg:x="10301" fg:w="368"/><text x="71.7500%" y="271.50">fe..</text></g><g><title>libsystem_platform.dylib`_platform_memset (97 samples, 0.67%)</title><rect x="73.3810%" y="245" width="0.6733%" height="15" fill="rgb(252,106,19)" fg:x="10572" fg:w="97"/><text x="73.6310%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (612 samples, 4.25%)</title><rect x="74.0543%" y="261" width="4.2479%" height="15" fill="rgb(206,74,20)" fg:x="10669" fg:w="612"/><text x="74.3043%" y="271.50">fekan..</text></g><g><title>fekan`DYLD-STUB$$cbrt (9 samples, 0.06%)</title><rect x="83.6815%" y="245" width="0.0625%" height="15" fill="rgb(230,138,44)" fg:x="12056" fg:w="9"/><text x="83.9315%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$exp (9 samples, 0.06%)</title><rect x="83.7440%" y="245" width="0.0625%" height="15" fill="rgb(235,182,43)" fg:x="12065" fg:w="9"/><text x="83.9940%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$log (11 samples, 0.08%)</title><rect x="83.8065%" y="245" width="0.0764%" height="15" fill="rgb(242,16,51)" fg:x="12074" fg:w="11"/><text x="84.0565%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$pow (14 samples, 0.10%)</title><rect x="83.8828%" y="245" width="0.0972%" height="15" fill="rgb(248,9,4)" fg:x="12085" fg:w="14"/><text x="84.1328%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$sin (6 samples, 0.04%)</title><rect x="83.9800%" y="245" width="0.0416%" height="15" fill="rgb(210,31,22)" fg:x="12099" fg:w="6"/><text x="84.2300%" y="255.50"></text></g><g><title>fekan`DYLD-STUB$$tan (13 samples, 0.09%)</title><rect x="84.0217%" y="245" width="0.0902%" height="15" fill="rgb(239,54,39)" fg:x="12105" fg:w="13"/><text x="84.2717%" y="255.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bbe4 (18 samples, 0.12%)</title><rect x="90.4144%" y="229" width="0.1249%" height="15" fill="rgb(230,99,41)" fg:x="13026" fg:w="18"/><text x="90.6644%" y="239.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bcfc (19 samples, 0.13%)</title><rect x="90.5393%" y="229" width="0.1319%" height="15" fill="rgb(253,106,12)" fg:x="13044" fg:w="19"/><text x="90.7893%" y="239.50"></text></g><g><title>libsystem_m.dylib`cbrt (43 samples, 0.30%)</title><rect x="90.6712%" y="229" width="0.2985%" height="15" fill="rgb(213,46,41)" fg:x="13063" fg:w="43"/><text x="90.9212%" y="239.50"></text></g><g><title>libsystem_m.dylib`exp (79 samples, 0.55%)</title><rect x="90.9697%" y="229" width="0.5483%" height="15" fill="rgb(215,133,35)" fg:x="13106" fg:w="79"/><text x="91.2197%" y="239.50"></text></g><g><title>libsystem_m.dylib`log (60 samples, 0.42%)</title><rect x="91.5180%" y="229" width="0.4165%" height="15" fill="rgb(213,28,5)" fg:x="13185" fg:w="60"/><text x="91.7680%" y="239.50"></text></g><g><title>libsystem_m.dylib`pow (441 samples, 3.06%)</title><rect x="91.9345%" y="229" width="3.0610%" height="15" fill="rgb(215,77,49)" fg:x="13245" fg:w="441"/><text x="92.1845%" y="239.50">lib..</text></g><g><title>libsystem_m.dylib`sin (40 samples, 0.28%)</title><rect x="94.9955%" y="229" width="0.2776%" height="15" fill="rgb(248,100,22)" fg:x="13686" fg:w="40"/><text x="95.2455%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (1,762 samples, 12.23%)</title><rect x="84.1119%" y="245" width="12.2302%" height="15" fill="rgb(208,67,9)" fg:x="12118" fg:w="1762"/><text x="84.3619%" y="255.50">fekan`fekan::kan_l..</text></g><g><title>libsystem_m.dylib`tan (154 samples, 1.07%)</title><rect x="95.2731%" y="229" width="1.0689%" height="15" fill="rgb(219,133,21)" fg:x="13726" fg:w="154"/><text x="95.5231%" y="239.50"></text></g><g><title>libsystem_m.dylib`cbrt (15 samples, 0.10%)</title><rect x="96.3421%" y="245" width="0.1041%" height="15" fill="rgb(246,46,29)" fg:x="13880" fg:w="15"/><text x="96.5921%" y="255.50"></text></g><g><title>libsystem_m.dylib`exp (3 samples, 0.02%)</title><rect x="96.4462%" y="245" width="0.0208%" height="15" fill="rgb(246,185,52)" fg:x="13895" fg:w="3"/><text x="96.6962%" y="255.50"></text></g><g><title>libsystem_m.dylib`log (2 samples, 0.01%)</title><rect x="96.4670%" y="245" width="0.0139%" height="15" fill="rgb(252,136,11)" fg:x="13898" fg:w="2"/><text x="96.7170%" y="255.50"></text></g><g><title>libsystem_m.dylib`pow (3 samples, 0.02%)</title><rect x="96.4809%" y="245" width="0.0208%" height="15" fill="rgb(219,138,53)" fg:x="13900" fg:w="3"/><text x="96.7309%" y="255.50"></text></g><g><title>libsystem_m.dylib`sin (17 samples, 0.12%)</title><rect x="96.5017%" y="245" width="0.1180%" height="15" fill="rgb(211,51,23)" fg:x="13903" fg:w="17"/><text x="96.7517%" y="255.50"></text></g><g><title>libsystem_m.dylib`tan (5 samples, 0.03%)</title><rect x="96.6197%" y="245" width="0.0347%" height="15" fill="rgb(247,221,28)" fg:x="13920" fg:w="5"/><text x="96.8697%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (3 samples, 0.02%)</title><rect x="96.6544%" y="245" width="0.0208%" height="15" fill="rgb(251,222,45)" fg:x="13925" fg:w="3"/><text x="96.9044%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.01%)</title><rect x="96.6822%" y="245" width="0.0139%" height="15" fill="rgb(217,162,53)" fg:x="13929" fg:w="2"/><text x="96.9322%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (7 samples, 0.05%)</title><rect x="97.0639%" y="229" width="0.0486%" height="15" fill="rgb(229,93,14)" fg:x="13984" fg:w="7"/><text x="97.3139%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (23 samples, 0.16%)</title><rect x="97.9871%" y="213" width="0.1596%" height="15" fill="rgb(209,67,49)" fg:x="14117" fg:w="23"/><text x="98.2371%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (216 samples, 1.50%)</title><rect x="96.6961%" y="245" width="1.4993%" height="15" fill="rgb(213,87,29)" fg:x="13931" fg:w="216"/><text x="96.9461%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (155 samples, 1.08%)</title><rect x="97.1195%" y="229" width="1.0759%" height="15" fill="rgb(205,151,52)" fg:x="13992" fg:w="155"/><text x="97.3695%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.05%)</title><rect x="98.1467%" y="213" width="0.0486%" height="15" fill="rgb(253,215,39)" fg:x="14140" fg:w="7"/><text x="98.3967%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (6 samples, 0.04%)</title><rect x="98.2439%" y="229" width="0.0416%" height="15" fill="rgb(221,220,41)" fg:x="14154" fg:w="6"/><text x="98.4939%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.02%)</title><rect x="98.2856%" y="229" width="0.0208%" height="15" fill="rgb(218,133,21)" fg:x="14160" fg:w="3"/><text x="98.5356%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (13 samples, 0.09%)</title><rect x="98.4452%" y="213" width="0.0902%" height="15" fill="rgb(221,193,43)" fg:x="14183" fg:w="13"/><text x="98.6952%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (4 samples, 0.03%)</title><rect x="98.6534%" y="197" width="0.0278%" height="15" fill="rgb(240,128,52)" fg:x="14213" fg:w="4"/><text x="98.9034%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (73 samples, 0.51%)</title><rect x="98.1953%" y="245" width="0.5067%" height="15" fill="rgb(253,114,12)" fg:x="14147" fg:w="73"/><text x="98.4453%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (57 samples, 0.40%)</title><rect x="98.3064%" y="229" width="0.3956%" height="15" fill="rgb(215,223,47)" fg:x="14163" fg:w="57"/><text x="98.5564%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (24 samples, 0.17%)</title><rect x="98.5354%" y="213" width="0.1666%" height="15" fill="rgb(248,225,23)" fg:x="14196" fg:w="24"/><text x="98.7854%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.02%)</title><rect x="98.6812%" y="197" width="0.0208%" height="15" fill="rgb(250,108,0)" fg:x="14217" fg:w="3"/><text x="98.9312%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.04%)</title><rect x="98.7020%" y="245" width="0.0416%" height="15" fill="rgb(228,208,7)" fg:x="14220" fg:w="6"/><text x="98.9520%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.03%)</title><rect x="98.7437%" y="245" width="0.0278%" height="15" fill="rgb(244,45,10)" fg:x="14226" fg:w="4"/><text x="98.9937%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::parameter_search (2,972 samples, 20.63%)</title><rect x="78.3022%" y="261" width="20.6289%" height="15" fill="rgb(207,125,25)" fg:x="11281" fg:w="2972"/><text x="78.5522%" y="271.50">fekan`fekan::kan_layer::edge::Ed..</text></g><g><title>libsystem_platform.dylib`_platform_memset (23 samples, 0.16%)</title><rect x="98.7714%" y="245" width="0.1596%" height="15" fill="rgb(210,195,18)" fg:x="14230" fg:w="23"/><text x="99.0214%" y="255.50"></text></g><g><title>fekan`indicatif::progress_bar::TickerControl::run (2 samples, 0.01%)</title><rect x="98.9311%" y="261" width="0.0139%" height="15" fill="rgb(249,80,12)" fg:x="14253" fg:w="2"/><text x="99.1811%" y="271.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait_timeout_while (2 samples, 0.01%)</title><rect x="98.9311%" y="245" width="0.0139%" height="15" fill="rgb(221,65,9)" fg:x="14253" fg:w="2"/><text x="99.1811%" y="255.50"></text></g><g><title>fekan`std::sys::sync::condvar::pthread::Condvar::wait_timeout (2 samples, 0.01%)</title><rect x="98.9311%" y="229" width="0.0139%" height="15" fill="rgb(235,49,36)" fg:x="14253" fg:w="2"/><text x="99.1811%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.01%)</title><rect x="98.9311%" y="213" width="0.0139%" height="15" fill="rgb(225,32,20)" fg:x="14253" fg:w="2"/><text x="99.1811%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (16 samples, 0.11%)</title><rect x="98.9450%" y="261" width="0.1111%" height="15" fill="rgb(215,141,46)" fg:x="14255" fg:w="16"/><text x="99.1950%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (11 samples, 0.08%)</title><rect x="99.0560%" y="261" width="0.0764%" height="15" fill="rgb(250,160,47)" fg:x="14271" fg:w="11"/><text x="99.3060%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (35 samples, 0.24%)</title><rect x="99.1324%" y="261" width="0.2429%" height="15" fill="rgb(216,222,40)" fg:x="14282" fg:w="35"/><text x="99.3824%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (5 samples, 0.03%)</title><rect x="99.3753%" y="261" width="0.0347%" height="15" fill="rgb(234,217,39)" fg:x="14317" fg:w="5"/><text x="99.6253%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.05%)</title><rect x="99.4170%" y="261" width="0.0486%" height="15" fill="rgb(207,178,40)" fg:x="14323" fg:w="7"/><text x="99.6670%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (12 samples, 0.08%)</title><rect x="99.4655%" y="261" width="0.0833%" height="15" fill="rgb(221,136,13)" fg:x="14330" fg:w="12"/><text x="99.7155%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (12 samples, 0.08%)</title><rect x="99.4655%" y="245" width="0.0833%" height="15" fill="rgb(249,199,10)" fg:x="14330" fg:w="12"/><text x="99.7155%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.08%)</title><rect x="99.4655%" y="229" width="0.0833%" height="15" fill="rgb(249,222,13)" fg:x="14330" fg:w="12"/><text x="99.7155%" y="239.50"></text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (9,651 samples, 66.99%)</title><rect x="32.5675%" y="277" width="66.9883%" height="15" fill="rgb(244,185,38)" fg:x="4692" fg:w="9651"/><text x="32.8175%" y="287.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_malloc.dylib`_free (23 samples, 0.16%)</title><rect x="99.5558%" y="277" width="0.1596%" height="15" fill="rgb(236,202,9)" fg:x="14343" fg:w="23"/><text x="99.8058%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (12 samples, 0.08%)</title><rect x="99.7154%" y="277" width="0.0833%" height="15" fill="rgb(250,229,37)" fg:x="14366" fg:w="12"/><text x="99.9654%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.03%)</title><rect x="99.7987%" y="277" width="0.0347%" height="15" fill="rgb(206,174,23)" fg:x="14378" fg:w="5"/><text x="100.0487%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.03%)</title><rect x="99.8473%" y="277" width="0.0347%" height="15" fill="rgb(211,33,43)" fg:x="14385" fg:w="5"/><text x="100.0973%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.01%)</title><rect x="99.8820%" y="277" width="0.0139%" height="15" fill="rgb(245,58,50)" fg:x="14390" fg:w="2"/><text x="100.1320%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.02%)</title><rect x="99.8959%" y="277" width="0.0208%" height="15" fill="rgb(244,68,36)" fg:x="14392" fg:w="3"/><text x="100.1459%" y="287.50"></text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (9,719 samples, 67.46%)</title><rect x="32.4981%" y="293" width="67.4603%" height="15" fill="rgb(232,229,15)" fg:x="4682" fg:w="9719"/><text x="32.7481%" y="303.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.04%)</title><rect x="99.9167%" y="277" width="0.0416%" height="15" fill="rgb(254,30,23)" fg:x="14395" fg:w="6"/><text x="100.1667%" y="287.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (9,722 samples, 67.48%)</title><rect x="32.4981%" y="309" width="67.4811%" height="15" fill="rgb(235,160,14)" fg:x="4682" fg:w="9722"/><text x="32.7481%" y="319.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>fekan`std::sys::pal::unix::stack_overflow::imp::make_handler (3 samples, 0.02%)</title><rect x="99.9584%" y="293" width="0.0208%" height="15" fill="rgb(212,155,44)" fg:x="14401" fg:w="3"/><text x="100.2084%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__mmap (2 samples, 0.01%)</title><rect x="99.9653%" y="277" width="0.0139%" height="15" fill="rgb(226,2,50)" fg:x="14402" fg:w="2"/><text x="100.2153%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (2 samples, 0.01%)</title><rect x="99.9792%" y="293" width="0.0139%" height="15" fill="rgb(234,177,6)" fg:x="14404" fg:w="2"/><text x="100.2292%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (2 samples, 0.01%)</title><rect x="99.9792%" y="277" width="0.0139%" height="15" fill="rgb(217,24,9)" fg:x="14404" fg:w="2"/><text x="100.2292%" y="287.50"></text></g><g><title>all (14,407 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="14407"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (9,725 samples, 67.50%)</title><rect x="32.4981%" y="341" width="67.5019%" height="15" fill="rgb(239,221,27)" fg:x="4682" fg:w="9725"/><text x="32.7481%" y="351.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (9,725 samples, 67.50%)</title><rect x="32.4981%" y="325" width="67.5019%" height="15" fill="rgb(222,198,25)" fg:x="4682" fg:w="9725"/><text x="32.7481%" y="335.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (3 samples, 0.02%)</title><rect x="99.9792%" y="309" width="0.0208%" height="15" fill="rgb(211,99,13)" fg:x="14404" fg:w="3"/><text x="100.2292%" y="319.50"></text></g></svg></svg>