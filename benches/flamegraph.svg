<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="421.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="421.00"> </text><svg id="frames" x="10" width="1180" total_samples="14019"><g><title>fekan`__rdl_alloc (2 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0143%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="287.50"></text></g><g><title>fekan`fekan::split_data (2 samples, 0.01%)</title><rect x="0.0214%" y="261" width="0.0143%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="2"/><text x="0.2714%" y="271.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (67 samples, 0.48%)</title><rect x="0.0856%" y="117" width="0.4779%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="67"/><text x="0.3356%" y="127.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.47%)</title><rect x="0.0927%" y="101" width="0.4708%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="66"/><text x="0.3427%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (66 samples, 0.47%)</title><rect x="0.0927%" y="85" width="0.4708%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="66"/><text x="0.3427%" y="95.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.5635%" y="101" width="0.0143%" height="15" fill="rgb(232,128,0)" fg:x="79" fg:w="2"/><text x="0.8135%" y="111.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.03%)</title><rect x="0.6277%" y="69" width="0.0285%" height="15" fill="rgb(207,160,47)" fg:x="88" fg:w="4"/><text x="0.8777%" y="79.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,473 samples, 10.51%)</title><rect x="0.0856%" y="133" width="10.5072%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="1473"/><text x="0.3356%" y="143.50">fekan`&lt;core::ma..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,406 samples, 10.03%)</title><rect x="0.5635%" y="117" width="10.0292%" height="15" fill="rgb(218,30,26)" fg:x="79" fg:w="1406"/><text x="0.8135%" y="127.50">fekan`serde_js..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,404 samples, 10.01%)</title><rect x="0.5778%" y="101" width="10.0150%" height="15" fill="rgb(220,122,19)" fg:x="81" fg:w="1404"/><text x="0.8278%" y="111.50">fekan`serde_js..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,400 samples, 9.99%)</title><rect x="0.6063%" y="85" width="9.9864%" height="15" fill="rgb(250,228,42)" fg:x="85" fg:w="1400"/><text x="0.8563%" y="95.50">fekan`&lt;std::io..</text></g><g><title>libsystem_kernel.dylib`read (1,393 samples, 9.94%)</title><rect x="0.6563%" y="69" width="9.9365%" height="15" fill="rgb(240,193,28)" fg:x="92" fg:w="1393"/><text x="0.9063%" y="79.50">libsystem_kern..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,614 samples, 11.51%)</title><rect x="0.0571%" y="165" width="11.5129%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1614"/><text x="0.3071%" y="175.50">fekan`&lt;serde::de:..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,614 samples, 11.51%)</title><rect x="0.0571%" y="149" width="11.5129%" height="15" fill="rgb(206,188,39)" fg:x="8" fg:w="1614"/><text x="0.3071%" y="159.50">fekan`&lt;serde_json..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 0.98%)</title><rect x="10.5928%" y="133" width="0.9772%" height="15" fill="rgb(217,207,13)" fg:x="1485" fg:w="137"/><text x="10.8428%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (136 samples, 0.97%)</title><rect x="10.5999%" y="117" width="0.9701%" height="15" fill="rgb(231,73,38)" fg:x="1486" fg:w="136"/><text x="10.8499%" y="127.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,706 samples, 12.17%)</title><rect x="0.0571%" y="181" width="12.1692%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1706"/><text x="0.3071%" y="191.50">fekan`&lt;&amp;mut serde_..</text></g><g><title>libsystem_kernel.dylib`read (91 samples, 0.65%)</title><rect x="11.5771%" y="165" width="0.6491%" height="15" fill="rgb(210,31,41)" fg:x="1623" fg:w="91"/><text x="11.8271%" y="175.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 0.57%)</title><rect x="12.2405%" y="165" width="0.5707%" height="15" fill="rgb(221,200,47)" fg:x="1716" fg:w="80"/><text x="12.4905%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (78 samples, 0.56%)</title><rect x="12.2548%" y="149" width="0.5564%" height="15" fill="rgb(226,26,5)" fg:x="1718" fg:w="78"/><text x="12.5048%" y="159.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (52 samples, 0.37%)</title><rect x="12.8112%" y="165" width="0.3709%" height="15" fill="rgb(249,33,26)" fg:x="1796" fg:w="52"/><text x="13.0612%" y="175.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 0.37%)</title><rect x="12.8112%" y="149" width="0.3709%" height="15" fill="rgb(235,183,28)" fg:x="1796" fg:w="52"/><text x="13.0612%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (52 samples, 0.37%)</title><rect x="12.8112%" y="133" width="0.3709%" height="15" fill="rgb(221,5,38)" fg:x="1796" fg:w="52"/><text x="13.0612%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="13.1821%" y="149" width="0.0143%" height="15" fill="rgb(247,18,42)" fg:x="1848" fg:w="2"/><text x="13.4321%" y="159.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (5 samples, 0.04%)</title><rect x="13.2178%" y="117" width="0.0357%" height="15" fill="rgb(241,131,45)" fg:x="1853" fg:w="5"/><text x="13.4678%" y="127.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (798 samples, 5.69%)</title><rect x="12.2263%" y="181" width="5.6923%" height="15" fill="rgb(249,31,29)" fg:x="1714" fg:w="798"/><text x="12.4763%" y="191.50">fekan`&lt;..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (664 samples, 4.74%)</title><rect x="13.1821%" y="165" width="4.7364%" height="15" fill="rgb(225,111,53)" fg:x="1848" fg:w="664"/><text x="13.4321%" y="175.50">fekan`..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (662 samples, 4.72%)</title><rect x="13.1964%" y="149" width="4.7222%" height="15" fill="rgb(238,160,17)" fg:x="1850" fg:w="662"/><text x="13.4464%" y="159.50">fekan`..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (661 samples, 4.72%)</title><rect x="13.2035%" y="133" width="4.7150%" height="15" fill="rgb(214,148,48)" fg:x="1851" fg:w="661"/><text x="13.4535%" y="143.50">fekan..</text></g><g><title>libsystem_kernel.dylib`read (653 samples, 4.66%)</title><rect x="13.2606%" y="117" width="4.6580%" height="15" fill="rgb(232,36,49)" fg:x="1859" fg:w="653"/><text x="13.5106%" y="127.50">libsy..</text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (2 samples, 0.01%)</title><rect x="17.9613%" y="149" width="0.0143%" height="15" fill="rgb(209,103,24)" fg:x="2518" fg:w="2"/><text x="18.2113%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (612 samples, 4.37%)</title><rect x="17.9471%" y="165" width="4.3655%" height="15" fill="rgb(229,88,8)" fg:x="2516" fg:w="612"/><text x="18.1971%" y="175.50">fekan..</text></g><g><title>libsystem_kernel.dylib`read (607 samples, 4.33%)</title><rect x="17.9827%" y="149" width="4.3298%" height="15" fill="rgb(213,181,19)" fg:x="2521" fg:w="607"/><text x="18.2327%" y="159.50">libsy..</text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (617 samples, 4.40%)</title><rect x="17.9185%" y="181" width="4.4012%" height="15" fill="rgb(254,191,54)" fg:x="2512" fg:w="617"/><text x="18.1685%" y="191.50">fekan..</text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="22.3197%" y="165" width="0.0214%" height="15" fill="rgb(241,83,37)" fg:x="3129" fg:w="3"/><text x="22.5697%" y="175.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (165 samples, 1.18%)</title><rect x="22.3197%" y="181" width="1.1770%" height="15" fill="rgb(233,36,39)" fg:x="3129" fg:w="165"/><text x="22.5697%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (162 samples, 1.16%)</title><rect x="22.3411%" y="165" width="1.1556%" height="15" fill="rgb(226,3,54)" fg:x="3132" fg:w="162"/><text x="22.5911%" y="175.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,364 samples, 24.00%)</title><rect x="0.0571%" y="197" width="23.9960%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="3364"/><text x="0.3071%" y="207.50">fekan`&lt;&amp;mut serde_json::de::Deserializ..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (78 samples, 0.56%)</title><rect x="23.4967%" y="181" width="0.5564%" height="15" fill="rgb(238,167,29)" fg:x="3294" fg:w="78"/><text x="23.7467%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (76 samples, 0.54%)</title><rect x="23.5109%" y="165" width="0.5421%" height="15" fill="rgb(232,182,51)" fg:x="3296" fg:w="76"/><text x="23.7609%" y="175.50"></text></g><g><title>fekan`fekan::load_regression_data (3,502 samples, 24.98%)</title><rect x="0.0214%" y="277" width="24.9804%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="3502"/><text x="0.2714%" y="287.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`serde_json::de::from_trait (3,500 samples, 24.97%)</title><rect x="0.0357%" y="261" width="24.9661%" height="15" fill="rgb(208,69,12)" fg:x="5" fg:w="3500"/><text x="0.2857%" y="271.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,500 samples, 24.97%)</title><rect x="0.0357%" y="245" width="24.9661%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="3500"/><text x="0.2857%" y="255.50">fekan`&lt;&amp;mut serde_json::de::Deserializer..</text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,500 samples, 24.97%)</title><rect x="0.0357%" y="229" width="24.9661%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="3500"/><text x="0.2857%" y="239.50">fekan`&lt;serde::de::impls::&lt;impl serde::de..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,499 samples, 24.96%)</title><rect x="0.0428%" y="213" width="24.9590%" height="15" fill="rgb(222,207,29)" fg:x="6" fg:w="3499"/><text x="0.2928%" y="223.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as s..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (133 samples, 0.95%)</title><rect x="24.0531%" y="197" width="0.9487%" height="15" fill="rgb(206,96,30)" fg:x="3372" fg:w="133"/><text x="24.3031%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`read (133 samples, 0.95%)</title><rect x="24.0531%" y="181" width="0.9487%" height="15" fill="rgb(218,138,4)" fg:x="3372" fg:w="133"/><text x="24.3031%" y="191.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.09%)</title><rect x="25.0588%" y="229" width="0.0927%" height="15" fill="rgb(250,191,14)" fg:x="3513" fg:w="13"/><text x="25.3088%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.04%)</title><rect x="25.1159%" y="213" width="0.0357%" height="15" fill="rgb(239,60,40)" fg:x="3521" fg:w="5"/><text x="25.3659%" y="223.50"></text></g><g><title>fekan`__rdl_alloc (2 samples, 0.01%)</title><rect x="25.1587%" y="229" width="0.0143%" height="15" fill="rgb(206,27,48)" fg:x="3527" fg:w="2"/><text x="25.4087%" y="239.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new (3 samples, 0.02%)</title><rect x="25.1801%" y="229" width="0.0214%" height="15" fill="rgb(225,35,8)" fg:x="3530" fg:w="3"/><text x="25.4301%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (3 samples, 0.02%)</title><rect x="25.1801%" y="213" width="0.0214%" height="15" fill="rgb(250,213,24)" fg:x="3530" fg:w="3"/><text x="25.4301%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="25.2015%" y="229" width="0.0214%" height="15" fill="rgb(247,123,22)" fg:x="3533" fg:w="3"/><text x="25.4515%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (13 samples, 0.09%)</title><rect x="25.2229%" y="229" width="0.0927%" height="15" fill="rgb(231,138,38)" fg:x="3536" fg:w="13"/><text x="25.4729%" y="239.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (267 samples, 1.90%)</title><rect x="25.0588%" y="261" width="1.9046%" height="15" fill="rgb(231,145,46)" fg:x="3513" fg:w="267"/><text x="25.3088%" y="271.50">f..</text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (267 samples, 1.90%)</title><rect x="25.0588%" y="245" width="1.9046%" height="15" fill="rgb(251,118,11)" fg:x="3513" fg:w="267"/><text x="25.3088%" y="255.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (231 samples, 1.65%)</title><rect x="25.3156%" y="229" width="1.6478%" height="15" fill="rgb(217,147,25)" fg:x="3549" fg:w="231"/><text x="25.5656%" y="239.50"></text></g><g><title>fekan`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (7 samples, 0.05%)</title><rect x="26.9634%" y="261" width="0.0499%" height="15" fill="rgb(247,81,37)" fg:x="3780" fg:w="7"/><text x="27.2134%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (73 samples, 0.52%)</title><rect x="27.0133%" y="197" width="0.5207%" height="15" fill="rgb(209,12,38)" fg:x="3787" fg:w="73"/><text x="27.2633%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (80 samples, 0.57%)</title><rect x="27.0133%" y="213" width="0.5707%" height="15" fill="rgb(227,1,9)" fg:x="3787" fg:w="80"/><text x="27.2633%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (7 samples, 0.05%)</title><rect x="27.5341%" y="197" width="0.0499%" height="15" fill="rgb(248,47,43)" fg:x="3860" fg:w="7"/><text x="27.7841%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (7 samples, 0.05%)</title><rect x="27.5341%" y="181" width="0.0499%" height="15" fill="rgb(221,10,30)" fg:x="3860" fg:w="7"/><text x="27.7841%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (7 samples, 0.05%)</title><rect x="27.5341%" y="165" width="0.0499%" height="15" fill="rgb(210,229,1)" fg:x="3860" fg:w="7"/><text x="27.7841%" y="175.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::spline::Spline&gt; (82 samples, 0.58%)</title><rect x="27.0133%" y="229" width="0.5849%" height="15" fill="rgb(222,148,37)" fg:x="3787" fg:w="82"/><text x="27.2633%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.01%)</title><rect x="27.5840%" y="213" width="0.0143%" height="15" fill="rgb(234,67,33)" fg:x="3867" fg:w="2"/><text x="27.8340%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="27.5840%" y="197" width="0.0143%" height="15" fill="rgb(247,98,35)" fg:x="3867" fg:w="2"/><text x="27.8340%" y="207.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (85 samples, 0.61%)</title><rect x="27.0133%" y="245" width="0.6063%" height="15" fill="rgb(247,138,52)" fg:x="3787" fg:w="85"/><text x="27.2633%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="27.5983%" y="229" width="0.0214%" height="15" fill="rgb(213,79,30)" fg:x="3869" fg:w="3"/><text x="27.8483%" y="239.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (93 samples, 0.66%)</title><rect x="27.0133%" y="261" width="0.6634%" height="15" fill="rgb(246,177,23)" fg:x="3787" fg:w="93"/><text x="27.2633%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (6 samples, 0.04%)</title><rect x="27.6339%" y="245" width="0.0428%" height="15" fill="rgb(230,62,27)" fg:x="3874" fg:w="6"/><text x="27.8839%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.04%)</title><rect x="27.6339%" y="229" width="0.0428%" height="15" fill="rgb(216,154,8)" fg:x="3874" fg:w="6"/><text x="27.8839%" y="239.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (431 samples, 3.07%)</title><rect x="27.6767%" y="245" width="3.0744%" height="15" fill="rgb(244,35,45)" fg:x="3880" fg:w="431"/><text x="27.9267%" y="255.50">fek..</text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (431 samples, 3.07%)</title><rect x="27.6767%" y="229" width="3.0744%" height="15" fill="rgb(251,115,12)" fg:x="3880" fg:w="431"/><text x="27.9267%" y="239.50">fek..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (431 samples, 3.07%)</title><rect x="27.6767%" y="213" width="3.0744%" height="15" fill="rgb(240,54,50)" fg:x="3880" fg:w="431"/><text x="27.9267%" y="223.50">lib..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.32%)</title><rect x="30.7511%" y="229" width="0.3210%" height="15" fill="rgb(233,84,52)" fg:x="4311" fg:w="45"/><text x="31.0011%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (45 samples, 0.32%)</title><rect x="30.7511%" y="213" width="0.3210%" height="15" fill="rgb(207,117,47)" fg:x="4311" fg:w="45"/><text x="31.0011%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (45 samples, 0.32%)</title><rect x="30.7511%" y="197" width="0.3210%" height="15" fill="rgb(249,43,39)" fg:x="4311" fg:w="45"/><text x="31.0011%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::merge_layers (46 samples, 0.33%)</title><rect x="30.7511%" y="245" width="0.3281%" height="15" fill="rgb(209,38,44)" fg:x="4311" fg:w="46"/><text x="31.0011%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.10%)</title><rect x="31.0792%" y="229" width="0.0999%" height="15" fill="rgb(236,212,23)" fg:x="4357" fg:w="14"/><text x="31.3292%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (19 samples, 0.14%)</title><rect x="31.0792%" y="245" width="0.1355%" height="15" fill="rgb(242,79,21)" fg:x="4357" fg:w="19"/><text x="31.3292%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.04%)</title><rect x="31.1791%" y="229" width="0.0357%" height="15" fill="rgb(211,96,35)" fg:x="4371" fg:w="5"/><text x="31.4291%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (5 samples, 0.04%)</title><rect x="31.1791%" y="213" width="0.0357%" height="15" fill="rgb(253,215,40)" fg:x="4371" fg:w="5"/><text x="31.4291%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.04%)</title><rect x="31.1791%" y="197" width="0.0357%" height="15" fill="rgb(211,81,21)" fg:x="4371" fg:w="5"/><text x="31.4291%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::merge_models (848 samples, 6.05%)</title><rect x="27.6767%" y="261" width="6.0489%" height="15" fill="rgb(208,190,38)" fg:x="3880" fg:w="848"/><text x="27.9267%" y="271.50">fekan`fe..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (352 samples, 2.51%)</title><rect x="31.2148%" y="245" width="2.5109%" height="15" fill="rgb(235,213,38)" fg:x="4376" fg:w="352"/><text x="31.4648%" y="255.50">li..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (63 samples, 0.45%)</title><rect x="35.1452%" y="181" width="0.4494%" height="15" fill="rgb(237,122,38)" fg:x="4927" fg:w="63"/><text x="35.3952%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (39 samples, 0.28%)</title><rect x="35.3164%" y="165" width="0.2782%" height="15" fill="rgb(244,218,35)" fg:x="4951" fg:w="39"/><text x="35.5664%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (42 samples, 0.30%)</title><rect x="35.5946%" y="181" width="0.2996%" height="15" fill="rgb(240,68,47)" fg:x="4990" fg:w="42"/><text x="35.8446%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (258 samples, 1.84%)</title><rect x="34.3462%" y="197" width="1.8404%" height="15" fill="rgb(210,16,53)" fg:x="4815" fg:w="258"/><text x="34.5962%" y="207.50">f..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (41 samples, 0.29%)</title><rect x="35.8941%" y="181" width="0.2925%" height="15" fill="rgb(235,124,12)" fg:x="5032" fg:w="41"/><text x="36.1441%" y="191.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.03%)</title><rect x="36.1581%" y="165" width="0.0285%" height="15" fill="rgb(224,169,11)" fg:x="5069" fg:w="4"/><text x="36.4081%" y="175.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (53 samples, 0.38%)</title><rect x="36.6146%" y="181" width="0.3781%" height="15" fill="rgb(250,166,2)" fg:x="5133" fg:w="53"/><text x="36.8646%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.01%)</title><rect x="36.9784%" y="165" width="0.0143%" height="15" fill="rgb(242,216,29)" fg:x="5184" fg:w="2"/><text x="37.2284%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="36.9784%" y="149" width="0.0143%" height="15" fill="rgb(230,116,27)" fg:x="5184" fg:w="2"/><text x="37.2284%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (427 samples, 3.05%)</title><rect x="33.9611%" y="213" width="3.0459%" height="15" fill="rgb(228,99,48)" fg:x="4761" fg:w="427"/><text x="34.2111%" y="223.50">fek..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (115 samples, 0.82%)</title><rect x="36.1866%" y="197" width="0.8203%" height="15" fill="rgb(253,11,6)" fg:x="5073" fg:w="115"/><text x="36.4366%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.01%)</title><rect x="36.9927%" y="181" width="0.0143%" height="15" fill="rgb(247,143,39)" fg:x="5186" fg:w="2"/><text x="37.2427%" y="191.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9 samples, 0.06%)</title><rect x="37.0069%" y="213" width="0.0642%" height="15" fill="rgb(236,97,10)" fg:x="5188" fg:w="9"/><text x="37.2569%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (464 samples, 3.31%)</title><rect x="33.7685%" y="229" width="3.3098%" height="15" fill="rgb(233,208,19)" fg:x="4734" fg:w="464"/><text x="34.0185%" y="239.50">fek..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (12 samples, 0.09%)</title><rect x="37.0783%" y="229" width="0.0856%" height="15" fill="rgb(216,164,2)" fg:x="5198" fg:w="12"/><text x="37.3283%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (486 samples, 3.47%)</title><rect x="33.7257%" y="245" width="3.4667%" height="15" fill="rgb(220,129,5)" fg:x="4728" fg:w="486"/><text x="33.9757%" y="255.50">fek..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="37.1781%" y="229" width="0.0143%" height="15" fill="rgb(242,17,10)" fg:x="5212" fg:w="2"/><text x="37.4281%" y="239.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (2 samples, 0.01%)</title><rect x="37.3208%" y="69" width="0.0143%" height="15" fill="rgb(242,107,0)" fg:x="5232" fg:w="2"/><text x="37.5708%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.06%)</title><rect x="37.2994%" y="101" width="0.0571%" height="15" fill="rgb(251,28,31)" fg:x="5229" fg:w="8"/><text x="37.5494%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (6 samples, 0.04%)</title><rect x="37.3136%" y="85" width="0.0428%" height="15" fill="rgb(233,223,10)" fg:x="5231" fg:w="6"/><text x="37.5636%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.02%)</title><rect x="37.3350%" y="69" width="0.0214%" height="15" fill="rgb(215,21,27)" fg:x="5234" fg:w="3"/><text x="37.5850%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.01%)</title><rect x="37.3422%" y="53" width="0.0143%" height="15" fill="rgb(232,23,21)" fg:x="5235" fg:w="2"/><text x="37.5922%" y="63.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.01%)</title><rect x="37.3422%" y="37" width="0.0143%" height="15" fill="rgb(244,5,23)" fg:x="5235" fg:w="2"/><text x="37.5922%" y="47.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (24 samples, 0.17%)</title><rect x="37.1924%" y="245" width="0.1712%" height="15" fill="rgb(226,81,46)" fg:x="5214" fg:w="24"/><text x="37.4424%" y="255.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (20 samples, 0.14%)</title><rect x="37.2209%" y="229" width="0.1427%" height="15" fill="rgb(247,70,30)" fg:x="5218" fg:w="20"/><text x="37.4709%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (20 samples, 0.14%)</title><rect x="37.2209%" y="213" width="0.1427%" height="15" fill="rgb(212,68,19)" fg:x="5218" fg:w="20"/><text x="37.4709%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (20 samples, 0.14%)</title><rect x="37.2209%" y="197" width="0.1427%" height="15" fill="rgb(240,187,13)" fg:x="5218" fg:w="20"/><text x="37.4709%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (17 samples, 0.12%)</title><rect x="37.2423%" y="181" width="0.1213%" height="15" fill="rgb(223,113,26)" fg:x="5221" fg:w="17"/><text x="37.4923%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (16 samples, 0.11%)</title><rect x="37.2494%" y="165" width="0.1141%" height="15" fill="rgb(206,192,2)" fg:x="5222" fg:w="16"/><text x="37.4994%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (15 samples, 0.11%)</title><rect x="37.2566%" y="149" width="0.1070%" height="15" fill="rgb(241,108,4)" fg:x="5223" fg:w="15"/><text x="37.5066%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (12 samples, 0.09%)</title><rect x="37.2780%" y="133" width="0.0856%" height="15" fill="rgb(247,173,49)" fg:x="5226" fg:w="12"/><text x="37.5280%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (11 samples, 0.08%)</title><rect x="37.2851%" y="117" width="0.0785%" height="15" fill="rgb(224,114,35)" fg:x="5227" fg:w="11"/><text x="37.5351%" y="127.50"></text></g><g><title>fekan`fekan::preset_knot_ranges (512 samples, 3.65%)</title><rect x="33.7257%" y="261" width="3.6522%" height="15" fill="rgb(245,159,27)" fg:x="4728" fg:w="512"/><text x="33.9757%" y="271.50">feka..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="37.3636%" y="245" width="0.0143%" height="15" fill="rgb(245,172,44)" fg:x="5238" fg:w="2"/><text x="37.6136%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (401 samples, 2.86%)</title><rect x="37.5348%" y="213" width="2.8604%" height="15" fill="rgb(236,23,11)" fg:x="5262" fg:w="401"/><text x="37.7848%" y="223.50">fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (362 samples, 2.58%)</title><rect x="37.8130%" y="197" width="2.5822%" height="15" fill="rgb(205,117,38)" fg:x="5301" fg:w="362"/><text x="38.0630%" y="207.50">fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (256 samples, 1.83%)</title><rect x="38.5691%" y="181" width="1.8261%" height="15" fill="rgb(237,72,25)" fg:x="5407" fg:w="256"/><text x="38.8191%" y="191.50">f..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (85 samples, 0.61%)</title><rect x="39.7889%" y="165" width="0.6063%" height="15" fill="rgb(244,70,9)" fg:x="5578" fg:w="85"/><text x="40.0389%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (420 samples, 3.00%)</title><rect x="37.4064%" y="229" width="2.9959%" height="15" fill="rgb(217,125,39)" fg:x="5244" fg:w="420"/><text x="37.6564%" y="239.50">fek..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (22 samples, 0.16%)</title><rect x="40.4023%" y="229" width="0.1569%" height="15" fill="rgb(235,36,10)" fg:x="5664" fg:w="22"/><text x="40.6523%" y="239.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (448 samples, 3.20%)</title><rect x="37.3850%" y="245" width="3.1957%" height="15" fill="rgb(251,123,47)" fg:x="5241" fg:w="448"/><text x="37.6350%" y="255.50">fek..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="40.5592%" y="229" width="0.0214%" height="15" fill="rgb(221,13,13)" fg:x="5686" fg:w="3"/><text x="40.8092%" y="239.50"></text></g><g><title>fekan`fekan::validate_model (450 samples, 3.21%)</title><rect x="37.3778%" y="261" width="3.2099%" height="15" fill="rgb(238,131,9)" fg:x="5240" fg:w="450"/><text x="37.6278%" y="271.50">fek..</text></g><g><title>fekan`rand::rng::Rng::gen_range (6 samples, 0.04%)</title><rect x="40.5878%" y="261" width="0.0428%" height="15" fill="rgb(211,50,8)" fg:x="5690" fg:w="6"/><text x="40.8378%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.03%)</title><rect x="40.6377%" y="261" width="0.0285%" height="15" fill="rgb(245,182,24)" fg:x="5697" fg:w="4"/><text x="40.8877%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.01%)</title><rect x="40.6662%" y="261" width="0.0143%" height="15" fill="rgb(242,14,37)" fg:x="5701" fg:w="2"/><text x="40.9162%" y="271.50"></text></g><g><title>fekan`fekan::train_model (2,199 samples, 15.69%)</title><rect x="25.0018%" y="277" width="15.6859%" height="15" fill="rgb(246,228,12)" fg:x="3505" fg:w="2199"/><text x="25.2518%" y="287.50">fekan`fekan::train_model</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="40.6948%" y="277" width="0.0143%" height="15" fill="rgb(213,55,15)" fg:x="5705" fg:w="2"/><text x="40.9448%" y="287.50"></text></g><g><title>fekan`main (5,709 samples, 40.72%)</title><rect x="0.0000%" y="357" width="40.7233%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="5709"/><text x="0.2500%" y="367.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (5,709 samples, 40.72%)</title><rect x="0.0000%" y="341" width="40.7233%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="5709"/><text x="0.2500%" y="351.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (5,709 samples, 40.72%)</title><rect x="0.0000%" y="325" width="40.7233%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="5709"/><text x="0.2500%" y="335.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (5,709 samples, 40.72%)</title><rect x="0.0000%" y="309" width="40.7233%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="5709"/><text x="0.2500%" y="319.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (5,709 samples, 40.72%)</title><rect x="0.0000%" y="293" width="40.7233%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="5709"/><text x="0.2500%" y="303.50">fekan`fekan::main</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="40.7090%" y="277" width="0.0143%" height="15" fill="rgb(215,41,42)" fg:x="5707" fg:w="2"/><text x="40.9590%" y="287.50"></text></g><g><title>dyld`start (5,710 samples, 40.73%)</title><rect x="0.0000%" y="373" width="40.7304%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="5710"/><text x="0.2500%" y="383.50">dyld`start</text></g><g><title>libsystem_kernel.dylib`__exit (3 samples, 0.02%)</title><rect x="40.7304%" y="373" width="0.0214%" height="15" fill="rgb(240,125,3)" fg:x="5710" fg:w="3"/><text x="40.9804%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (6 samples, 0.04%)</title><rect x="40.7518%" y="373" width="0.0428%" height="15" fill="rgb(205,98,50)" fg:x="5713" fg:w="6"/><text x="41.0018%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.12%)</title><rect x="40.7946%" y="373" width="0.1213%" height="15" fill="rgb(205,185,37)" fg:x="5719" fg:w="17"/><text x="41.0446%" y="383.50"></text></g><g><title>fekan`DYLD-STUB$$free (2 samples, 0.01%)</title><rect x="40.9230%" y="309" width="0.0143%" height="15" fill="rgb(238,207,15)" fg:x="5737" fg:w="2"/><text x="41.1730%" y="319.50"></text></g><g><title>fekan`DYLD-STUB$$free (3 samples, 0.02%)</title><rect x="41.0800%" y="293" width="0.0214%" height="15" fill="rgb(213,199,42)" fg:x="5759" fg:w="3"/><text x="41.3300%" y="303.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (907 samples, 6.47%)</title><rect x="41.2940%" y="261" width="6.4698%" height="15" fill="rgb(235,201,11)" fg:x="5789" fg:w="907"/><text x="41.5440%" y="271.50">fekan`fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (539 samples, 3.84%)</title><rect x="43.9190%" y="245" width="3.8448%" height="15" fill="rgb(207,46,11)" fg:x="6157" fg:w="539"/><text x="44.1690%" y="255.50">feka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (206 samples, 1.47%)</title><rect x="47.7637%" y="261" width="1.4694%" height="15" fill="rgb(241,35,35)" fg:x="6696" fg:w="206"/><text x="48.0137%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (1,143 samples, 8.15%)</title><rect x="41.1513%" y="277" width="8.1532%" height="15" fill="rgb(243,32,47)" fg:x="5769" fg:w="1143"/><text x="41.4013%" y="287.50">fekan`fekan..</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (10 samples, 0.07%)</title><rect x="49.2332%" y="261" width="0.0713%" height="15" fill="rgb(247,202,23)" fg:x="6902" fg:w="10"/><text x="49.4832%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (11 samples, 0.08%)</title><rect x="49.3045%" y="277" width="0.0785%" height="15" fill="rgb(219,102,11)" fg:x="6912" fg:w="11"/><text x="49.5545%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (3 samples, 0.02%)</title><rect x="49.3830%" y="277" width="0.0214%" height="15" fill="rgb(243,110,44)" fg:x="6923" fg:w="3"/><text x="49.6330%" y="287.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (1,172 samples, 8.36%)</title><rect x="41.1085%" y="293" width="8.3601%" height="15" fill="rgb(222,74,54)" fg:x="5763" fg:w="1172"/><text x="41.3585%" y="303.50">fekan`fekan:..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.06%)</title><rect x="49.4044%" y="277" width="0.0642%" height="15" fill="rgb(216,99,12)" fg:x="6926" fg:w="9"/><text x="49.6544%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (41 samples, 0.29%)</title><rect x="49.4971%" y="277" width="0.2925%" height="15" fill="rgb(226,22,26)" fg:x="6939" fg:w="41"/><text x="49.7471%" y="287.50"></text></g><g><title>fekan`fekan::kan::Kan::clear_samples (69 samples, 0.49%)</title><rect x="49.4686%" y="293" width="0.4922%" height="15" fill="rgb(217,163,10)" fg:x="6935" fg:w="69"/><text x="49.7186%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (24 samples, 0.17%)</title><rect x="49.7896%" y="277" width="0.1712%" height="15" fill="rgb(213,25,53)" fg:x="6980" fg:w="24"/><text x="50.0396%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (24 samples, 0.17%)</title><rect x="49.7896%" y="261" width="0.1712%" height="15" fill="rgb(252,105,26)" fg:x="6980" fg:w="24"/><text x="50.0396%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.17%)</title><rect x="49.7896%" y="245" width="0.1712%" height="15" fill="rgb(220,39,43)" fg:x="6980" fg:w="24"/><text x="50.0396%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (11 samples, 0.08%)</title><rect x="50.6456%" y="181" width="0.0785%" height="15" fill="rgb(229,68,48)" fg:x="7100" fg:w="11"/><text x="50.8956%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (11 samples, 0.08%)</title><rect x="50.6456%" y="165" width="0.0785%" height="15" fill="rgb(252,8,32)" fg:x="7100" fg:w="11"/><text x="50.8956%" y="175.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12 samples, 0.09%)</title><rect x="50.6456%" y="261" width="0.0856%" height="15" fill="rgb(223,20,43)" fg:x="7100" fg:w="12"/><text x="50.8956%" y="271.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (12 samples, 0.09%)</title><rect x="50.6456%" y="245" width="0.0856%" height="15" fill="rgb(229,81,49)" fg:x="7100" fg:w="12"/><text x="50.8956%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (12 samples, 0.09%)</title><rect x="50.6456%" y="229" width="0.0856%" height="15" fill="rgb(236,28,36)" fg:x="7100" fg:w="12"/><text x="50.8956%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (12 samples, 0.09%)</title><rect x="50.6456%" y="213" width="0.0856%" height="15" fill="rgb(249,185,26)" fg:x="7100" fg:w="12"/><text x="50.8956%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.09%)</title><rect x="50.6456%" y="197" width="0.0856%" height="15" fill="rgb(249,174,33)" fg:x="7100" fg:w="12"/><text x="50.8956%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (842 samples, 6.01%)</title><rect x="66.0532%" y="229" width="6.0061%" height="15" fill="rgb(233,201,37)" fg:x="9260" fg:w="842"/><text x="66.3032%" y="239.50">fekan`fe..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (520 samples, 3.71%)</title><rect x="68.3501%" y="213" width="3.7093%" height="15" fill="rgb(221,78,26)" fg:x="9582" fg:w="520"/><text x="68.6001%" y="223.50">feka..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_no_cache (297 samples, 2.12%)</title><rect x="72.0593%" y="229" width="2.1186%" height="15" fill="rgb(250,127,30)" fg:x="10102" fg:w="297"/><text x="72.3093%" y="239.50">f..</text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.02%)</title><rect x="84.3284%" y="197" width="0.0214%" height="15" fill="rgb(230,49,44)" fg:x="11822" fg:w="3"/><text x="84.5784%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="84.3284%" y="181" width="0.0214%" height="15" fill="rgb(229,67,23)" fg:x="11822" fg:w="3"/><text x="84.5784%" y="191.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.07%)</title><rect x="84.2927%" y="213" width="0.0713%" height="15" fill="rgb(249,83,47)" fg:x="11817" fg:w="10"/><text x="84.5427%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="84.3498%" y="197" width="0.0143%" height="15" fill="rgb(215,43,3)" fg:x="11825" fg:w="2"/><text x="84.5998%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.01%)</title><rect x="84.3498%" y="181" width="0.0143%" height="15" fill="rgb(238,154,13)" fg:x="11825" fg:w="2"/><text x="84.5998%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.01%)</title><rect x="84.3498%" y="165" width="0.0143%" height="15" fill="rgb(219,56,2)" fg:x="11825" fg:w="2"/><text x="84.5998%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (3,829 samples, 27.31%)</title><rect x="57.0654%" y="245" width="27.3129%" height="15" fill="rgb(233,0,4)" fg:x="8000" fg:w="3829"/><text x="57.3154%" y="255.50">fekan`fekan::kan_layer::spline::basis_cached</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,430 samples, 10.20%)</title><rect x="74.1779%" y="229" width="10.2004%" height="15" fill="rgb(235,30,7)" fg:x="10399" fg:w="1430"/><text x="74.4279%" y="239.50">fekan`hashbrown..</text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (6,145 samples, 43.83%)</title><rect x="50.7312%" y="261" width="43.8334%" height="15" fill="rgb(250,79,13)" fg:x="7112" fg:w="6145"/><text x="50.9812%" y="271.50">fekan`fekan::kan_layer::spline::basis_cached</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,428 samples, 10.19%)</title><rect x="84.3783%" y="245" width="10.1862%" height="15" fill="rgb(211,146,34)" fg:x="11829" fg:w="1428"/><text x="84.6283%" y="255.50">fekan`hashbrown..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.01%)</title><rect x="94.5503%" y="229" width="0.0143%" height="15" fill="rgb(228,22,38)" fg:x="13255" fg:w="2"/><text x="94.8003%" y="239.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (80 samples, 0.57%)</title><rect x="94.5645%" y="261" width="0.5707%" height="15" fill="rgb(235,168,5)" fg:x="13257" fg:w="80"/><text x="94.8145%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (6,319 samples, 45.07%)</title><rect x="50.1320%" y="277" width="45.0745%" height="15" fill="rgb(221,155,16)" fg:x="7028" fg:w="6319"/><text x="50.3820%" y="287.50">fekan`fekan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (10 samples, 0.07%)</title><rect x="95.1352%" y="261" width="0.0713%" height="15" fill="rgb(215,215,53)" fg:x="13337" fg:w="10"/><text x="95.3852%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::spline::basis_cached (66 samples, 0.47%)</title><rect x="95.2065%" y="277" width="0.4708%" height="15" fill="rgb(223,4,10)" fg:x="13347" fg:w="66"/><text x="95.4565%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_calloc (5 samples, 0.04%)</title><rect x="95.6773%" y="277" width="0.0357%" height="15" fill="rgb(234,103,6)" fg:x="13413" fg:w="5"/><text x="95.9273%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (14 samples, 0.10%)</title><rect x="95.7201%" y="277" width="0.0999%" height="15" fill="rgb(227,97,0)" fg:x="13419" fg:w="14"/><text x="95.9701%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (17 samples, 0.12%)</title><rect x="95.8200%" y="277" width="0.1213%" height="15" fill="rgb(234,150,53)" fg:x="13433" fg:w="17"/><text x="96.0700%" y="287.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (6,451 samples, 46.02%)</title><rect x="49.9608%" y="293" width="46.0161%" height="15" fill="rgb(228,201,54)" fg:x="7004" fg:w="6451"/><text x="50.2108%" y="303.50">fekan`fekan::kan::Kan::forward</text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.04%)</title><rect x="95.9412%" y="277" width="0.0357%" height="15" fill="rgb(222,22,37)" fg:x="13450" fg:w="5"/><text x="96.1912%" y="287.50"></text></g><g><title>fekan`fekan::kan::Kan::update (43 samples, 0.31%)</title><rect x="95.9769%" y="293" width="0.3067%" height="15" fill="rgb(237,53,32)" fg:x="13455" fg:w="43"/><text x="96.2269%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.02%)</title><rect x="96.6973%" y="197" width="0.0214%" height="15" fill="rgb(233,25,53)" fg:x="13556" fg:w="3"/><text x="96.9473%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.01%)</title><rect x="96.7330%" y="181" width="0.0143%" height="15" fill="rgb(210,40,34)" fg:x="13561" fg:w="2"/><text x="96.9830%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 0.03%)</title><rect x="96.7259%" y="197" width="0.0285%" height="15" fill="rgb(241,220,44)" fg:x="13560" fg:w="4"/><text x="96.9759%" y="207.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (11 samples, 0.08%)</title><rect x="96.6831%" y="261" width="0.0785%" height="15" fill="rgb(235,28,35)" fg:x="13554" fg:w="11"/><text x="96.9331%" y="271.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (10 samples, 0.07%)</title><rect x="96.6902%" y="245" width="0.0713%" height="15" fill="rgb(210,56,17)" fg:x="13555" fg:w="10"/><text x="96.9402%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (9 samples, 0.06%)</title><rect x="96.6973%" y="229" width="0.0642%" height="15" fill="rgb(224,130,29)" fg:x="13556" fg:w="9"/><text x="96.9473%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (9 samples, 0.06%)</title><rect x="96.6973%" y="213" width="0.0642%" height="15" fill="rgb(235,212,8)" fg:x="13556" fg:w="9"/><text x="96.9473%" y="223.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (4 samples, 0.03%)</title><rect x="96.9827%" y="213" width="0.0285%" height="15" fill="rgb(223,33,50)" fg:x="13596" fg:w="4"/><text x="97.2327%" y="223.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (12 samples, 0.09%)</title><rect x="97.0683%" y="197" width="0.0856%" height="15" fill="rgb(219,149,13)" fg:x="13608" fg:w="12"/><text x="97.3183%" y="207.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.02%)</title><rect x="97.1325%" y="181" width="0.0214%" height="15" fill="rgb(250,156,29)" fg:x="13617" fg:w="3"/><text x="97.3825%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (11 samples, 0.08%)</title><rect x="97.2609%" y="181" width="0.0785%" height="15" fill="rgb(216,193,19)" fg:x="13635" fg:w="11"/><text x="97.5109%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (4 samples, 0.03%)</title><rect x="97.3108%" y="165" width="0.0285%" height="15" fill="rgb(216,135,14)" fg:x="13642" fg:w="4"/><text x="97.5608%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (3 samples, 0.02%)</title><rect x="97.3179%" y="149" width="0.0214%" height="15" fill="rgb(241,47,5)" fg:x="13643" fg:w="3"/><text x="97.5679%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.02%)</title><rect x="97.4178%" y="165" width="0.0214%" height="15" fill="rgb(233,42,35)" fg:x="13657" fg:w="3"/><text x="97.6678%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::pivot::median3_rec (3 samples, 0.02%)</title><rect x="97.4178%" y="149" width="0.0214%" height="15" fill="rgb(231,13,6)" fg:x="13657" fg:w="3"/><text x="97.6678%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8 samples, 0.06%)</title><rect x="97.4392%" y="165" width="0.0571%" height="15" fill="rgb(207,181,40)" fg:x="13660" fg:w="8"/><text x="97.6892%" y="175.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.01%)</title><rect x="97.4820%" y="149" width="0.0143%" height="15" fill="rgb(254,173,49)" fg:x="13666" fg:w="2"/><text x="97.7320%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (2 samples, 0.01%)</title><rect x="97.5890%" y="149" width="0.0143%" height="15" fill="rgb(221,1,38)" fg:x="13681" fg:w="2"/><text x="97.8390%" y="159.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (10 samples, 0.07%)</title><rect x="97.6889%" y="133" width="0.0713%" height="15" fill="rgb(206,124,46)" fg:x="13695" fg:w="10"/><text x="97.9389%" y="143.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (7 samples, 0.05%)</title><rect x="97.8244%" y="117" width="0.0499%" height="15" fill="rgb(249,21,11)" fg:x="13714" fg:w="7"/><text x="98.0744%" y="127.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.01%)</title><rect x="97.8600%" y="101" width="0.0143%" height="15" fill="rgb(222,201,40)" fg:x="13719" fg:w="2"/><text x="98.1100%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.01%)</title><rect x="97.8600%" y="85" width="0.0143%" height="15" fill="rgb(235,61,29)" fg:x="13719" fg:w="2"/><text x="98.1100%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (10 samples, 0.07%)</title><rect x="97.9242%" y="101" width="0.0713%" height="15" fill="rgb(219,207,3)" fg:x="13728" fg:w="10"/><text x="98.1742%" y="111.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.01%)</title><rect x="97.9813%" y="85" width="0.0143%" height="15" fill="rgb(222,56,46)" fg:x="13736" fg:w="2"/><text x="98.2313%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (11 samples, 0.08%)</title><rect x="98.0027%" y="85" width="0.0785%" height="15" fill="rgb(239,76,54)" fg:x="13739" fg:w="11"/><text x="98.2527%" y="95.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (4 samples, 0.03%)</title><rect x="98.0526%" y="69" width="0.0285%" height="15" fill="rgb(231,124,27)" fg:x="13746" fg:w="4"/><text x="98.3026%" y="79.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (4 samples, 0.03%)</title><rect x="98.0526%" y="53" width="0.0285%" height="15" fill="rgb(249,195,6)" fg:x="13746" fg:w="4"/><text x="98.3026%" y="63.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (8 samples, 0.06%)</title><rect x="98.0954%" y="69" width="0.0571%" height="15" fill="rgb(237,174,47)" fg:x="13752" fg:w="8"/><text x="98.3454%" y="79.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.02%)</title><rect x="98.1311%" y="53" width="0.0214%" height="15" fill="rgb(206,201,31)" fg:x="13757" fg:w="3"/><text x="98.3811%" y="63.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort4_stable (2 samples, 0.01%)</title><rect x="98.1382%" y="37" width="0.0143%" height="15" fill="rgb(231,57,52)" fg:x="13758" fg:w="2"/><text x="98.3882%" y="47.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::small_sort_general_with_scratch (3 samples, 0.02%)</title><rect x="98.1596%" y="53" width="0.0214%" height="15" fill="rgb(248,177,22)" fg:x="13761" fg:w="3"/><text x="98.4096%" y="63.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (46 samples, 0.33%)</title><rect x="97.8743%" y="117" width="0.3281%" height="15" fill="rgb(215,211,37)" fg:x="13721" fg:w="46"/><text x="98.1243%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (29 samples, 0.21%)</title><rect x="97.9956%" y="101" width="0.2069%" height="15" fill="rgb(241,128,51)" fg:x="13738" fg:w="29"/><text x="98.2456%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (17 samples, 0.12%)</title><rect x="98.0812%" y="85" width="0.1213%" height="15" fill="rgb(227,165,31)" fg:x="13750" fg:w="17"/><text x="98.3312%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (7 samples, 0.05%)</title><rect x="98.1525%" y="69" width="0.0499%" height="15" fill="rgb(228,167,24)" fg:x="13760" fg:w="7"/><text x="98.4025%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.02%)</title><rect x="98.1810%" y="53" width="0.0214%" height="15" fill="rgb(228,143,12)" fg:x="13764" fg:w="3"/><text x="98.4310%" y="63.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (63 samples, 0.45%)</title><rect x="97.7602%" y="133" width="0.4494%" height="15" fill="rgb(249,149,8)" fg:x="13705" fg:w="63"/><text x="98.0102%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (87 samples, 0.62%)</title><rect x="97.6033%" y="149" width="0.6206%" height="15" fill="rgb(243,35,44)" fg:x="13683" fg:w="87"/><text x="97.8533%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="98.2096%" y="133" width="0.0143%" height="15" fill="rgb(246,89,9)" fg:x="13768" fg:w="2"/><text x="98.4596%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (103 samples, 0.73%)</title><rect x="97.4963%" y="165" width="0.7347%" height="15" fill="rgb(233,213,13)" fg:x="13668" fg:w="103"/><text x="97.7463%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (173 samples, 1.23%)</title><rect x="97.0112%" y="213" width="1.2340%" height="15" fill="rgb(233,141,41)" fg:x="13600" fg:w="173"/><text x="97.2612%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (153 samples, 1.09%)</title><rect x="97.1539%" y="197" width="1.0914%" height="15" fill="rgb(239,167,4)" fg:x="13620" fg:w="153"/><text x="97.4039%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (127 samples, 0.91%)</title><rect x="97.3393%" y="181" width="0.9059%" height="15" fill="rgb(209,217,16)" fg:x="13646" fg:w="127"/><text x="97.5893%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="98.2310%" y="165" width="0.0143%" height="15" fill="rgb(219,88,35)" fg:x="13771" fg:w="2"/><text x="98.4810%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (207 samples, 1.48%)</title><rect x="96.7758%" y="229" width="1.4766%" height="15" fill="rgb(220,193,23)" fg:x="13567" fg:w="207"/><text x="97.0258%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (210 samples, 1.50%)</title><rect x="96.7615%" y="245" width="1.4980%" height="15" fill="rgb(230,90,52)" fg:x="13565" fg:w="210"/><text x="97.0115%" y="255.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (211 samples, 1.51%)</title><rect x="96.7615%" y="261" width="1.5051%" height="15" fill="rgb(252,106,19)" fg:x="13565" fg:w="211"/><text x="97.0115%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::update_knots_from_samples (3 samples, 0.02%)</title><rect x="98.2666%" y="261" width="0.0214%" height="15" fill="rgb(206,74,20)" fg:x="13776" fg:w="3"/><text x="98.5166%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::spline::linspace (2 samples, 0.01%)</title><rect x="98.2880%" y="261" width="0.0143%" height="15" fill="rgb(230,138,44)" fg:x="13779" fg:w="2"/><text x="98.5380%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.02%)</title><rect x="98.3023%" y="261" width="0.0214%" height="15" fill="rgb(235,182,43)" fg:x="13781" fg:w="3"/><text x="98.5523%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.02%)</title><rect x="98.3023%" y="245" width="0.0214%" height="15" fill="rgb(242,16,51)" fg:x="13781" fg:w="3"/><text x="98.5523%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.01%)</title><rect x="98.3308%" y="261" width="0.0143%" height="15" fill="rgb(248,9,4)" fg:x="13785" fg:w="2"/><text x="98.5808%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (423 samples, 3.02%)</title><rect x="96.2836%" y="277" width="3.0173%" height="15" fill="rgb(210,31,22)" fg:x="13498" fg:w="423"/><text x="96.5336%" y="287.50">fek..</text></g><g><title>libsystem_platform.dylib`_platform_memset (134 samples, 0.96%)</title><rect x="98.3451%" y="261" width="0.9558%" height="15" fill="rgb(239,54,39)" fg:x="13787" fg:w="134"/><text x="98.5951%" y="271.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (424 samples, 3.02%)</title><rect x="96.2836%" y="293" width="3.0245%" height="15" fill="rgb(230,99,41)" fg:x="13498" fg:w="424"/><text x="96.5336%" y="303.50">fek..</text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (12 samples, 0.09%)</title><rect x="99.3081%" y="293" width="0.0856%" height="15" fill="rgb(253,106,12)" fg:x="13922" fg:w="12"/><text x="99.5581%" y="303.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (2 samples, 0.01%)</title><rect x="99.3937%" y="293" width="0.0143%" height="15" fill="rgb(213,46,41)" fg:x="13934" fg:w="2"/><text x="99.6437%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (33 samples, 0.24%)</title><rect x="99.4079%" y="293" width="0.2354%" height="15" fill="rgb(215,133,35)" fg:x="13936" fg:w="33"/><text x="99.6579%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.06%)</title><rect x="99.6433%" y="293" width="0.0571%" height="15" fill="rgb(213,28,5)" fg:x="13969" fg:w="8"/><text x="99.8933%" y="303.50"></text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (8,246 samples, 58.82%)</title><rect x="40.9516%" y="309" width="58.8202%" height="15" fill="rgb(215,77,49)" fg:x="5741" fg:w="8246"/><text x="41.2016%" y="319.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.06%)</title><rect x="99.7075%" y="293" width="0.0642%" height="15" fill="rgb(248,100,22)" fg:x="13978" fg:w="9"/><text x="99.9575%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_free (7 samples, 0.05%)</title><rect x="99.7717%" y="309" width="0.0499%" height="15" fill="rgb(208,67,9)" fg:x="13987" fg:w="7"/><text x="100.0217%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="99.8217%" y="309" width="0.0285%" height="15" fill="rgb(219,133,21)" fg:x="13994" fg:w="4"/><text x="100.0717%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.07%)</title><rect x="99.8573%" y="309" width="0.0713%" height="15" fill="rgb(246,46,29)" fg:x="13999" fg:w="10"/><text x="100.1073%" y="319.50"></text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (8,276 samples, 59.03%)</title><rect x="40.9230%" y="325" width="59.0342%" height="15" fill="rgb(246,185,52)" fg:x="5737" fg:w="8276"/><text x="41.1730%" y="335.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.03%)</title><rect x="99.9287%" y="309" width="0.0285%" height="15" fill="rgb(252,136,11)" fg:x="14009" fg:w="4"/><text x="100.1787%" y="319.50"></text></g><g><title>fekan`std::sys::pal::unix::stack_overflow::imp::make_handler (2 samples, 0.01%)</title><rect x="99.9572%" y="325" width="0.0143%" height="15" fill="rgb(219,138,53)" fg:x="14013" fg:w="2"/><text x="100.2072%" y="335.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.01%)</title><rect x="99.9572%" y="309" width="0.0143%" height="15" fill="rgb(211,51,23)" fg:x="14013" fg:w="2"/><text x="100.2072%" y="319.50"></text></g><g><title>dyld`dyld4::RuntimeState::_instantiateTLVs (2 samples, 0.01%)</title><rect x="99.9572%" y="293" width="0.0143%" height="15" fill="rgb(247,221,28)" fg:x="14013" fg:w="2"/><text x="100.2072%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="99.9572%" y="277" width="0.0143%" height="15" fill="rgb(251,222,45)" fg:x="14013" fg:w="2"/><text x="100.2072%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.01%)</title><rect x="99.9572%" y="261" width="0.0143%" height="15" fill="rgb(217,162,53)" fg:x="14013" fg:w="2"/><text x="100.2072%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.01%)</title><rect x="99.9572%" y="245" width="0.0143%" height="15" fill="rgb(229,93,14)" fg:x="14013" fg:w="2"/><text x="100.2072%" y="255.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (8,280 samples, 59.06%)</title><rect x="40.9230%" y="341" width="59.0627%" height="15" fill="rgb(209,67,49)" fg:x="5737" fg:w="8280"/><text x="41.1730%" y="351.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>all (14,019 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(213,87,29)" fg:x="0" fg:w="14019"/><text x="0.2500%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (8,283 samples, 59.08%)</title><rect x="40.9159%" y="373" width="59.0841%" height="15" fill="rgb(205,151,52)" fg:x="5736" fg:w="8283"/><text x="41.1659%" y="383.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (8,282 samples, 59.08%)</title><rect x="40.9230%" y="357" width="59.0770%" height="15" fill="rgb(253,215,39)" fg:x="5737" fg:w="8282"/><text x="41.1730%" y="367.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (2 samples, 0.01%)</title><rect x="99.9857%" y="341" width="0.0143%" height="15" fill="rgb(221,220,41)" fg:x="14017" fg:w="2"/><text x="100.2357%" y="351.50"></text></g></svg></svg>