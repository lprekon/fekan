<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="10083"><g><title>fekan`fekan::split_data (2 samples, 0.02%)</title><rect x="0.0298%" y="245" width="0.0198%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="2"/><text x="0.2798%" y="255.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (76 samples, 0.75%)</title><rect x="0.1190%" y="101" width="0.7537%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="76"/><text x="0.3690%" y="111.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (76 samples, 0.75%)</title><rect x="0.1190%" y="85" width="0.7537%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="76"/><text x="0.3690%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (76 samples, 0.75%)</title><rect x="0.1190%" y="69" width="0.7537%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="76"/><text x="0.3690%" y="79.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="0.8728%" y="85" width="0.0298%" height="15" fill="rgb(208,68,35)" fg:x="88" fg:w="3"/><text x="1.1228%" y="95.50"></text></g><g><title>fekan`&lt;std::fs::File as std::io::Read&gt;::read (6 samples, 0.06%)</title><rect x="0.9422%" y="53" width="0.0595%" height="15" fill="rgb(232,128,0)" fg:x="95" fg:w="6"/><text x="1.1922%" y="63.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.02%)</title><rect x="1.0017%" y="53" width="0.0198%" height="15" fill="rgb(207,160,47)" fg:x="101" fg:w="2"/><text x="1.2517%" y="63.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1,458 samples, 14.46%)</title><rect x="0.1190%" y="117" width="14.4600%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="1458"/><text x="0.3690%" y="127.50">fekan`&lt;core::marker::P..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (1,382 samples, 13.71%)</title><rect x="0.8728%" y="101" width="13.7062%" height="15" fill="rgb(218,30,26)" fg:x="88" fg:w="1382"/><text x="1.1228%" y="111.50">fekan`serde_json::de:..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1,379 samples, 13.68%)</title><rect x="0.9025%" y="85" width="13.6765%" height="15" fill="rgb(220,122,19)" fg:x="91" fg:w="1379"/><text x="1.1525%" y="95.50">fekan`serde_json::de:..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,376 samples, 13.65%)</title><rect x="0.9323%" y="69" width="13.6467%" height="15" fill="rgb(250,228,42)" fg:x="94" fg:w="1376"/><text x="1.1823%" y="79.50">fekan`&lt;std::io::Bytes..</text></g><g><title>libsystem_kernel.dylib`read (1,367 samples, 13.56%)</title><rect x="1.0215%" y="53" width="13.5575%" height="15" fill="rgb(240,193,28)" fg:x="103" fg:w="1367"/><text x="1.2715%" y="63.50">libsystem_kernel.dyl..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1,583 samples, 15.70%)</title><rect x="0.0793%" y="133" width="15.6997%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1583"/><text x="0.3293%" y="143.50">fekan`&lt;serde_json::de::S..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 1.20%)</title><rect x="14.5790%" y="117" width="1.2000%" height="15" fill="rgb(206,188,39)" fg:x="1470" fg:w="121"/><text x="14.8290%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`read (121 samples, 1.20%)</title><rect x="14.5790%" y="101" width="1.2000%" height="15" fill="rgb(217,207,13)" fg:x="1470" fg:w="121"/><text x="14.8290%" y="111.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="15.7890%" y="117" width="0.0198%" height="15" fill="rgb(231,73,38)" fg:x="1592" fg:w="2"/><text x="16.0390%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.02%)</title><rect x="15.7890%" y="101" width="0.0198%" height="15" fill="rgb(225,20,46)" fg:x="1592" fg:w="2"/><text x="16.0390%" y="111.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,587 samples, 15.74%)</title><rect x="0.0793%" y="149" width="15.7394%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1587"/><text x="0.3293%" y="159.50">fekan`&lt;serde::de::impls:..</text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.04%)</title><rect x="15.7790%" y="133" width="0.0397%" height="15" fill="rgb(221,200,47)" fg:x="1591" fg:w="4"/><text x="16.0290%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1,665 samples, 16.51%)</title><rect x="0.0793%" y="165" width="16.5129%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1665"/><text x="0.3293%" y="175.50">fekan`&lt;&amp;mut serde_json::d..</text></g><g><title>libsystem_kernel.dylib`read (77 samples, 0.76%)</title><rect x="15.8286%" y="149" width="0.7637%" height="15" fill="rgb(249,33,26)" fg:x="1596" fg:w="77"/><text x="16.0786%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (88 samples, 0.87%)</title><rect x="16.5923%" y="149" width="0.8728%" height="15" fill="rgb(235,183,28)" fg:x="1673" fg:w="88"/><text x="16.8423%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`read (88 samples, 0.87%)</title><rect x="16.5923%" y="133" width="0.8728%" height="15" fill="rgb(221,5,38)" fg:x="1673" fg:w="88"/><text x="16.8423%" y="143.50"></text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_integer (42 samples, 0.42%)</title><rect x="17.4650%" y="149" width="0.4165%" height="15" fill="rgb(247,18,42)" fg:x="1761" fg:w="42"/><text x="17.7150%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.42%)</title><rect x="17.4650%" y="133" width="0.4165%" height="15" fill="rgb(241,131,45)" fg:x="1761" fg:w="42"/><text x="17.7150%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`read (42 samples, 0.42%)</title><rect x="17.4650%" y="117" width="0.4165%" height="15" fill="rgb(249,31,29)" fg:x="1761" fg:w="42"/><text x="17.7150%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$read (2 samples, 0.02%)</title><rect x="17.9213%" y="101" width="0.0198%" height="15" fill="rgb(225,111,53)" fg:x="1807" fg:w="2"/><text x="18.1713%" y="111.50"></text></g><g><title>fekan`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (790 samples, 7.83%)</title><rect x="16.5923%" y="165" width="7.8350%" height="15" fill="rgb(238,160,17)" fg:x="1673" fg:w="790"/><text x="16.8423%" y="175.50">fekan`&lt;core..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_number (660 samples, 6.55%)</title><rect x="17.8816%" y="149" width="6.5457%" height="15" fill="rgb(214,148,48)" fg:x="1803" fg:w="660"/><text x="18.1316%" y="159.50">fekan`ser..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_decimal (660 samples, 6.55%)</title><rect x="17.8816%" y="133" width="6.5457%" height="15" fill="rgb(232,36,49)" fg:x="1803" fg:w="660"/><text x="18.1316%" y="143.50">fekan`ser..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (657 samples, 6.52%)</title><rect x="17.9113%" y="117" width="6.5159%" height="15" fill="rgb(209,103,24)" fg:x="1806" fg:w="657"/><text x="18.1613%" y="127.50">fekan`&lt;st..</text></g><g><title>libsystem_kernel.dylib`read (654 samples, 6.49%)</title><rect x="17.9411%" y="101" width="6.4862%" height="15" fill="rgb(229,88,8)" fg:x="1809" fg:w="654"/><text x="18.1911%" y="111.50">libsyste..</text></g><g><title>fekan`DYLD-STUB$$read (4 samples, 0.04%)</title><rect x="24.4768%" y="133" width="0.0397%" height="15" fill="rgb(213,181,19)" fg:x="2468" fg:w="4"/><text x="24.7268%" y="143.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (613 samples, 6.08%)</title><rect x="24.4669%" y="149" width="6.0795%" height="15" fill="rgb(254,191,54)" fg:x="2467" fg:w="613"/><text x="24.7169%" y="159.50">fekan`&lt;s..</text></g><g><title>libsystem_kernel.dylib`read (608 samples, 6.03%)</title><rect x="24.5165%" y="133" width="6.0300%" height="15" fill="rgb(241,83,37)" fg:x="2472" fg:w="608"/><text x="24.7665%" y="143.50">libsyste..</text></g><g><title>fekan`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (619 samples, 6.14%)</title><rect x="24.4273%" y="165" width="6.1390%" height="15" fill="rgb(233,36,39)" fg:x="2463" fg:w="619"/><text x="24.6773%" y="175.50">fekan`&lt;s..</text></g><g><title>fekan`core::str::converts::from_utf8 (2 samples, 0.02%)</title><rect x="30.5465%" y="149" width="0.0198%" height="15" fill="rgb(226,3,54)" fg:x="3080" fg:w="2"/><text x="30.7965%" y="159.50"></text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 1.49%)</title><rect x="30.5663%" y="165" width="1.4877%" height="15" fill="rgb(245,192,40)" fg:x="3082" fg:w="150"/><text x="30.8163%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (148 samples, 1.47%)</title><rect x="30.5861%" y="149" width="1.4678%" height="15" fill="rgb(238,167,29)" fg:x="3084" fg:w="148"/><text x="30.8361%" y="159.50"></text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (3,312 samples, 32.85%)</title><rect x="0.0595%" y="181" width="32.8474%" height="15" fill="rgb(232,182,51)" fg:x="6" fg:w="3312"/><text x="0.3095%" y="191.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde:..</text></g><g><title>fekan`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (86 samples, 0.85%)</title><rect x="32.0540%" y="165" width="0.8529%" height="15" fill="rgb(231,60,39)" fg:x="3232" fg:w="86"/><text x="32.3040%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`read (85 samples, 0.84%)</title><rect x="32.0639%" y="149" width="0.8430%" height="15" fill="rgb(208,69,12)" fg:x="3233" fg:w="85"/><text x="32.3139%" y="159.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3,424 samples, 33.96%)</title><rect x="0.0496%" y="213" width="33.9581%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="3424"/><text x="0.2996%" y="223.50">fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize f..</text></g><g><title>fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (3,423 samples, 33.95%)</title><rect x="0.0595%" y="197" width="33.9482%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="3423"/><text x="0.3095%" y="207.50">fekan`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAc..</text></g><g><title>fekan`&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 1.10%)</title><rect x="32.9069%" y="181" width="1.1009%" height="15" fill="rgb(222,207,29)" fg:x="3318" fg:w="111"/><text x="33.1569%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (111 samples, 1.10%)</title><rect x="32.9069%" y="165" width="1.1009%" height="15" fill="rgb(206,96,30)" fg:x="3318" fg:w="111"/><text x="33.1569%" y="175.50"></text></g><g><title>fekan`fekan::load_regression_data (3,427 samples, 33.99%)</title><rect x="0.0298%" y="261" width="33.9879%" height="15" fill="rgb(218,138,4)" fg:x="3" fg:w="3427"/><text x="0.2798%" y="271.50">fekan`fekan::load_regression_data</text></g><g><title>fekan`serde_json::de::from_trait (3,425 samples, 33.97%)</title><rect x="0.0496%" y="245" width="33.9681%" height="15" fill="rgb(250,191,14)" fg:x="5" fg:w="3425"/><text x="0.2996%" y="255.50">fekan`serde_json::de::from_trait</text></g><g><title>fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (3,425 samples, 33.97%)</title><rect x="0.0496%" y="229" width="33.9681%" height="15" fill="rgb(239,60,40)" fg:x="5" fg:w="3425"/><text x="0.2996%" y="239.50">fekan`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::d..</text></g><g><title>fekan`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (7 samples, 0.07%)</title><rect x="34.0772%" y="245" width="0.0694%" height="15" fill="rgb(206,27,48)" fg:x="3436" fg:w="7"/><text x="34.3272%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="34.1466%" y="181" width="0.0198%" height="15" fill="rgb(225,35,8)" fg:x="3443" fg:w="2"/><text x="34.3966%" y="191.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (3 samples, 0.03%)</title><rect x="34.1466%" y="229" width="0.0298%" height="15" fill="rgb(250,213,24)" fg:x="3443" fg:w="3"/><text x="34.3966%" y="239.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::edge::EdgeType&gt; (3 samples, 0.03%)</title><rect x="34.1466%" y="213" width="0.0298%" height="15" fill="rgb(247,123,22)" fg:x="3443" fg:w="3"/><text x="34.3966%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.03%)</title><rect x="34.1466%" y="197" width="0.0298%" height="15" fill="rgb(231,138,38)" fg:x="3443" fg:w="3"/><text x="34.3966%" y="207.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (4 samples, 0.04%)</title><rect x="34.1466%" y="245" width="0.0397%" height="15" fill="rgb(231,145,46)" fg:x="3443" fg:w="4"/><text x="34.3966%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (24 samples, 0.24%)</title><rect x="34.1863%" y="181" width="0.2380%" height="15" fill="rgb(251,118,11)" fg:x="3447" fg:w="24"/><text x="34.4363%" y="191.50"></text></g><g><title>fekan`fekan::kan::Kan::merge_models (26 samples, 0.26%)</title><rect x="34.1863%" y="245" width="0.2579%" height="15" fill="rgb(217,147,25)" fg:x="3447" fg:w="26"/><text x="34.4363%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::merge_layers (26 samples, 0.26%)</title><rect x="34.1863%" y="229" width="0.2579%" height="15" fill="rgb(247,81,37)" fg:x="3447" fg:w="26"/><text x="34.4363%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::merge_edges (26 samples, 0.26%)</title><rect x="34.1863%" y="213" width="0.2579%" height="15" fill="rgb(209,12,38)" fg:x="3447" fg:w="26"/><text x="34.4363%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (26 samples, 0.26%)</title><rect x="34.1863%" y="197" width="0.2579%" height="15" fill="rgb(227,1,9)" fg:x="3447" fg:w="26"/><text x="34.4363%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (35 samples, 0.35%)</title><rect x="35.2574%" y="165" width="0.3471%" height="15" fill="rgb(248,47,43)" fg:x="3555" fg:w="35"/><text x="35.5074%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (26 samples, 0.26%)</title><rect x="35.3466%" y="149" width="0.2579%" height="15" fill="rgb(221,10,30)" fg:x="3564" fg:w="26"/><text x="35.5966%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (20 samples, 0.20%)</title><rect x="35.6045%" y="165" width="0.1984%" height="15" fill="rgb(210,229,1)" fg:x="3590" fg:w="20"/><text x="35.8545%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (143 samples, 1.42%)</title><rect x="34.8012%" y="181" width="1.4182%" height="15" fill="rgb(222,148,37)" fg:x="3509" fg:w="143"/><text x="35.0512%" y="191.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.42%)</title><rect x="35.8028%" y="165" width="0.4165%" height="15" fill="rgb(234,67,33)" fg:x="3610" fg:w="42"/><text x="36.0528%" y="175.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (28 samples, 0.28%)</title><rect x="35.9417%" y="149" width="0.2777%" height="15" fill="rgb(247,98,35)" fg:x="3624" fg:w="28"/><text x="36.1917%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::forward (211 samples, 2.09%)</title><rect x="34.4739%" y="213" width="2.0926%" height="15" fill="rgb(247,138,52)" fg:x="3476" fg:w="211"/><text x="34.7239%" y="223.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (205 samples, 2.03%)</title><rect x="34.5334%" y="197" width="2.0331%" height="15" fill="rgb(213,79,30)" fg:x="3482" fg:w="205"/><text x="34.7834%" y="207.50">f..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (35 samples, 0.35%)</title><rect x="36.2194%" y="181" width="0.3471%" height="15" fill="rgb(246,177,23)" fg:x="3652" fg:w="35"/><text x="36.4694%" y="191.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.20%)</title><rect x="36.3681%" y="165" width="0.1984%" height="15" fill="rgb(230,62,27)" fg:x="3667" fg:w="20"/><text x="36.6181%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (12 samples, 0.12%)</title><rect x="36.5665%" y="213" width="0.1190%" height="15" fill="rgb(216,154,8)" fg:x="3687" fg:w="12"/><text x="36.8165%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="36.6855%" y="213" width="0.0198%" height="15" fill="rgb(244,35,45)" fg:x="3699" fg:w="2"/><text x="36.9355%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (228 samples, 2.26%)</title><rect x="34.4739%" y="229" width="2.2612%" height="15" fill="rgb(251,115,12)" fg:x="3476" fg:w="228"/><text x="34.7239%" y="239.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="36.7053%" y="213" width="0.0298%" height="15" fill="rgb(240,54,50)" fg:x="3701" fg:w="3"/><text x="36.9553%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.05%)</title><rect x="36.7549%" y="149" width="0.0496%" height="15" fill="rgb(233,84,52)" fg:x="3706" fg:w="5"/><text x="37.0049%" y="159.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.05%)</title><rect x="36.7549%" y="133" width="0.0496%" height="15" fill="rgb(207,117,47)" fg:x="3706" fg:w="5"/><text x="37.0049%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (5 samples, 0.05%)</title><rect x="36.7549%" y="117" width="0.0496%" height="15" fill="rgb(249,43,39)" fg:x="3706" fg:w="5"/><text x="37.0049%" y="127.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (4 samples, 0.04%)</title><rect x="36.7649%" y="101" width="0.0397%" height="15" fill="rgb(209,38,44)" fg:x="3707" fg:w="4"/><text x="37.0149%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (3 samples, 0.03%)</title><rect x="36.7748%" y="85" width="0.0298%" height="15" fill="rgb(236,212,23)" fg:x="3708" fg:w="3"/><text x="37.0248%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.02%)</title><rect x="36.7847%" y="69" width="0.0198%" height="15" fill="rgb(242,79,21)" fg:x="3709" fg:w="2"/><text x="37.0347%" y="79.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.02%)</title><rect x="36.7847%" y="53" width="0.0198%" height="15" fill="rgb(211,96,35)" fg:x="3709" fg:w="2"/><text x="37.0347%" y="63.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.02%)</title><rect x="36.7847%" y="37" width="0.0198%" height="15" fill="rgb(253,215,40)" fg:x="3709" fg:w="2"/><text x="37.0347%" y="47.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (8 samples, 0.08%)</title><rect x="36.7351%" y="229" width="0.0793%" height="15" fill="rgb(211,81,21)" fg:x="3704" fg:w="8"/><text x="36.9851%" y="239.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (8 samples, 0.08%)</title><rect x="36.7351%" y="213" width="0.0793%" height="15" fill="rgb(208,190,38)" fg:x="3704" fg:w="8"/><text x="36.9851%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (8 samples, 0.08%)</title><rect x="36.7351%" y="197" width="0.0793%" height="15" fill="rgb(235,213,38)" fg:x="3704" fg:w="8"/><text x="36.9851%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.08%)</title><rect x="36.7351%" y="181" width="0.0793%" height="15" fill="rgb(237,122,38)" fg:x="3704" fg:w="8"/><text x="36.9851%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (8 samples, 0.08%)</title><rect x="36.7351%" y="165" width="0.0793%" height="15" fill="rgb(244,218,35)" fg:x="3704" fg:w="8"/><text x="36.9851%" y="175.50"></text></g><g><title>fekan`fekan::preset_knot_ranges (241 samples, 2.39%)</title><rect x="34.4540%" y="245" width="2.3902%" height="15" fill="rgb(240,68,47)" fg:x="3474" fg:w="241"/><text x="34.7040%" y="255.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (181 samples, 1.80%)</title><rect x="36.8839%" y="197" width="1.7951%" height="15" fill="rgb(210,16,53)" fg:x="3719" fg:w="181"/><text x="37.1339%" y="207.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (177 samples, 1.76%)</title><rect x="36.9235%" y="181" width="1.7554%" height="15" fill="rgb(235,124,12)" fg:x="3723" fg:w="177"/><text x="37.1735%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (153 samples, 1.52%)</title><rect x="37.1616%" y="165" width="1.5174%" height="15" fill="rgb(224,169,11)" fg:x="3747" fg:w="153"/><text x="37.4116%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (107 samples, 1.06%)</title><rect x="37.6178%" y="149" width="1.0612%" height="15" fill="rgb(250,166,2)" fg:x="3793" fg:w="107"/><text x="37.8678%" y="159.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (32 samples, 0.32%)</title><rect x="38.3616%" y="133" width="0.3174%" height="15" fill="rgb(242,216,29)" fg:x="3868" fg:w="32"/><text x="38.6116%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (9 samples, 0.09%)</title><rect x="38.6790%" y="197" width="0.0893%" height="15" fill="rgb(230,116,27)" fg:x="3900" fg:w="9"/><text x="38.9290%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (6 samples, 0.06%)</title><rect x="38.7781%" y="197" width="0.0595%" height="15" fill="rgb(228,99,48)" fg:x="3910" fg:w="6"/><text x="39.0281%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.06%)</title><rect x="38.7781%" y="181" width="0.0595%" height="15" fill="rgb(253,11,6)" fg:x="3910" fg:w="6"/><text x="39.0281%" y="191.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::infer (201 samples, 1.99%)</title><rect x="36.8739%" y="213" width="1.9935%" height="15" fill="rgb(247,143,39)" fg:x="3718" fg:w="201"/><text x="37.1239%" y="223.50">f..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.03%)</title><rect x="38.8376%" y="197" width="0.0298%" height="15" fill="rgb(236,97,10)" fg:x="3916" fg:w="3"/><text x="39.0876%" y="207.50"></text></g><g><title>fekan`fekan::kan::Kan::infer (202 samples, 2.00%)</title><rect x="36.8739%" y="229" width="2.0034%" height="15" fill="rgb(233,208,19)" fg:x="3718" fg:w="202"/><text x="37.1239%" y="239.50">f..</text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.02%)</title><rect x="38.8773%" y="229" width="0.0198%" height="15" fill="rgb(216,164,2)" fg:x="3920" fg:w="2"/><text x="39.1273%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.02%)</title><rect x="38.9071%" y="229" width="0.0198%" height="15" fill="rgb(220,129,5)" fg:x="3923" fg:w="2"/><text x="39.1571%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="38.9071%" y="213" width="0.0198%" height="15" fill="rgb(242,17,10)" fg:x="3923" fg:w="2"/><text x="39.1571%" y="223.50"></text></g><g><title>fekan`fekan::validate_model (212 samples, 2.10%)</title><rect x="36.8442%" y="245" width="2.1025%" height="15" fill="rgb(242,107,0)" fg:x="3715" fg:w="212"/><text x="37.0942%" y="255.50">f..</text></g><g><title>fekan`rand::rng::Rng::gen_range (7 samples, 0.07%)</title><rect x="38.9467%" y="245" width="0.0694%" height="15" fill="rgb(251,28,31)" fg:x="3927" fg:w="7"/><text x="39.1967%" y="255.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (198 samples, 1.96%)</title><rect x="39.0162%" y="197" width="1.9637%" height="15" fill="rgb(233,223,10)" fg:x="3934" fg:w="198"/><text x="39.2662%" y="207.50">f..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (198 samples, 1.96%)</title><rect x="39.0162%" y="181" width="1.9637%" height="15" fill="rgb(215,21,27)" fg:x="3934" fg:w="198"/><text x="39.2662%" y="191.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (197 samples, 1.95%)</title><rect x="39.0261%" y="165" width="1.9538%" height="15" fill="rgb(232,23,21)" fg:x="3935" fg:w="197"/><text x="39.2761%" y="175.50">l..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (200 samples, 1.98%)</title><rect x="39.0162%" y="229" width="1.9835%" height="15" fill="rgb(244,5,23)" fg:x="3934" fg:w="200"/><text x="39.2662%" y="239.50">f..</text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (200 samples, 1.98%)</title><rect x="39.0162%" y="213" width="1.9835%" height="15" fill="rgb(226,81,46)" fg:x="3934" fg:w="200"/><text x="39.2662%" y="223.50">f..</text></g><g><title>libsystem_kernel.dylib`__ulock_wait (2 samples, 0.02%)</title><rect x="40.9997%" y="149" width="0.0198%" height="15" fill="rgb(247,70,30)" fg:x="4134" fg:w="2"/><text x="41.2497%" y="159.50"></text></g><g><title>fekan`std::thread::scoped::scope (203 samples, 2.01%)</title><rect x="39.0162%" y="245" width="2.0133%" height="15" fill="rgb(212,68,19)" fg:x="3934" fg:w="203"/><text x="39.2662%" y="255.50">f..</text></g><g><title>fekan`core::iter::adapters::try_process (3 samples, 0.03%)</title><rect x="40.9997%" y="229" width="0.0298%" height="15" fill="rgb(240,187,13)" fg:x="4134" fg:w="3"/><text x="41.2497%" y="239.50"></text></g><g><title>fekan`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.03%)</title><rect x="40.9997%" y="213" width="0.0298%" height="15" fill="rgb(223,113,26)" fg:x="4134" fg:w="3"/><text x="41.2497%" y="223.50"></text></g><g><title>fekan`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.03%)</title><rect x="40.9997%" y="197" width="0.0298%" height="15" fill="rgb(206,192,2)" fg:x="4134" fg:w="3"/><text x="41.2497%" y="207.50"></text></g><g><title>fekan`std::thread::JoinInner&lt;T&gt;::join (3 samples, 0.03%)</title><rect x="40.9997%" y="181" width="0.0298%" height="15" fill="rgb(241,108,4)" fg:x="4134" fg:w="3"/><text x="41.2497%" y="191.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::join (3 samples, 0.03%)</title><rect x="40.9997%" y="165" width="0.0298%" height="15" fill="rgb(247,173,49)" fg:x="4134" fg:w="3"/><text x="41.2497%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="41.0394%" y="245" width="0.0298%" height="15" fill="rgb(224,114,35)" fg:x="4138" fg:w="3"/><text x="41.2894%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.02%)</title><rect x="41.0691%" y="245" width="0.0198%" height="15" fill="rgb(245,159,27)" fg:x="4141" fg:w="2"/><text x="41.3191%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.02%)</title><rect x="41.0691%" y="229" width="0.0198%" height="15" fill="rgb(245,172,44)" fg:x="4141" fg:w="2"/><text x="41.3191%" y="239.50"></text></g><g><title>fekan`fekan::train_model (714 samples, 7.08%)</title><rect x="34.0177%" y="261" width="7.0812%" height="15" fill="rgb(236,23,11)" fg:x="3430" fg:w="714"/><text x="34.2677%" y="271.50">fekan`feka..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.03%)</title><rect x="41.1088%" y="261" width="0.0298%" height="15" fill="rgb(205,117,38)" fg:x="4145" fg:w="3"/><text x="41.3588%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="41.1485%" y="261" width="0.0198%" height="15" fill="rgb(237,72,25)" fg:x="4149" fg:w="2"/><text x="41.3985%" y="271.50"></text></g><g><title>fekan`main (4,152 samples, 41.18%)</title><rect x="0.0000%" y="341" width="41.1782%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="4152"/><text x="0.2500%" y="351.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (4,151 samples, 41.17%)</title><rect x="0.0099%" y="325" width="41.1683%" height="15" fill="rgb(217,125,39)" fg:x="1" fg:w="4151"/><text x="0.2599%" y="335.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (4,151 samples, 41.17%)</title><rect x="0.0099%" y="309" width="41.1683%" height="15" fill="rgb(235,36,10)" fg:x="1" fg:w="4151"/><text x="0.2599%" y="319.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (4,151 samples, 41.17%)</title><rect x="0.0099%" y="293" width="41.1683%" height="15" fill="rgb(251,123,47)" fg:x="1" fg:w="4151"/><text x="0.2599%" y="303.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (4,151 samples, 41.17%)</title><rect x="0.0099%" y="277" width="41.1683%" height="15" fill="rgb(221,13,13)" fg:x="1" fg:w="4151"/><text x="0.2599%" y="287.50">fekan`fekan::main</text></g><g><title>dyld`start (4,153 samples, 41.19%)</title><rect x="0.0000%" y="357" width="41.1881%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="4153"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>libsystem_kernel.dylib`__exit (4 samples, 0.04%)</title><rect x="41.1881%" y="357" width="0.0397%" height="15" fill="rgb(211,50,8)" fg:x="4153" fg:w="4"/><text x="41.4381%" y="367.50"></text></g><g><title>fekan`DYLD-STUB$$free (4 samples, 0.04%)</title><rect x="41.3369%" y="277" width="0.0397%" height="15" fill="rgb(245,182,24)" fg:x="4168" fg:w="4"/><text x="41.5869%" y="287.50"></text></g><g><title>fekan`__rdl_dealloc (2 samples, 0.02%)</title><rect x="41.3865%" y="277" width="0.0198%" height="15" fill="rgb(242,14,37)" fg:x="4173" fg:w="2"/><text x="41.6365%" y="287.50"></text></g><g><title>fekan`__rdl_alloc (2 samples, 0.02%)</title><rect x="41.4262%" y="261" width="0.0198%" height="15" fill="rgb(246,228,12)" fg:x="4177" fg:w="2"/><text x="41.6762%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="41.4460%" y="261" width="0.0397%" height="15" fill="rgb(213,55,15)" fg:x="4179" fg:w="4"/><text x="41.6960%" y="271.50"></text></g><g><title>fekan`fekan::calculate_huber_loss_and_gradient (10 samples, 0.10%)</title><rect x="41.4063%" y="277" width="0.0992%" height="15" fill="rgb(209,9,3)" fg:x="4175" fg:w="10"/><text x="41.6563%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.02%)</title><rect x="41.4857%" y="261" width="0.0198%" height="15" fill="rgb(230,59,30)" fg:x="4183" fg:w="2"/><text x="41.7357%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (2 samples, 0.02%)</title><rect x="41.6344%" y="245" width="0.0198%" height="15" fill="rgb(209,121,21)" fg:x="4198" fg:w="2"/><text x="41.8844%" y="255.50"></text></g><g><title>fekan`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (624 samples, 6.19%)</title><rect x="42.5766%" y="213" width="6.1886%" height="15" fill="rgb(220,109,13)" fg:x="4293" fg:w="624"/><text x="42.8266%" y="223.50">fekan`&lt;c..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (246 samples, 2.44%)</title><rect x="46.3255%" y="197" width="2.4398%" height="15" fill="rgb(232,18,1)" fg:x="4671" fg:w="246"/><text x="46.5755%" y="207.50">fe..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (208 samples, 2.06%)</title><rect x="48.7652%" y="213" width="2.0629%" height="15" fill="rgb(215,41,42)" fg:x="4917" fg:w="208"/><text x="49.0152%" y="223.50">f..</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (3 samples, 0.03%)</title><rect x="50.8777%" y="181" width="0.0298%" height="15" fill="rgb(224,123,36)" fg:x="5130" fg:w="3"/><text x="51.1277%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.13%)</title><rect x="50.8281%" y="213" width="0.1289%" height="15" fill="rgb(240,125,3)" fg:x="5125" fg:w="13"/><text x="51.0781%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.10%)</title><rect x="50.8579%" y="197" width="0.0992%" height="15" fill="rgb(205,98,50)" fg:x="5128" fg:w="10"/><text x="51.1079%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.05%)</title><rect x="50.9075%" y="181" width="0.0496%" height="15" fill="rgb(205,185,37)" fg:x="5133" fg:w="5"/><text x="51.1575%" y="191.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (847 samples, 8.40%)</title><rect x="42.5667%" y="229" width="8.4003%" height="15" fill="rgb(238,207,15)" fg:x="4292" fg:w="847"/><text x="42.8167%" y="239.50">fekan`&lt;alloc..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.02%)</title><rect x="50.9769%" y="229" width="0.0198%" height="15" fill="rgb(213,199,42)" fg:x="5140" fg:w="2"/><text x="51.2269%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.12%)</title><rect x="50.9967%" y="229" width="0.1190%" height="15" fill="rgb(235,201,11)" fg:x="5142" fg:w="12"/><text x="51.2467%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.07%)</title><rect x="51.0463%" y="213" width="0.0694%" height="15" fill="rgb(207,46,11)" fg:x="5147" fg:w="7"/><text x="51.2963%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2 samples, 0.02%)</title><rect x="51.1356%" y="197" width="0.0198%" height="15" fill="rgb(241,35,35)" fg:x="5156" fg:w="2"/><text x="51.3856%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.04%)</title><rect x="51.1257%" y="229" width="0.0397%" height="15" fill="rgb(243,32,47)" fg:x="5155" fg:w="4"/><text x="51.3757%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.04%)</title><rect x="51.1257%" y="213" width="0.0397%" height="15" fill="rgb(247,202,23)" fg:x="5155" fg:w="4"/><text x="51.3757%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::backward (965 samples, 9.57%)</title><rect x="41.6741%" y="245" width="9.5706%" height="15" fill="rgb(219,102,11)" fg:x="4202" fg:w="965"/><text x="41.9241%" y="255.50">fekan`fekan::k..</text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.07%)</title><rect x="51.1752%" y="229" width="0.0694%" height="15" fill="rgb(243,110,44)" fg:x="5160" fg:w="7"/><text x="51.4252%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.05%)</title><rect x="51.2447%" y="245" width="0.0496%" height="15" fill="rgb(222,74,54)" fg:x="5167" fg:w="5"/><text x="51.4947%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="51.2943%" y="245" width="0.0198%" height="15" fill="rgb(216,99,12)" fg:x="5172" fg:w="2"/><text x="51.5443%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.06%)</title><rect x="51.3141%" y="245" width="0.0595%" height="15" fill="rgb(226,22,26)" fg:x="5174" fg:w="6"/><text x="51.5641%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.03%)</title><rect x="51.3438%" y="229" width="0.0298%" height="15" fill="rgb(217,163,10)" fg:x="5177" fg:w="3"/><text x="51.5938%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.07%)</title><rect x="51.3835%" y="245" width="0.0694%" height="15" fill="rgb(213,25,53)" fg:x="5181" fg:w="7"/><text x="51.6335%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (1,004 samples, 9.96%)</title><rect x="41.5154%" y="261" width="9.9574%" height="15" fill="rgb(252,105,26)" fg:x="4186" fg:w="1004"/><text x="41.7654%" y="271.50">fekan`fekan::k..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="51.4529%" y="245" width="0.0198%" height="15" fill="rgb(220,39,43)" fg:x="5188" fg:w="2"/><text x="51.7029%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (1,010 samples, 10.02%)</title><rect x="41.5055%" y="277" width="10.0169%" height="15" fill="rgb(229,68,48)" fg:x="4185" fg:w="1010"/><text x="41.7555%" y="287.50">fekan`fekan::k..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.04%)</title><rect x="51.4827%" y="261" width="0.0397%" height="15" fill="rgb(252,8,32)" fg:x="5191" fg:w="4"/><text x="51.7327%" y="271.50"></text></g><g><title>fekan`fekan::kan::Kan::clear_samples (13 samples, 0.13%)</title><rect x="51.5224%" y="277" width="0.1289%" height="15" fill="rgb(223,20,43)" fg:x="5195" fg:w="13"/><text x="51.7724%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.12%)</title><rect x="51.5323%" y="261" width="0.1190%" height="15" fill="rgb(229,81,49)" fg:x="5196" fg:w="12"/><text x="51.7823%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (334 samples, 3.31%)</title><rect x="59.3871%" y="197" width="3.3125%" height="15" fill="rgb(236,28,36)" fg:x="5988" fg:w="334"/><text x="59.6371%" y="207.50">fek..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (184 samples, 1.82%)</title><rect x="60.8747%" y="181" width="1.8249%" height="15" fill="rgb(249,185,26)" fg:x="6138" fg:w="184"/><text x="61.1247%" y="191.50">f..</text></g><g><title>fekan`fekan::kan_layer::edge::basis_no_cache (128 samples, 1.27%)</title><rect x="62.6996%" y="197" width="1.2695%" height="15" fill="rgb(249,174,33)" fg:x="6322" fg:w="128"/><text x="62.9496%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (1,127 samples, 11.18%)</title><rect x="55.7969%" y="213" width="11.1772%" height="15" fill="rgb(233,201,37)" fg:x="5626" fg:w="1127"/><text x="56.0469%" y="223.50">fekan`fekan::kan..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (303 samples, 3.01%)</title><rect x="63.9691%" y="197" width="3.0051%" height="15" fill="rgb(221,78,26)" fg:x="6450" fg:w="303"/><text x="64.2191%" y="207.50">fek..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3 samples, 0.03%)</title><rect x="66.9444%" y="181" width="0.0298%" height="15" fill="rgb(250,127,30)" fg:x="6750" fg:w="3"/><text x="67.1944%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.02%)</title><rect x="66.9543%" y="165" width="0.0198%" height="15" fill="rgb(230,49,44)" fg:x="6751" fg:w="2"/><text x="67.2043%" y="175.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.02%)</title><rect x="69.4535%" y="197" width="0.0198%" height="15" fill="rgb(229,67,23)" fg:x="7003" fg:w="2"/><text x="69.7035%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (1,762 samples, 17.47%)</title><rect x="52.0182%" y="229" width="17.4750%" height="15" fill="rgb(249,83,47)" fg:x="5245" fg:w="1762"/><text x="52.2682%" y="239.50">fekan`fekan::kan_layer::edg..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (254 samples, 2.52%)</title><rect x="66.9741%" y="213" width="2.5191%" height="15" fill="rgb(215,43,3)" fg:x="6753" fg:w="254"/><text x="67.2241%" y="223.50">fe..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.42%)</title><rect x="69.4932%" y="229" width="0.4165%" height="15" fill="rgb(238,154,13)" fg:x="7007" fg:w="42"/><text x="69.7432%" y="239.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::forward (1,826 samples, 18.11%)</title><rect x="51.8199%" y="245" width="18.1097%" height="15" fill="rgb(219,56,2)" fg:x="5225" fg:w="1826"/><text x="52.0699%" y="255.50">fekan`fekan::kan_layer::edge..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.02%)</title><rect x="69.9097%" y="229" width="0.0198%" height="15" fill="rgb(233,0,4)" fg:x="7049" fg:w="2"/><text x="70.1597%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="69.9097%" y="213" width="0.0198%" height="15" fill="rgb(235,30,7)" fg:x="7049" fg:w="2"/><text x="70.1597%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::basis_cached (47 samples, 0.47%)</title><rect x="69.9296%" y="245" width="0.4661%" height="15" fill="rgb(250,79,13)" fg:x="7051" fg:w="47"/><text x="70.1796%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="70.3957%" y="245" width="0.0397%" height="15" fill="rgb(211,146,34)" fg:x="7098" fg:w="4"/><text x="70.6457%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.07%)</title><rect x="70.4453%" y="245" width="0.0694%" height="15" fill="rgb(228,22,38)" fg:x="7103" fg:w="7"/><text x="70.6953%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.03%)</title><rect x="70.4850%" y="229" width="0.0298%" height="15" fill="rgb(235,168,5)" fg:x="7107" fg:w="3"/><text x="70.7350%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.11%)</title><rect x="70.5147%" y="245" width="0.1091%" height="15" fill="rgb(221,155,16)" fg:x="7110" fg:w="11"/><text x="70.7647%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.02%)</title><rect x="70.6337%" y="245" width="0.0198%" height="15" fill="rgb(215,215,53)" fg:x="7122" fg:w="2"/><text x="70.8837%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (1,916 samples, 19.00%)</title><rect x="51.6612%" y="261" width="19.0023%" height="15" fill="rgb(223,4,10)" fg:x="5209" fg:w="1916"/><text x="51.9112%" y="271.50">fekan`fekan::kan_layer::KanLay..</text></g><g><title>fekan`fekan::kan::Kan::forward (1,918 samples, 19.02%)</title><rect x="51.6513%" y="277" width="19.0221%" height="15" fill="rgb(234,103,6)" fg:x="5208" fg:w="1918"/><text x="51.9013%" y="287.50">fekan`fekan::kan::Kan::forward</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.02%)</title><rect x="70.7627%" y="181" width="0.0198%" height="15" fill="rgb(227,97,0)" fg:x="7135" fg:w="2"/><text x="71.0127%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.02%)</title><rect x="70.7627%" y="165" width="0.0198%" height="15" fill="rgb(234,150,53)" fg:x="7135" fg:w="2"/><text x="71.0127%" y="175.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (5 samples, 0.05%)</title><rect x="70.7528%" y="229" width="0.0496%" height="15" fill="rgb(228,201,54)" fg:x="7134" fg:w="5"/><text x="71.0028%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 0.05%)</title><rect x="70.7528%" y="213" width="0.0496%" height="15" fill="rgb(222,22,37)" fg:x="7134" fg:w="5"/><text x="71.0028%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 0.05%)</title><rect x="70.7528%" y="197" width="0.0496%" height="15" fill="rgb(237,53,32)" fg:x="7134" fg:w="5"/><text x="71.0028%" y="207.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.06%)</title><rect x="70.7528%" y="245" width="0.0595%" height="15" fill="rgb(233,25,53)" fg:x="7134" fg:w="6"/><text x="71.0028%" y="255.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (2 samples, 0.02%)</title><rect x="71.0602%" y="181" width="0.0198%" height="15" fill="rgb(210,40,34)" fg:x="7165" fg:w="2"/><text x="71.3102%" y="191.50"></text></g><g><title>fekan`core::slice::sort::shared::smallsort::sort8_stable (3 samples, 0.03%)</title><rect x="71.1495%" y="165" width="0.0298%" height="15" fill="rgb(241,220,44)" fg:x="7174" fg:w="3"/><text x="71.3995%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (36 samples, 0.36%)</title><rect x="70.8420%" y="213" width="0.3570%" height="15" fill="rgb(235,28,35)" fg:x="7143" fg:w="36"/><text x="71.0920%" y="223.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (25 samples, 0.25%)</title><rect x="70.9511%" y="197" width="0.2479%" height="15" fill="rgb(210,56,17)" fg:x="7154" fg:w="25"/><text x="71.2011%" y="207.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (12 samples, 0.12%)</title><rect x="71.0800%" y="181" width="0.1190%" height="15" fill="rgb(224,130,29)" fg:x="7167" fg:w="12"/><text x="71.3300%" y="191.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (2 samples, 0.02%)</title><rect x="71.1792%" y="165" width="0.0198%" height="15" fill="rgb(235,212,8)" fg:x="7177" fg:w="2"/><text x="71.4292%" y="175.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (42 samples, 0.42%)</title><rect x="70.8123%" y="245" width="0.4165%" height="15" fill="rgb(223,33,50)" fg:x="7140" fg:w="42"/><text x="71.0623%" y="255.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (42 samples, 0.42%)</title><rect x="70.8123%" y="229" width="0.4165%" height="15" fill="rgb(219,149,13)" fg:x="7140" fg:w="42"/><text x="71.0623%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="71.1990%" y="213" width="0.0298%" height="15" fill="rgb(250,156,29)" fg:x="7179" fg:w="3"/><text x="71.4490%" y="223.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="71.2784%" y="213" width="0.0198%" height="15" fill="rgb(216,193,19)" fg:x="7187" fg:w="2"/><text x="71.5284%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.02%)</title><rect x="71.2784%" y="197" width="0.0198%" height="15" fill="rgb(216,135,14)" fg:x="7187" fg:w="2"/><text x="71.5284%" y="207.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4 samples, 0.04%)</title><rect x="71.2784%" y="229" width="0.0397%" height="15" fill="rgb(241,47,5)" fg:x="7187" fg:w="4"/><text x="71.5284%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.02%)</title><rect x="71.2982%" y="213" width="0.0198%" height="15" fill="rgb(233,42,35)" fg:x="7189" fg:w="2"/><text x="71.5482%" y="223.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::update_knots_from_samples (11 samples, 0.11%)</title><rect x="71.2288%" y="245" width="0.1091%" height="15" fill="rgb(231,13,6)" fg:x="7182" fg:w="11"/><text x="71.4788%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="71.3379%" y="245" width="0.0298%" height="15" fill="rgb(207,181,40)" fg:x="7193" fg:w="3"/><text x="71.5879%" y="255.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (185 samples, 1.83%)</title><rect x="70.6734%" y="277" width="1.8348%" height="15" fill="rgb(254,173,49)" fg:x="7126" fg:w="185"/><text x="70.9234%" y="287.50">f..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (184 samples, 1.82%)</title><rect x="70.6833%" y="261" width="1.8249%" height="15" fill="rgb(221,1,38)" fg:x="7127" fg:w="184"/><text x="70.9333%" y="271.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memset (115 samples, 1.14%)</title><rect x="71.3676%" y="245" width="1.1405%" height="15" fill="rgb(206,124,46)" fg:x="7196" fg:w="115"/><text x="71.6176%" y="255.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (19 samples, 0.19%)</title><rect x="72.5082%" y="277" width="0.1884%" height="15" fill="rgb(249,21,11)" fg:x="7311" fg:w="19"/><text x="72.7582%" y="287.50"></text></g><g><title>fekan`DYLD-STUB$$cbrt (12 samples, 0.12%)</title><rect x="78.9448%" y="261" width="0.1190%" height="15" fill="rgb(222,201,40)" fg:x="7960" fg:w="12"/><text x="79.1948%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$exp (7 samples, 0.07%)</title><rect x="79.0638%" y="261" width="0.0694%" height="15" fill="rgb(235,61,29)" fg:x="7972" fg:w="7"/><text x="79.3138%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$log (6 samples, 0.06%)</title><rect x="79.1332%" y="261" width="0.0595%" height="15" fill="rgb(219,207,3)" fg:x="7979" fg:w="6"/><text x="79.3832%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$pow (14 samples, 0.14%)</title><rect x="79.1927%" y="261" width="0.1388%" height="15" fill="rgb(222,56,46)" fg:x="7985" fg:w="14"/><text x="79.4427%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$sin (7 samples, 0.07%)</title><rect x="79.3315%" y="261" width="0.0694%" height="15" fill="rgb(239,76,54)" fg:x="7999" fg:w="7"/><text x="79.5815%" y="271.50"></text></g><g><title>fekan`DYLD-STUB$$tan (7 samples, 0.07%)</title><rect x="79.4010%" y="261" width="0.0694%" height="15" fill="rgb(231,124,27)" fg:x="8006" fg:w="7"/><text x="79.6510%" y="271.50"></text></g><g><title>fekan`__rdl_alloc (2 samples, 0.02%)</title><rect x="79.4704%" y="261" width="0.0198%" height="15" fill="rgb(249,195,6)" fg:x="8013" fg:w="2"/><text x="79.7204%" y="271.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bbe4 (17 samples, 0.17%)</title><rect x="85.0541%" y="245" width="0.1686%" height="15" fill="rgb(237,174,47)" fg:x="8576" fg:w="17"/><text x="85.3041%" y="255.50"></text></g><g><title>libsystem_m.dylib`0x00000001a728bcfc (27 samples, 0.27%)</title><rect x="85.2227%" y="245" width="0.2678%" height="15" fill="rgb(206,201,31)" fg:x="8593" fg:w="27"/><text x="85.4727%" y="255.50"></text></g><g><title>libsystem_m.dylib`cbrt (66 samples, 0.65%)</title><rect x="85.4904%" y="245" width="0.6546%" height="15" fill="rgb(231,57,52)" fg:x="8620" fg:w="66"/><text x="85.7404%" y="255.50"></text></g><g><title>libsystem_m.dylib`exp (68 samples, 0.67%)</title><rect x="86.1450%" y="245" width="0.6744%" height="15" fill="rgb(248,177,22)" fg:x="8686" fg:w="68"/><text x="86.3950%" y="255.50"></text></g><g><title>libsystem_m.dylib`log (89 samples, 0.88%)</title><rect x="86.8194%" y="245" width="0.8827%" height="15" fill="rgb(215,211,37)" fg:x="8754" fg:w="89"/><text x="87.0694%" y="255.50"></text></g><g><title>libsystem_m.dylib`pow (540 samples, 5.36%)</title><rect x="87.7021%" y="245" width="5.3555%" height="15" fill="rgb(241,128,51)" fg:x="8843" fg:w="540"/><text x="87.9521%" y="255.50">libsyst..</text></g><g><title>libsystem_m.dylib`sin (57 samples, 0.57%)</title><rect x="93.0576%" y="245" width="0.5653%" height="15" fill="rgb(227,165,31)" fg:x="9383" fg:w="57"/><text x="93.3076%" y="255.50"></text></g><g><title>libsystem_m.dylib`tan (149 samples, 1.48%)</title><rect x="93.6229%" y="245" width="1.4777%" height="15" fill="rgb(228,167,24)" fg:x="9440" fg:w="149"/><text x="93.8729%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (9 samples, 0.09%)</title><rect x="95.1503%" y="229" width="0.0893%" height="15" fill="rgb(228,143,12)" fg:x="9594" fg:w="9"/><text x="95.4003%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.03%)</title><rect x="95.2395%" y="229" width="0.0298%" height="15" fill="rgb(249,149,8)" fg:x="9603" fg:w="3"/><text x="95.4895%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (7 samples, 0.07%)</title><rect x="95.4379%" y="213" width="0.0694%" height="15" fill="rgb(243,35,44)" fg:x="9623" fg:w="7"/><text x="95.6879%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (11 samples, 0.11%)</title><rect x="95.7651%" y="197" width="0.1091%" height="15" fill="rgb(246,89,9)" fg:x="9656" fg:w="11"/><text x="96.0151%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (83 samples, 0.82%)</title><rect x="95.1007%" y="245" width="0.8232%" height="15" fill="rgb(233,213,13)" fg:x="9589" fg:w="83"/><text x="95.3507%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (66 samples, 0.65%)</title><rect x="95.2693%" y="229" width="0.6546%" height="15" fill="rgb(233,141,41)" fg:x="9606" fg:w="66"/><text x="95.5193%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (42 samples, 0.42%)</title><rect x="95.5073%" y="213" width="0.4165%" height="15" fill="rgb(239,167,4)" fg:x="9630" fg:w="42"/><text x="95.7573%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5 samples, 0.05%)</title><rect x="95.8742%" y="197" width="0.0496%" height="15" fill="rgb(209,217,16)" fg:x="9667" fg:w="5"/><text x="96.1242%" y="207.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::infer (1,659 samples, 16.45%)</title><rect x="79.4902%" y="261" width="16.4534%" height="15" fill="rgb(219,88,35)" fg:x="8015" fg:w="1659"/><text x="79.7402%" y="271.50">fekan`fekan::kan_layer::e..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.02%)</title><rect x="95.9238%" y="245" width="0.0198%" height="15" fill="rgb(220,193,23)" fg:x="9672" fg:w="2"/><text x="96.1738%" y="255.50"></text></g><g><title>libsystem_m.dylib`cbrt (23 samples, 0.23%)</title><rect x="95.9536%" y="261" width="0.2281%" height="15" fill="rgb(230,90,52)" fg:x="9675" fg:w="23"/><text x="96.2036%" y="271.50"></text></g><g><title>libsystem_m.dylib`exp (2 samples, 0.02%)</title><rect x="96.1817%" y="261" width="0.0198%" height="15" fill="rgb(252,106,19)" fg:x="9698" fg:w="2"/><text x="96.4317%" y="271.50"></text></g><g><title>libsystem_m.dylib`log (6 samples, 0.06%)</title><rect x="96.2015%" y="261" width="0.0595%" height="15" fill="rgb(206,74,20)" fg:x="9700" fg:w="6"/><text x="96.4515%" y="271.50"></text></g><g><title>libsystem_m.dylib`sin (5 samples, 0.05%)</title><rect x="96.2710%" y="261" width="0.0496%" height="15" fill="rgb(230,138,44)" fg:x="9707" fg:w="5"/><text x="96.5210%" y="271.50"></text></g><g><title>libsystem_m.dylib`tan (24 samples, 0.24%)</title><rect x="96.3205%" y="261" width="0.2380%" height="15" fill="rgb(235,182,43)" fg:x="9712" fg:w="24"/><text x="96.5705%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.07%)</title><rect x="96.5685%" y="261" width="0.0694%" height="15" fill="rgb(242,16,51)" fg:x="9737" fg:w="7"/><text x="96.8185%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (8 samples, 0.08%)</title><rect x="96.6379%" y="261" width="0.0793%" height="15" fill="rgb(248,9,4)" fg:x="9744" fg:w="8"/><text x="96.8879%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (3 samples, 0.03%)</title><rect x="97.3321%" y="245" width="0.0298%" height="15" fill="rgb(210,31,22)" fg:x="9814" fg:w="3"/><text x="97.5821%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (19 samples, 0.19%)</title><rect x="98.5421%" y="229" width="0.1884%" height="15" fill="rgb(239,54,39)" fg:x="9936" fg:w="19"/><text x="98.7921%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (219 samples, 2.17%)</title><rect x="96.7172%" y="261" width="2.1720%" height="15" fill="rgb(230,99,41)" fg:x="9752" fg:w="219"/><text x="96.9672%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (152 samples, 1.51%)</title><rect x="97.3817%" y="245" width="1.5075%" height="15" fill="rgb(253,106,12)" fg:x="9819" fg:w="152"/><text x="97.6317%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (16 samples, 0.16%)</title><rect x="98.7305%" y="229" width="0.1587%" height="15" fill="rgb(213,46,41)" fg:x="9955" fg:w="16"/><text x="98.9805%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.10%)</title><rect x="98.9091%" y="261" width="0.0992%" height="15" fill="rgb(215,133,35)" fg:x="9973" fg:w="10"/><text x="99.1591%" y="271.50"></text></g><g><title>fekan`fekan::kan_layer::edge::Edge::parameter_search (2,680 samples, 26.58%)</title><rect x="72.6966%" y="277" width="26.5794%" height="15" fill="rgb(213,28,5)" fg:x="7330" fg:w="2680"/><text x="72.9466%" y="287.50">fekan`fekan::kan_layer::edge::Edge::paramet..</text></g><g><title>libsystem_platform.dylib`_platform_memset (27 samples, 0.27%)</title><rect x="99.0082%" y="261" width="0.2678%" height="15" fill="rgb(215,77,49)" fg:x="9983" fg:w="27"/><text x="99.2582%" y="271.50"></text></g><g><title>fekan`indicatif::progress_bar::TickerControl::run (2 samples, 0.02%)</title><rect x="99.2760%" y="277" width="0.0198%" height="15" fill="rgb(248,100,22)" fg:x="10010" fg:w="2"/><text x="99.5260%" y="287.50"></text></g><g><title>fekan`std::sync::condvar::Condvar::wait_timeout_while (2 samples, 0.02%)</title><rect x="99.2760%" y="261" width="0.0198%" height="15" fill="rgb(208,67,9)" fg:x="10010" fg:w="2"/><text x="99.5260%" y="271.50"></text></g><g><title>fekan`std::sys::sync::condvar::pthread::Condvar::wait_timeout (2 samples, 0.02%)</title><rect x="99.2760%" y="245" width="0.0198%" height="15" fill="rgb(219,133,21)" fg:x="10010" fg:w="2"/><text x="99.5260%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2 samples, 0.02%)</title><rect x="99.2760%" y="229" width="0.0198%" height="15" fill="rgb(246,46,29)" fg:x="10010" fg:w="2"/><text x="99.5260%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_free (21 samples, 0.21%)</title><rect x="99.3058%" y="277" width="0.2083%" height="15" fill="rgb(246,185,52)" fg:x="10013" fg:w="21"/><text x="99.5558%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.04%)</title><rect x="99.5140%" y="277" width="0.0397%" height="15" fill="rgb(252,136,11)" fg:x="10034" fg:w="4"/><text x="99.7640%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (17 samples, 0.17%)</title><rect x="99.5537%" y="277" width="0.1686%" height="15" fill="rgb(219,138,53)" fg:x="10038" fg:w="17"/><text x="99.8037%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.03%)</title><rect x="99.7223%" y="277" width="0.0298%" height="15" fill="rgb(211,51,23)" fg:x="10055" fg:w="3"/><text x="99.9723%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.07%)</title><rect x="99.7521%" y="277" width="0.0694%" height="15" fill="rgb(247,221,28)" fg:x="10058" fg:w="7"/><text x="100.0021%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.04%)</title><rect x="99.8215%" y="277" width="0.0397%" height="15" fill="rgb(251,222,45)" fg:x="10065" fg:w="4"/><text x="100.0715%" y="287.50"></text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (5,914 samples, 58.65%)</title><rect x="41.2377%" y="293" width="58.6532%" height="15" fill="rgb(217,162,53)" fg:x="4158" fg:w="5914"/><text x="41.4877%" y="303.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.03%)</title><rect x="99.8612%" y="277" width="0.0298%" height="15" fill="rgb(229,93,14)" fg:x="10069" fg:w="3"/><text x="100.1112%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_free (8 samples, 0.08%)</title><rect x="99.8909%" y="293" width="0.0793%" height="15" fill="rgb(209,67,49)" fg:x="10072" fg:w="8"/><text x="100.1409%" y="303.50"></text></g><g><title>fekan`std::sys::pal::unix::thread::Thread::new::thread_start (5,923 samples, 58.74%)</title><rect x="41.2377%" y="325" width="58.7424%" height="15" fill="rgb(213,87,29)" fg:x="4158" fg:w="5923"/><text x="41.4877%" y="335.50">fekan`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>fekan`core::ops::function::FnOnce::call_once{{vtable.shim}} (5,923 samples, 58.74%)</title><rect x="41.2377%" y="309" width="58.7424%" height="15" fill="rgb(205,151,52)" fg:x="4158" fg:w="5923"/><text x="41.4877%" y="319.50">fekan`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>all (10,083 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(253,215,39)" fg:x="0" fg:w="10083"/><text x="0.2500%" y="383.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (5,925 samples, 58.76%)</title><rect x="41.2377%" y="357" width="58.7623%" height="15" fill="rgb(221,220,41)" fg:x="4158" fg:w="5925"/><text x="41.4877%" y="367.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (5,925 samples, 58.76%)</title><rect x="41.2377%" y="341" width="58.7623%" height="15" fill="rgb(218,133,21)" fg:x="4158" fg:w="5925"/><text x="41.4877%" y="351.50">libsystem_pthread.dylib`_pthread_start</text></g></svg></svg>