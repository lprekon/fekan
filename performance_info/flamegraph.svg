<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="1826912"><g><title>fekan`DYLD-STUB$$bzero (520 samples, 0.03%)</title><rect x="0.0082%" y="181" width="0.0285%" height="15" fill="rgb(227,0,7)" fg:x="150" fg:w="520"/><text x="0.2582%" y="191.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (8,360 samples, 0.46%)</title><rect x="0.0875%" y="133" width="0.4576%" height="15" fill="rgb(217,0,24)" fg:x="1599" fg:w="8360"/><text x="0.3375%" y="143.50"></text></g><g><title>fekan`DYLD-STUB$$free (2,620 samples, 0.14%)</title><rect x="1.2622%" y="117" width="0.1434%" height="15" fill="rgb(221,193,54)" fg:x="23060" fg:w="2620"/><text x="1.5122%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (1,909 samples, 0.10%)</title><rect x="1.4057%" y="117" width="0.1045%" height="15" fill="rgb(248,212,6)" fg:x="25680" fg:w="1909"/><text x="1.6557%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$memcmp (2,333 samples, 0.13%)</title><rect x="1.5101%" y="117" width="0.1277%" height="15" fill="rgb(208,68,35)" fg:x="27589" fg:w="2333"/><text x="1.7601%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_lock (2,975 samples, 0.16%)</title><rect x="1.6378%" y="117" width="0.1628%" height="15" fill="rgb(232,128,0)" fg:x="29922" fg:w="2975"/><text x="1.8878%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_unlock (3,464 samples, 0.19%)</title><rect x="1.8007%" y="117" width="0.1896%" height="15" fill="rgb(207,160,47)" fg:x="32897" fg:w="3464"/><text x="2.0507%" y="127.50"></text></g><g><title>fekan`__rdl_alloc (3,835 samples, 0.21%)</title><rect x="1.9903%" y="117" width="0.2099%" height="15" fill="rgb(228,23,34)" fg:x="36361" fg:w="3835"/><text x="2.2403%" y="127.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (14,733 samples, 0.81%)</title><rect x="2.2023%" y="117" width="0.8064%" height="15" fill="rgb(218,30,26)" fg:x="40234" fg:w="14733"/><text x="2.4523%" y="127.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (112,316 samples, 6.15%)</title><rect x="12.6407%" y="101" width="6.1479%" height="15" fill="rgb(220,122,19)" fg:x="230935" fg:w="112316"/><text x="12.8907%" y="111.50">fekan`&lt;s..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (27,194 samples, 1.49%)</title><rect x="18.7886%" y="101" width="1.4885%" height="15" fill="rgb(250,228,42)" fg:x="343251" fg:w="27194"/><text x="19.0386%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2,128 samples, 0.12%)</title><rect x="20.2771%" y="101" width="0.1165%" height="15" fill="rgb(240,193,28)" fg:x="370445" fg:w="2128"/><text x="20.5271%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (30,502 samples, 1.67%)</title><rect x="20.3936%" y="101" width="1.6696%" height="15" fill="rgb(216,20,37)" fg:x="372573" fg:w="30502"/><text x="20.6436%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1,568 samples, 0.09%)</title><rect x="22.0634%" y="101" width="0.0858%" height="15" fill="rgb(206,188,39)" fg:x="403078" fg:w="1568"/><text x="22.3134%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13,440 samples, 0.74%)</title><rect x="22.1492%" y="101" width="0.7357%" height="15" fill="rgb(217,207,13)" fg:x="404646" fg:w="13440"/><text x="22.3992%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (106,452 samples, 5.83%)</title><rect x="22.8848%" y="101" width="5.8269%" height="15" fill="rgb(231,73,38)" fg:x="418086" fg:w="106452"/><text x="23.1348%" y="111.50">libsyst..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (485,792 samples, 26.59%)</title><rect x="3.0087%" y="117" width="26.5909%" height="15" fill="rgb(225,20,46)" fg:x="54967" fg:w="485792"/><text x="3.2587%" y="127.50">fekan`fekan::kan::kan_layer::spline::Spline..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (16,221 samples, 0.89%)</title><rect x="28.7117%" y="101" width="0.8879%" height="15" fill="rgb(210,31,41)" fg:x="524538" fg:w="16221"/><text x="28.9617%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (19,411 samples, 1.06%)</title><rect x="29.5996%" y="117" width="1.0625%" height="15" fill="rgb(221,200,47)" fg:x="540759" fg:w="19411"/><text x="29.8496%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (18,221 samples, 1.00%)</title><rect x="30.6621%" y="117" width="0.9974%" height="15" fill="rgb(226,26,5)" fg:x="560170" fg:w="18221"/><text x="30.9121%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5,800 samples, 0.32%)</title><rect x="31.6595%" y="117" width="0.3175%" height="15" fill="rgb(249,33,26)" fg:x="578391" fg:w="5800"/><text x="31.9095%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (217 samples, 0.01%)</title><rect x="31.9770%" y="117" width="0.0119%" height="15" fill="rgb(235,183,28)" fg:x="584191" fg:w="217"/><text x="32.2270%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (28,953 samples, 1.58%)</title><rect x="31.9902%" y="117" width="1.5848%" height="15" fill="rgb(221,5,38)" fg:x="584433" fg:w="28953"/><text x="32.2402%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (28,491 samples, 1.56%)</title><rect x="33.5751%" y="117" width="1.5595%" height="15" fill="rgb(247,18,42)" fg:x="613387" fg:w="28491"/><text x="33.8251%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5,335 samples, 0.29%)</title><rect x="35.1346%" y="117" width="0.2920%" height="15" fill="rgb(241,131,45)" fg:x="641878" fg:w="5335"/><text x="35.3846%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (637,284 samples, 34.88%)</title><rect x="0.5451%" y="133" width="34.8831%" height="15" fill="rgb(249,31,29)" fg:x="9959" fg:w="637284"/><text x="0.7951%" y="143.50">fekan`fekan::kan::kan_layer::spline::Spline::backward</text></g><g><title>fekan`fekan::kan::kan_layer::node::Node::backward (646,365 samples, 35.38%)</title><rect x="0.0568%" y="149" width="35.3802%" height="15" fill="rgb(225,111,53)" fg:x="1038" fg:w="646365"/><text x="0.3068%" y="159.50">fekan`fekan::kan::kan_layer::node::Node::backward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (1,567 samples, 0.09%)</title><rect x="35.4370%" y="149" width="0.0858%" height="15" fill="rgb(238,160,17)" fg:x="647403" fg:w="1567"/><text x="35.6870%" y="159.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::backward (648,518 samples, 35.50%)</title><rect x="0.0430%" y="165" width="35.4980%" height="15" fill="rgb(214,148,48)" fg:x="786" fg:w="648518"/><text x="0.2930%" y="175.50">fekan`fekan::kan::kan_layer::KanLayer::backward</text></g><g><title>fekan`fekan::kan::Kan::backward (648,584 samples, 35.50%)</title><rect x="0.0426%" y="181" width="35.5017%" height="15" fill="rgb(232,36,49)" fg:x="778" fg:w="648584"/><text x="0.2926%" y="191.50">fekan`fekan::kan::Kan::backward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (3,653 samples, 0.20%)</title><rect x="35.5647%" y="133" width="0.2000%" height="15" fill="rgb(209,103,24)" fg:x="649736" fg:w="3653"/><text x="35.8147%" y="143.50"></text></g><g><title>fekan`DYLD-STUB$$free (1,269 samples, 0.07%)</title><rect x="36.4271%" y="117" width="0.0695%" height="15" fill="rgb(229,88,8)" fg:x="665491" fg:w="1269"/><text x="36.6771%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$malloc (1,047 samples, 0.06%)</title><rect x="36.4966%" y="117" width="0.0573%" height="15" fill="rgb(213,181,19)" fg:x="666760" fg:w="1047"/><text x="36.7466%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$memcmp (1,183 samples, 0.06%)</title><rect x="36.5539%" y="117" width="0.0648%" height="15" fill="rgb(254,191,54)" fg:x="667807" fg:w="1183"/><text x="36.8039%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_lock (1,282 samples, 0.07%)</title><rect x="36.6186%" y="117" width="0.0702%" height="15" fill="rgb(241,83,37)" fg:x="668990" fg:w="1282"/><text x="36.8686%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_unlock (1,909 samples, 0.10%)</title><rect x="36.6888%" y="117" width="0.1045%" height="15" fill="rgb(233,36,39)" fg:x="670272" fg:w="1909"/><text x="36.9388%" y="127.50"></text></g><g><title>fekan`__rdl_alloc (1,543 samples, 0.08%)</title><rect x="36.7933%" y="117" width="0.0845%" height="15" fill="rgb(226,3,54)" fg:x="672181" fg:w="1543"/><text x="37.0433%" y="127.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (6,917 samples, 0.38%)</title><rect x="36.8790%" y="117" width="0.3786%" height="15" fill="rgb(245,192,40)" fg:x="673746" fg:w="6917"/><text x="37.1290%" y="127.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (62,385 samples, 3.41%)</title><rect x="42.4742%" y="101" width="3.4148%" height="15" fill="rgb(238,167,29)" fg:x="775967" fg:w="62385"/><text x="42.7242%" y="111.50">fek..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (27,123 samples, 1.48%)</title><rect x="45.8993%" y="101" width="1.4846%" height="15" fill="rgb(232,182,51)" fg:x="838539" fg:w="27123"/><text x="46.1493%" y="111.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,459 samples, 0.19%)</title><rect x="47.8399%" y="85" width="0.1893%" height="15" fill="rgb(231,60,39)" fg:x="873992" fg:w="3459"/><text x="48.0899%" y="95.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (592 samples, 0.03%)</title><rect x="48.0381%" y="85" width="0.0324%" height="15" fill="rgb(208,69,12)" fg:x="877613" fg:w="592"/><text x="48.2881%" y="95.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,730 samples, 0.20%)</title><rect x="48.6058%" y="69" width="0.2042%" height="15" fill="rgb(235,93,37)" fg:x="887985" fg:w="3730"/><text x="48.8558%" y="79.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (1,084 samples, 0.06%)</title><rect x="48.8182%" y="69" width="0.0593%" height="15" fill="rgb(213,116,39)" fg:x="891866" fg:w="1084"/><text x="49.0682%" y="79.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4,394 samples, 0.24%)</title><rect x="49.4790%" y="53" width="0.2405%" height="15" fill="rgb(222,207,29)" fg:x="903937" fg:w="4394"/><text x="49.7290%" y="63.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (770 samples, 0.04%)</title><rect x="49.7195%" y="53" width="0.0421%" height="15" fill="rgb(206,96,30)" fg:x="908332" fg:w="770"/><text x="49.9695%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (441 samples, 0.02%)</title><rect x="49.7624%" y="53" width="0.0241%" height="15" fill="rgb(218,138,4)" fg:x="909115" fg:w="441"/><text x="50.0124%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (874 samples, 0.05%)</title><rect x="49.7866%" y="53" width="0.0478%" height="15" fill="rgb(250,191,14)" fg:x="909557" fg:w="874"/><text x="50.0366%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (735 samples, 0.04%)</title><rect x="49.7942%" y="37" width="0.0402%" height="15" fill="rgb(239,60,40)" fg:x="909696" fg:w="735"/><text x="50.0442%" y="47.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (17,974 samples, 0.98%)</title><rect x="48.8776%" y="69" width="0.9838%" height="15" fill="rgb(206,27,48)" fg:x="892950" fg:w="17974"/><text x="49.1276%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (199 samples, 0.01%)</title><rect x="49.8505%" y="53" width="0.0109%" height="15" fill="rgb(225,35,8)" fg:x="910725" fg:w="199"/><text x="50.1005%" y="63.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3,948 samples, 0.22%)</title><rect x="54.1636%" y="53" width="0.2161%" height="15" fill="rgb(250,213,24)" fg:x="989522" fg:w="3948"/><text x="54.4136%" y="63.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (82,730 samples, 4.53%)</title><rect x="49.8614%" y="69" width="4.5284%" height="15" fill="rgb(247,123,22)" fg:x="910924" fg:w="82730"/><text x="50.1114%" y="79.50">fekan..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (184 samples, 0.01%)</title><rect x="54.3797%" y="53" width="0.0101%" height="15" fill="rgb(231,138,38)" fg:x="993470" fg:w="184"/><text x="54.6297%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (231 samples, 0.01%)</title><rect x="54.4083%" y="69" width="0.0126%" height="15" fill="rgb(231,145,46)" fg:x="993991" fg:w="231"/><text x="54.6583%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (805 samples, 0.04%)</title><rect x="54.4209%" y="69" width="0.0441%" height="15" fill="rgb(251,118,11)" fg:x="994222" fg:w="805"/><text x="54.6709%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (679 samples, 0.04%)</title><rect x="54.4278%" y="53" width="0.0372%" height="15" fill="rgb(217,147,25)" fg:x="994348" fg:w="679"/><text x="54.6778%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (275 samples, 0.02%)</title><rect x="54.4650%" y="69" width="0.0151%" height="15" fill="rgb(247,81,37)" fg:x="995027" fg:w="275"/><text x="54.7150%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (241 samples, 0.01%)</title><rect x="54.4825%" y="69" width="0.0132%" height="15" fill="rgb(209,12,38)" fg:x="995347" fg:w="241"/><text x="54.7325%" y="79.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (117,626 samples, 6.44%)</title><rect x="48.0705%" y="85" width="6.4385%" height="15" fill="rgb(227,1,9)" fg:x="878205" fg:w="117626"/><text x="48.3205%" y="95.50">fekan`fe..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (243 samples, 0.01%)</title><rect x="54.4957%" y="69" width="0.0133%" height="15" fill="rgb(248,47,43)" fg:x="995588" fg:w="243"/><text x="54.7457%" y="79.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (527 samples, 0.03%)</title><rect x="58.2011%" y="69" width="0.0288%" height="15" fill="rgb(221,10,30)" fg:x="1063283" fg:w="527"/><text x="58.4511%" y="79.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (5,165 samples, 0.28%)</title><rect x="58.2300%" y="69" width="0.2827%" height="15" fill="rgb(210,229,1)" fg:x="1063810" fg:w="5165"/><text x="58.4800%" y="79.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (294,028 samples, 16.09%)</title><rect x="59.1560%" y="53" width="16.0943%" height="15" fill="rgb(222,148,37)" fg:x="1080728" fg:w="294028"/><text x="59.4060%" y="63.50">fekan`&lt;std::hash::random:..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (8,437 samples, 0.46%)</title><rect x="75.2503%" y="53" width="0.4618%" height="15" fill="rgb(234,67,33)" fg:x="1374756" fg:w="8437"/><text x="75.5003%" y="63.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (314,328 samples, 17.21%)</title><rect x="58.5127%" y="69" width="17.2054%" height="15" fill="rgb(247,98,35)" fg:x="1068975" fg:w="314328"/><text x="58.7627%" y="79.50">fekan`hashbrown::raw::RawTa..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (387,511 samples, 21.21%)</title><rect x="54.5090%" y="85" width="21.2113%" height="15" fill="rgb(247,138,52)" fg:x="995831" fg:w="387511"/><text x="54.7590%" y="95.50">fekan`hashbrown::map::HashMap&lt;K,V..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (651 samples, 0.04%)</title><rect x="75.7408%" y="85" width="0.0356%" height="15" fill="rgb(213,79,30)" fg:x="1383718" fg:w="651"/><text x="75.9908%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (535 samples, 0.03%)</title><rect x="75.7472%" y="69" width="0.0293%" height="15" fill="rgb(246,177,23)" fg:x="1383834" fg:w="535"/><text x="75.9972%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (220 samples, 0.01%)</title><rect x="75.7765%" y="85" width="0.0120%" height="15" fill="rgb(230,62,27)" fg:x="1384370" fg:w="220"/><text x="76.0265%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,983 samples, 0.11%)</title><rect x="75.7887%" y="85" width="0.1085%" height="15" fill="rgb(216,154,8)" fg:x="1384593" fg:w="1983"/><text x="76.0387%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (215 samples, 0.01%)</title><rect x="75.8997%" y="85" width="0.0118%" height="15" fill="rgb(244,35,45)" fg:x="1386621" fg:w="215"/><text x="76.1497%" y="95.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (522,004 samples, 28.57%)</title><rect x="47.3839%" y="101" width="28.5730%" height="15" fill="rgb(251,115,12)" fg:x="865662" fg:w="522004"/><text x="47.6339%" y="111.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (830 samples, 0.05%)</title><rect x="75.9115%" y="85" width="0.0454%" height="15" fill="rgb(240,54,50)" fg:x="1386836" fg:w="830"/><text x="76.1615%" y="95.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (451 samples, 0.02%)</title><rect x="79.0272%" y="85" width="0.0247%" height="15" fill="rgb(233,84,52)" fg:x="1443757" fg:w="451"/><text x="79.2772%" y="95.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (2,608 samples, 0.14%)</title><rect x="79.0519%" y="85" width="0.1428%" height="15" fill="rgb(207,117,47)" fg:x="1444208" fg:w="2608"/><text x="79.3019%" y="95.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (110,600 samples, 6.05%)</title><rect x="79.4628%" y="69" width="6.0539%" height="15" fill="rgb(249,43,39)" fg:x="1451716" fg:w="110600"/><text x="79.7128%" y="79.50">fekan`&lt;s..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (1,575 samples, 0.09%)</title><rect x="85.5168%" y="69" width="0.0862%" height="15" fill="rgb(209,38,44)" fg:x="1562316" fg:w="1575"/><text x="85.7668%" y="79.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (117,228 samples, 6.42%)</title><rect x="79.1946%" y="85" width="6.4167%" height="15" fill="rgb(236,212,23)" fg:x="1446816" fg:w="117228"/><text x="79.4446%" y="95.50">fekan`ha..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (176,390 samples, 9.66%)</title><rect x="75.9569%" y="101" width="9.6551%" height="15" fill="rgb(242,79,21)" fg:x="1387666" fg:w="176390"/><text x="76.2069%" y="111.50">fekan`hashbrow..</text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1,003 samples, 0.05%)</title><rect x="85.6120%" y="101" width="0.0549%" height="15" fill="rgb(211,96,35)" fg:x="1564056" fg:w="1003"/><text x="85.8620%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (15,248 samples, 0.83%)</title><rect x="85.6777%" y="101" width="0.8346%" height="15" fill="rgb(253,215,40)" fg:x="1565256" fg:w="15248"/><text x="85.9277%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (185 samples, 0.01%)</title><rect x="86.5129%" y="101" width="0.0101%" height="15" fill="rgb(211,81,21)" fg:x="1580515" fg:w="185"/><text x="86.7629%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (730 samples, 0.04%)</title><rect x="86.5231%" y="101" width="0.0400%" height="15" fill="rgb(208,190,38)" fg:x="1580700" fg:w="730"/><text x="86.7731%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,629 samples, 0.09%)</title><rect x="86.5630%" y="101" width="0.0892%" height="15" fill="rgb(235,213,38)" fg:x="1581430" fg:w="1629"/><text x="86.8130%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6,454 samples, 0.35%)</title><rect x="86.6522%" y="101" width="0.3533%" height="15" fill="rgb(237,122,38)" fg:x="1583059" fg:w="6454"/><text x="86.9022%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (70,507 samples, 3.86%)</title><rect x="87.0054%" y="101" width="3.8594%" height="15" fill="rgb(244,218,35)" fg:x="1589513" fg:w="70507"/><text x="87.2554%" y="111.50">libs..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (987,838 samples, 54.07%)</title><rect x="37.2576%" y="117" width="54.0715%" height="15" fill="rgb(240,68,47)" fg:x="680663" fg:w="987838"/><text x="37.5076%" y="127.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (8,481 samples, 0.46%)</title><rect x="90.8648%" y="101" width="0.4642%" height="15" fill="rgb(210,16,53)" fg:x="1660020" fg:w="8481"/><text x="91.1148%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (9,269 samples, 0.51%)</title><rect x="91.3330%" y="117" width="0.5074%" height="15" fill="rgb(235,124,12)" fg:x="1668574" fg:w="9269"/><text x="91.5830%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (9,433 samples, 0.52%)</title><rect x="91.8404%" y="117" width="0.5163%" height="15" fill="rgb(224,169,11)" fg:x="1677843" fg:w="9433"/><text x="92.0904%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2,907 samples, 0.16%)</title><rect x="92.3567%" y="117" width="0.1591%" height="15" fill="rgb(250,166,2)" fg:x="1687276" fg:w="2907"/><text x="92.6067%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23,028 samples, 1.26%)</title><rect x="92.5265%" y="117" width="1.2605%" height="15" fill="rgb(242,216,29)" fg:x="1690377" fg:w="23028"/><text x="92.7765%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (16,408 samples, 0.90%)</title><rect x="93.7870%" y="117" width="0.8981%" height="15" fill="rgb(230,116,27)" fg:x="1713406" fg:w="16408"/><text x="94.0370%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (372 samples, 0.02%)</title><rect x="94.6851%" y="117" width="0.0204%" height="15" fill="rgb(228,99,48)" fg:x="1729814" fg:w="372"/><text x="94.9351%" y="127.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,080,804 samples, 59.16%)</title><rect x="35.5468%" y="149" width="59.1602%" height="15" fill="rgb(253,11,6)" fg:x="649409" fg:w="1080804"/><text x="35.7968%" y="159.50">fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::forward (1,076,824 samples, 58.94%)</title><rect x="35.7647%" y="133" width="58.9423%" height="15" fill="rgb(247,143,39)" fg:x="653389" fg:w="1076824"/><text x="36.0147%" y="143.50">fekan`fekan::kan::kan_layer::spline::Spline::forward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::forward (742 samples, 0.04%)</title><rect x="94.7070%" y="149" width="0.0406%" height="15" fill="rgb(236,97,10)" fg:x="1730213" fg:w="742"/><text x="94.9570%" y="159.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::forward (1,081,583 samples, 59.20%)</title><rect x="35.5458%" y="165" width="59.2028%" height="15" fill="rgb(233,208,19)" fg:x="649390" fg:w="1081583"/><text x="35.7958%" y="175.50">fekan`fekan::kan::kan_layer::KanLayer::forward</text></g><g><title>fekan`fekan::kan::Kan::forward (1,081,675 samples, 59.21%)</title><rect x="35.5456%" y="181" width="59.2078%" height="15" fill="rgb(216,164,2)" fg:x="649386" fg:w="1081675"/><text x="35.7956%" y="191.50">fekan`fekan::kan::Kan::forward</text></g><g><title>fekan`fekan::kan::Kan::update (2,712 samples, 0.15%)</title><rect x="94.7534%" y="181" width="0.1484%" height="15" fill="rgb(220,129,5)" fg:x="1731061" fg:w="2712"/><text x="95.0034%" y="191.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (634 samples, 0.03%)</title><rect x="94.9027%" y="133" width="0.0347%" height="15" fill="rgb(242,17,10)" fg:x="1733788" fg:w="634"/><text x="95.1527%" y="143.50"></text></g><g><title>fekan`core::slice::sort::insertion_sort_shift_left (4,090 samples, 0.22%)</title><rect x="95.7731%" y="101" width="0.2239%" height="15" fill="rgb(242,107,0)" fg:x="1749691" fg:w="4090"/><text x="96.0231%" y="111.50"></text></g><g><title>fekan`core::slice::sort::merge_sort (18,951 samples, 1.04%)</title><rect x="94.9622%" y="117" width="1.0373%" height="15" fill="rgb(251,28,31)" fg:x="1734875" fg:w="18951"/><text x="95.2122%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (253 samples, 0.01%)</title><rect x="96.0015%" y="117" width="0.0138%" height="15" fill="rgb(233,223,10)" fg:x="1753863" fg:w="253"/><text x="96.2515%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (958 samples, 0.05%)</title><rect x="96.0288%" y="117" width="0.0524%" height="15" fill="rgb(215,21,27)" fg:x="1754361" fg:w="958"/><text x="96.2788%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::update_knots_from_samples (20,902 samples, 1.14%)</title><rect x="94.9408%" y="133" width="1.1441%" height="15" fill="rgb(232,23,21)" fg:x="1734484" fg:w="20902"/><text x="95.1908%" y="143.50"></text></g><g><title>fekan`fekan::kan::kan_layer::node::Node::update_knots_from_samples (21,860 samples, 1.20%)</title><rect x="94.9025%" y="149" width="1.1966%" height="15" fill="rgb(244,5,23)" fg:x="1733786" fg:w="21860"/><text x="95.1525%" y="159.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::update_knots_from_samples (21,878 samples, 1.20%)</title><rect x="94.9018%" y="165" width="1.1975%" height="15" fill="rgb(226,81,46)" fg:x="1733773" fg:w="21878"/><text x="95.1518%" y="175.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (21,879 samples, 1.20%)</title><rect x="94.9018%" y="181" width="1.1976%" height="15" fill="rgb(247,70,30)" fg:x="1733773" fg:w="21879"/><text x="95.1518%" y="191.50"></text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (883 samples, 0.05%)</title><rect x="96.0994%" y="181" width="0.0483%" height="15" fill="rgb(212,68,19)" fg:x="1755652" fg:w="883"/><text x="96.3494%" y="191.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (364 samples, 0.02%)</title><rect x="96.1564%" y="117" width="0.0199%" height="15" fill="rgb(240,187,13)" fg:x="1756693" fg:w="364"/><text x="96.4064%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$pthread_mutex_unlock (201 samples, 0.01%)</title><rect x="96.2710%" y="101" width="0.0110%" height="15" fill="rgb(223,113,26)" fg:x="1758786" fg:w="201"/><text x="96.5210%" y="111.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (726 samples, 0.04%)</title><rect x="96.2902%" y="101" width="0.0397%" height="15" fill="rgb(206,192,2)" fg:x="1759138" fg:w="726"/><text x="96.5402%" y="111.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6,390 samples, 0.35%)</title><rect x="96.7715%" y="85" width="0.3498%" height="15" fill="rgb(241,108,4)" fg:x="1767931" fg:w="6390"/><text x="97.0215%" y="95.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (2,753 samples, 0.15%)</title><rect x="97.1225%" y="85" width="0.1507%" height="15" fill="rgb(247,173,49)" fg:x="1774342" fg:w="2753"/><text x="97.3725%" y="95.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (392 samples, 0.02%)</title><rect x="97.3198%" y="69" width="0.0215%" height="15" fill="rgb(224,114,35)" fg:x="1777947" fg:w="392"/><text x="97.5698%" y="79.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (434 samples, 0.02%)</title><rect x="97.3974%" y="53" width="0.0238%" height="15" fill="rgb(245,159,27)" fg:x="1779365" fg:w="434"/><text x="97.6474%" y="63.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (523 samples, 0.03%)</title><rect x="97.4872%" y="37" width="0.0286%" height="15" fill="rgb(245,172,44)" fg:x="1781006" fg:w="523"/><text x="97.7372%" y="47.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (1,827 samples, 0.10%)</title><rect x="97.4292%" y="53" width="0.1000%" height="15" fill="rgb(236,23,11)" fg:x="1779945" fg:w="1827"/><text x="97.6792%" y="63.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (467 samples, 0.03%)</title><rect x="98.0160%" y="37" width="0.0256%" height="15" fill="rgb(205,117,38)" fg:x="1790666" fg:w="467"/><text x="98.2660%" y="47.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (9,378 samples, 0.51%)</title><rect x="97.5292%" y="53" width="0.5133%" height="15" fill="rgb(237,72,25)" fg:x="1781772" fg:w="9378"/><text x="97.7792%" y="63.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (12,926 samples, 0.71%)</title><rect x="97.3453%" y="69" width="0.7075%" height="15" fill="rgb(244,70,9)" fg:x="1778413" fg:w="12926"/><text x="97.5953%" y="79.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7,729 samples, 0.42%)</title><rect x="98.0528%" y="69" width="0.4231%" height="15" fill="rgb(217,125,39)" fg:x="1791339" fg:w="7729"/><text x="98.3028%" y="79.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (22,333 samples, 1.22%)</title><rect x="97.2732%" y="85" width="1.2224%" height="15" fill="rgb(235,36,10)" fg:x="1777095" fg:w="22333"/><text x="97.5232%" y="95.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,367 samples, 0.35%)</title><rect x="98.4956%" y="85" width="0.3485%" height="15" fill="rgb(251,123,47)" fg:x="1799428" fg:w="6367"/><text x="98.7456%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,557 samples, 0.09%)</title><rect x="98.8506%" y="85" width="0.0852%" height="15" fill="rgb(221,13,13)" fg:x="1805913" fg:w="1557"/><text x="99.1006%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (667 samples, 0.04%)</title><rect x="98.9489%" y="85" width="0.0365%" height="15" fill="rgb(238,131,9)" fg:x="1807709" fg:w="667"/><text x="99.1989%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7,102 samples, 0.39%)</title><rect x="98.9854%" y="85" width="0.3887%" height="15" fill="rgb(211,50,8)" fg:x="1808376" fg:w="7102"/><text x="99.2354%" y="95.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (56,458 samples, 3.09%)</title><rect x="96.3300%" y="101" width="3.0904%" height="15" fill="rgb(245,182,24)" fg:x="1759864" fg:w="56458"/><text x="96.5800%" y="111.50">fek..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (844 samples, 0.05%)</title><rect x="99.3741%" y="85" width="0.0462%" height="15" fill="rgb(242,14,37)" fg:x="1815478" fg:w="844"/><text x="99.6241%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_free (914 samples, 0.05%)</title><rect x="99.4208%" y="101" width="0.0500%" height="15" fill="rgb(246,228,12)" fg:x="1816331" fg:w="914"/><text x="99.6708%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (924 samples, 0.05%)</title><rect x="99.4709%" y="101" width="0.0506%" height="15" fill="rgb(213,55,15)" fg:x="1817245" fg:w="924"/><text x="99.7209%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (284 samples, 0.02%)</title><rect x="99.5214%" y="101" width="0.0155%" height="15" fill="rgb(209,9,3)" fg:x="1818169" fg:w="284"/><text x="99.7714%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2,434 samples, 0.13%)</title><rect x="99.5379%" y="101" width="0.1332%" height="15" fill="rgb(230,59,30)" fg:x="1818469" fg:w="2434"/><text x="99.7879%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,443 samples, 0.08%)</title><rect x="99.6711%" y="101" width="0.0790%" height="15" fill="rgb(209,121,21)" fg:x="1820903" fg:w="1443"/><text x="99.9211%" y="111.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::forward (65,339 samples, 3.58%)</title><rect x="96.1763%" y="117" width="3.5765%" height="15" fill="rgb(220,109,13)" fg:x="1757057" fg:w="65339"/><text x="96.4263%" y="127.50">feka..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65,741 samples, 3.60%)</title><rect x="96.1544%" y="133" width="3.5985%" height="15" fill="rgb(232,18,1)" fg:x="1756656" fg:w="65741"/><text x="96.4044%" y="143.50">feka..</text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::forward (65,829 samples, 3.60%)</title><rect x="96.1542%" y="149" width="3.6033%" height="15" fill="rgb(215,41,42)" fg:x="1756652" fg:w="65829"/><text x="96.4042%" y="159.50">feka..</text></g><g><title>fekan`fekan::kan::Kan::forward (65,840 samples, 3.60%)</title><rect x="96.1541%" y="165" width="3.6039%" height="15" fill="rgb(224,123,36)" fg:x="1756651" fg:w="65840"/><text x="96.4041%" y="175.50">feka..</text></g><g><title>fekan`fekan::validate_model (65,958 samples, 3.61%)</title><rect x="96.1478%" y="181" width="3.6104%" height="15" fill="rgb(240,125,3)" fg:x="1756536" fg:w="65958"/><text x="96.3978%" y="191.50">feka..</text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (245 samples, 0.01%)</title><rect x="99.7612%" y="133" width="0.0134%" height="15" fill="rgb(205,98,50)" fg:x="1822549" fg:w="245"/><text x="100.0112%" y="143.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (282 samples, 0.02%)</title><rect x="99.7755%" y="133" width="0.0154%" height="15" fill="rgb(205,185,37)" fg:x="1822810" fg:w="282"/><text x="100.0255%" y="143.50"></text></g><g><title>fekan`console::unix_term::terminal_size (273 samples, 0.01%)</title><rect x="99.7760%" y="117" width="0.0149%" height="15" fill="rgb(238,207,15)" fg:x="1822819" fg:w="273"/><text x="100.0260%" y="127.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (721 samples, 0.04%)</title><rect x="99.7606%" y="149" width="0.0395%" height="15" fill="rgb(213,199,42)" fg:x="1822539" fg:w="721"/><text x="100.0106%" y="159.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (735 samples, 0.04%)</title><rect x="99.7602%" y="165" width="0.0402%" height="15" fill="rgb(235,201,11)" fg:x="1822531" fg:w="735"/><text x="100.0102%" y="175.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (743 samples, 0.04%)</title><rect x="99.7598%" y="181" width="0.0407%" height="15" fill="rgb(207,46,11)" fg:x="1822524" fg:w="743"/><text x="100.0098%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (266 samples, 0.01%)</title><rect x="99.8041%" y="181" width="0.0146%" height="15" fill="rgb(241,35,35)" fg:x="1823333" fg:w="266"/><text x="100.0541%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2,453 samples, 0.13%)</title><rect x="99.8188%" y="181" width="0.1343%" height="15" fill="rgb(243,32,47)" fg:x="1823601" fg:w="2453"/><text x="100.0688%" y="191.50"></text></g><g><title>fekan`fekan::train_model (1,826,041 samples, 99.95%)</title><rect x="0.0008%" y="197" width="99.9523%" height="15" fill="rgb(247,202,23)" fg:x="14" fg:w="1826041"/><text x="0.2508%" y="207.50">fekan`fekan::train_model</text></g><g><title>dyld`start (1,826,232 samples, 99.96%)</title><rect x="0.0000%" y="293" width="99.9628%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="1826232"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>fekan`main (1,826,232 samples, 99.96%)</title><rect x="0.0000%" y="277" width="99.9628%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="1826232"/><text x="0.2500%" y="287.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (1,826,232 samples, 99.96%)</title><rect x="0.0000%" y="261" width="99.9628%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="1826232"/><text x="0.2500%" y="271.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (1,826,232 samples, 99.96%)</title><rect x="0.0000%" y="245" width="99.9628%" height="15" fill="rgb(216,99,12)" fg:x="0" fg:w="1826232"/><text x="0.2500%" y="255.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys_common::backtrace::__rust_begin_short_backtrace (1,826,232 samples, 99.96%)</title><rect x="0.0000%" y="229" width="99.9628%" height="15" fill="rgb(226,22,26)" fg:x="0" fg:w="1826232"/><text x="0.2500%" y="239.50">fekan`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>fekan`fekan::main (1,826,232 samples, 99.96%)</title><rect x="0.0000%" y="213" width="99.9628%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="1826232"/><text x="0.2500%" y="223.50">fekan`fekan::main</text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (659 samples, 0.04%)</title><rect x="99.9628%" y="293" width="0.0361%" height="15" fill="rgb(213,25,53)" fg:x="1826232" fg:w="659"/><text x="100.2128%" y="303.50"></text></g><g><title>all (1,826,912 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="1826912"/><text x="0.2500%" y="319.50"></text></g></svg></svg>