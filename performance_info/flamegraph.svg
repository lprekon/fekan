<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="6209974"><g><title>fekan`DYLD-STUB$$bzero (9,856 samples, 0.16%)</title><rect x="0.0459%" y="165" width="0.1587%" height="15" fill="rgb(227,0,7)" fg:x="2849" fg:w="9856"/><text x="0.2959%" y="175.50"></text></g><g><title>fekan`fekan::calculate_ce_loss_and_gradient (770 samples, 0.01%)</title><rect x="0.2074%" y="165" width="0.0124%" height="15" fill="rgb(217,0,24)" fg:x="12878" fg:w="770"/><text x="0.4574%" y="175.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (121,089 samples, 1.95%)</title><rect x="0.4382%" y="117" width="1.9499%" height="15" fill="rgb(221,193,54)" fg:x="27212" fg:w="121089"/><text x="0.6882%" y="127.50">f..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (2,424,302 samples, 39.04%)</title><rect x="2.3881%" y="117" width="39.0388%" height="15" fill="rgb(248,212,6)" fg:x="148301" fg:w="2424302"/><text x="2.6381%" y="127.50">fekan`fekan::kan::kan_layer::spline::Spline::backward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (2,196,631 samples, 35.37%)</title><rect x="6.0543%" y="101" width="35.3726%" height="15" fill="rgb(208,68,35)" fg:x="375972" fg:w="2196631"/><text x="6.3043%" y="111.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (1,757,749 samples, 28.31%)</title><rect x="13.1217%" y="85" width="28.3053%" height="15" fill="rgb(232,128,0)" fg:x="814854" fg:w="1757749"/><text x="13.3717%" y="95.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (923,458 samples, 14.87%)</title><rect x="26.5564%" y="69" width="14.8706%" height="15" fill="rgb(207,160,47)" fg:x="1649145" fg:w="923458"/><text x="26.8064%" y="79.50">fekan`fekan::kan::kan_l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,649 samples, 0.03%)</title><rect x="41.4270%" y="117" width="0.0266%" height="15" fill="rgb(228,23,34)" fg:x="2572603" fg:w="1649"/><text x="41.6770%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,374 samples, 0.02%)</title><rect x="41.4314%" y="101" width="0.0221%" height="15" fill="rgb(218,30,26)" fg:x="2572878" fg:w="1374"/><text x="41.6814%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (745 samples, 0.01%)</title><rect x="41.4415%" y="85" width="0.0120%" height="15" fill="rgb(220,122,19)" fg:x="2573507" fg:w="745"/><text x="41.6915%" y="95.50"></text></g><g><title>fekan`fekan::kan::kan_layer::node::Node::backward (2,558,076 samples, 41.19%)</title><rect x="0.2616%" y="133" width="41.1930%" height="15" fill="rgb(250,228,42)" fg:x="16245" fg:w="2558076"/><text x="0.5116%" y="143.50">fekan`fekan::kan::kan_layer::node::Node::backward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (28,020 samples, 0.45%)</title><rect x="41.4546%" y="133" width="0.4512%" height="15" fill="rgb(240,193,28)" fg:x="2574321" fg:w="28020"/><text x="41.7046%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,689 samples, 0.03%)</title><rect x="41.9196%" y="133" width="0.0272%" height="15" fill="rgb(216,20,37)" fg:x="2603198" fg:w="1689"/><text x="42.1696%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,027 samples, 0.02%)</title><rect x="41.9303%" y="117" width="0.0165%" height="15" fill="rgb(206,188,39)" fg:x="2603860" fg:w="1027"/><text x="42.1803%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::backward (2,591,844 samples, 41.74%)</title><rect x="0.2217%" y="149" width="41.7368%" height="15" fill="rgb(217,207,13)" fg:x="13768" fg:w="2591844"/><text x="0.4717%" y="159.50">fekan`fekan::kan::kan_layer::KanLayer::backward</text></g><g><title>fekan`fekan::kan::Kan::backward (2,592,880 samples, 41.75%)</title><rect x="0.2198%" y="165" width="41.7535%" height="15" fill="rgb(231,73,38)" fg:x="13648" fg:w="2592880"/><text x="0.4698%" y="175.50">fekan`fekan::kan::Kan::backward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (62,261 samples, 1.00%)</title><rect x="42.0844%" y="117" width="1.0026%" height="15" fill="rgb(225,20,46)" fg:x="2613430" fg:w="62261"/><text x="42.3344%" y="127.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,691,972 samples, 43.35%)</title><rect x="41.9862%" y="133" width="43.3492%" height="15" fill="rgb(210,31,41)" fg:x="2607333" fg:w="2691972"/><text x="42.2362%" y="143.50">fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::forward (2,623,614 samples, 42.25%)</title><rect x="43.0870%" y="117" width="42.2484%" height="15" fill="rgb(221,200,47)" fg:x="2675691" fg:w="2623614"/><text x="43.3370%" y="127.50">fekan`fekan::kan::kan_layer::spline::Spline::forward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (2,417,497 samples, 38.93%)</title><rect x="46.4061%" y="101" width="38.9293%" height="15" fill="rgb(226,26,5)" fg:x="2881808" fg:w="2417497"/><text x="46.6561%" y="111.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (2,207,780 samples, 35.55%)</title><rect x="49.7832%" y="85" width="35.5522%" height="15" fill="rgb(249,33,26)" fg:x="3091525" fg:w="2207780"/><text x="50.0332%" y="95.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (1,760,377 samples, 28.35%)</title><rect x="56.9878%" y="69" width="28.3476%" height="15" fill="rgb(235,183,28)" fg:x="3538928" fg:w="1760377"/><text x="57.2378%" y="79.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (908,971 samples, 14.64%)</title><rect x="70.6981%" y="53" width="14.6373%" height="15" fill="rgb(221,5,38)" fg:x="4390334" fg:w="908971"/><text x="70.9481%" y="63.50">fekan`fekan::kan::kan_..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::forward (14,740 samples, 0.24%)</title><rect x="85.3355%" y="133" width="0.2374%" height="15" fill="rgb(247,18,42)" fg:x="5299312" fg:w="14740"/><text x="85.5855%" y="143.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::forward (2,707,284 samples, 43.60%)</title><rect x="41.9794%" y="149" width="43.5957%" height="15" fill="rgb(241,131,45)" fg:x="2606909" fg:w="2707284"/><text x="42.2294%" y="159.50">fekan`fekan::kan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (775 samples, 0.01%)</title><rect x="85.5800%" y="117" width="0.0125%" height="15" fill="rgb(249,31,29)" fg:x="5314493" fg:w="775"/><text x="85.8300%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (893 samples, 0.01%)</title><rect x="85.5792%" y="149" width="0.0144%" height="15" fill="rgb(225,111,53)" fg:x="5314449" fg:w="893"/><text x="85.8292%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (875 samples, 0.01%)</title><rect x="85.5795%" y="133" width="0.0141%" height="15" fill="rgb(238,160,17)" fg:x="5314467" fg:w="875"/><text x="85.8295%" y="143.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (2,708,702 samples, 43.62%)</title><rect x="41.9763%" y="165" width="43.6186%" height="15" fill="rgb(214,148,48)" fg:x="2606717" fg:w="2708702"/><text x="42.2263%" y="175.50">fekan`fekan::kan::Kan::forward</text></g><g><title>fekan`fekan::kan::Kan::update (51,159 samples, 0.82%)</title><rect x="85.5949%" y="165" width="0.8238%" height="15" fill="rgb(232,36,49)" fg:x="5315419" fg:w="51159"/><text x="85.8449%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,646 samples, 0.04%)</title><rect x="86.6153%" y="101" width="0.0426%" height="15" fill="rgb(209,103,24)" fg:x="5378787" fg:w="2646"/><text x="86.8653%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2,286 samples, 0.04%)</title><rect x="86.6211%" y="85" width="0.0368%" height="15" fill="rgb(229,88,8)" fg:x="5379147" fg:w="2286"/><text x="86.8711%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,566 samples, 0.03%)</title><rect x="86.6327%" y="69" width="0.0252%" height="15" fill="rgb(213,181,19)" fg:x="5379867" fg:w="1566"/><text x="86.8827%" y="79.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14,730 samples, 0.24%)</title><rect x="86.4222%" y="117" width="0.2372%" height="15" fill="rgb(254,191,54)" fg:x="5366797" fg:w="14730"/><text x="86.6722%" y="127.50"></text></g><g><title>fekan`DYLD-STUB$$memcpy (1,439 samples, 0.02%)</title><rect x="86.7330%" y="101" width="0.0232%" height="15" fill="rgb(241,83,37)" fg:x="5386099" fg:w="1439"/><text x="86.9830%" y="111.50"></text></g><g><title>fekan`DYLD-STUB$$memmove (1,403 samples, 0.02%)</title><rect x="86.7562%" y="101" width="0.0226%" height="15" fill="rgb(233,36,39)" fg:x="5387538" fg:w="1403"/><text x="87.0062%" y="111.50"></text></g><g><title>fekan`core::slice::sort::insertion_sort_shift_left (1,553 samples, 0.03%)</title><rect x="86.7832%" y="101" width="0.0250%" height="15" fill="rgb(226,3,54)" fg:x="5389214" fg:w="1553"/><text x="87.0332%" y="111.50"></text></g><g><title>fekan`core::slice::sort::insertion_sort_shift_left (71,014 samples, 1.14%)</title><rect x="91.7567%" y="85" width="1.1435%" height="15" fill="rgb(245,192,40)" fg:x="5698067" fg:w="71014"/><text x="92.0067%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (755 samples, 0.01%)</title><rect x="92.9008%" y="85" width="0.0122%" height="15" fill="rgb(238,167,29)" fg:x="5769114" fg:w="755"/><text x="93.1508%" y="95.50"></text></g><g><title>fekan`core::slice::sort::merge_sort (379,299 samples, 6.11%)</title><rect x="86.8082%" y="101" width="6.1079%" height="15" fill="rgb(232,182,51)" fg:x="5390767" fg:w="379299"/><text x="87.0582%" y="111.50">fekan`co..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4,443 samples, 0.07%)</title><rect x="92.9323%" y="101" width="0.0715%" height="15" fill="rgb(231,60,39)" fg:x="5771071" fg:w="4443"/><text x="93.1823%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,594 samples, 0.04%)</title><rect x="93.0075%" y="101" width="0.0418%" height="15" fill="rgb(208,69,12)" fg:x="5775742" fg:w="2594"/><text x="93.2575%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,854 samples, 0.03%)</title><rect x="93.0194%" y="85" width="0.0299%" height="15" fill="rgb(235,93,37)" fg:x="5776482" fg:w="1854"/><text x="93.2694%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (901 samples, 0.01%)</title><rect x="93.0493%" y="101" width="0.0145%" height="15" fill="rgb(213,116,39)" fg:x="5778336" fg:w="901"/><text x="93.2993%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (854 samples, 0.01%)</title><rect x="93.0500%" y="85" width="0.0138%" height="15" fill="rgb(222,207,29)" fg:x="5778383" fg:w="854"/><text x="93.3000%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (975 samples, 0.02%)</title><rect x="93.0640%" y="101" width="0.0157%" height="15" fill="rgb(206,96,30)" fg:x="5779251" fg:w="975"/><text x="93.3140%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21,107 samples, 0.34%)</title><rect x="93.0844%" y="101" width="0.3399%" height="15" fill="rgb(218,138,4)" fg:x="5780517" fg:w="21107"/><text x="93.3344%" y="111.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::update_knots_from_samples (419,980 samples, 6.76%)</title><rect x="86.6792%" y="117" width="6.7630%" height="15" fill="rgb(250,191,14)" fg:x="5382755" fg:w="419980"/><text x="86.9292%" y="127.50">fekan`fek..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1,111 samples, 0.02%)</title><rect x="93.4243%" y="101" width="0.0179%" height="15" fill="rgb(239,60,40)" fg:x="5801624" fg:w="1111"/><text x="93.6743%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_free (1,702 samples, 0.03%)</title><rect x="93.4422%" y="117" width="0.0274%" height="15" fill="rgb(206,27,48)" fg:x="5802735" fg:w="1702"/><text x="93.6922%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,133 samples, 0.02%)</title><rect x="93.4696%" y="117" width="0.0182%" height="15" fill="rgb(225,35,8)" fg:x="5804437" fg:w="1133"/><text x="93.7196%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,712 samples, 0.03%)</title><rect x="93.5019%" y="117" width="0.0276%" height="15" fill="rgb(250,213,24)" fg:x="5806441" fg:w="1712"/><text x="93.7519%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::node::Node::update_knots_from_samples (441,443 samples, 7.11%)</title><rect x="86.4210%" y="133" width="7.1086%" height="15" fill="rgb(247,123,22)" fg:x="5366722" fg:w="441443"/><text x="86.6710%" y="143.50">fekan`feka..</text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::update_knots_from_samples (441,751 samples, 7.11%)</title><rect x="86.4187%" y="149" width="7.1136%" height="15" fill="rgb(231,138,38)" fg:x="5366581" fg:w="441751"/><text x="86.6687%" y="159.50">fekan`feka..</text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (441,763 samples, 7.11%)</title><rect x="86.4187%" y="165" width="7.1138%" height="15" fill="rgb(231,145,46)" fg:x="5366578" fg:w="441763"/><text x="86.6687%" y="175.50">fekan`feka..</text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (17,487 samples, 0.28%)</title><rect x="93.5325%" y="165" width="0.2816%" height="15" fill="rgb(251,118,11)" fg:x="5808341" fg:w="17487"/><text x="93.7825%" y="175.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (6,882 samples, 0.11%)</title><rect x="93.8456%" y="101" width="0.1108%" height="15" fill="rgb(217,147,25)" fg:x="5827785" fg:w="6882"/><text x="94.0956%" y="111.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (299,167 samples, 4.82%)</title><rect x="93.8354%" y="117" width="4.8175%" height="15" fill="rgb(247,81,37)" fg:x="5827151" fg:w="299167"/><text x="94.0854%" y="127.50">fekan`..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::forward (291,651 samples, 4.70%)</title><rect x="93.9564%" y="101" width="4.6965%" height="15" fill="rgb(209,12,38)" fg:x="5834667" fg:w="291651"/><text x="94.2064%" y="111.50">fekan..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (268,936 samples, 4.33%)</title><rect x="94.3222%" y="85" width="4.3307%" height="15" fill="rgb(227,1,9)" fg:x="5857382" fg:w="268936"/><text x="94.5722%" y="95.50">fekan..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (245,566 samples, 3.95%)</title><rect x="94.6985%" y="69" width="3.9544%" height="15" fill="rgb(248,47,43)" fg:x="5880752" fg:w="245566"/><text x="94.9485%" y="79.50">feka..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (195,592 samples, 3.15%)</title><rect x="95.5032%" y="53" width="3.1496%" height="15" fill="rgb(221,10,30)" fg:x="5930726" fg:w="195592"/><text x="95.7532%" y="63.50">fek..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (100,574 samples, 1.62%)</title><rect x="97.0333%" y="37" width="1.6196%" height="15" fill="rgb(210,229,1)" fg:x="6025744" fg:w="100574"/><text x="97.2833%" y="47.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::forward (1,626 samples, 0.03%)</title><rect x="98.6529%" y="117" width="0.0262%" height="15" fill="rgb(222,148,37)" fg:x="6126320" fg:w="1626"/><text x="98.9029%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::forward (300,936 samples, 4.85%)</title><rect x="93.8341%" y="133" width="4.8460%" height="15" fill="rgb(234,67,33)" fg:x="5827074" fg:w="300936"/><text x="94.0841%" y="143.50">fekan`..</text></g><g><title>fekan`fekan::kan::Kan::forward (301,180 samples, 4.85%)</title><rect x="93.8336%" y="149" width="4.8499%" height="15" fill="rgb(247,98,35)" fg:x="5827044" fg:w="301180"/><text x="94.0836%" y="159.50">fekan`..</text></g><g><title>fekan`fekan::validate_model (302,423 samples, 4.87%)</title><rect x="93.8152%" y="165" width="4.8700%" height="15" fill="rgb(247,138,52)" fg:x="5825898" fg:w="302423"/><text x="94.0652%" y="175.50">fekan`..</text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (731 samples, 0.01%)</title><rect x="98.6939%" y="117" width="0.0118%" height="15" fill="rgb(213,79,30)" fg:x="6128865" fg:w="731"/><text x="98.9439%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (1,570 samples, 0.03%)</title><rect x="98.7074%" y="69" width="0.0253%" height="15" fill="rgb(246,177,23)" fg:x="6129705" fg:w="1570"/><text x="98.9574%" y="79.50"></text></g><g><title>libsystem_c.dylib`isatty (1,589 samples, 0.03%)</title><rect x="98.7072%" y="85" width="0.0256%" height="15" fill="rgb(230,62,27)" fg:x="6129694" fg:w="1589"/><text x="98.9572%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (1,444 samples, 0.02%)</title><rect x="98.7328%" y="85" width="0.0233%" height="15" fill="rgb(216,154,8)" fg:x="6131283" fg:w="1444"/><text x="98.9828%" y="95.50"></text></g><g><title>fekan`console::unix_term::terminal_size (3,056 samples, 0.05%)</title><rect x="98.7069%" y="101" width="0.0492%" height="15" fill="rgb(244,35,45)" fg:x="6129672" fg:w="3056"/><text x="98.9569%" y="111.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (3,097 samples, 0.05%)</title><rect x="98.7065%" y="117" width="0.0499%" height="15" fill="rgb(251,115,12)" fg:x="6129650" fg:w="3097"/><text x="98.9565%" y="127.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (4,375 samples, 0.07%)</title><rect x="98.6933%" y="133" width="0.0705%" height="15" fill="rgb(240,54,50)" fg:x="6128830" fg:w="4375"/><text x="98.9433%" y="143.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (4,500 samples, 0.07%)</title><rect x="98.6928%" y="149" width="0.0725%" height="15" fill="rgb(233,84,52)" fg:x="6128797" fg:w="4500"/><text x="98.9428%" y="159.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (4,539 samples, 0.07%)</title><rect x="98.6923%" y="165" width="0.0731%" height="15" fill="rgb(207,117,47)" fg:x="6128769" fg:w="4539"/><text x="98.9423%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4,962 samples, 0.08%)</title><rect x="98.7799%" y="165" width="0.0799%" height="15" fill="rgb(249,43,39)" fg:x="6134209" fg:w="4962"/><text x="99.0299%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (47,239 samples, 0.76%)</title><rect x="98.8616%" y="165" width="0.7607%" height="15" fill="rgb(209,38,44)" fg:x="6139282" fg:w="47239"/><text x="99.1116%" y="175.50"></text></g><g><title>fekan`fekan::train_model (6,186,374 samples, 99.62%)</title><rect x="0.0025%" y="181" width="99.6200%" height="15" fill="rgb(236,212,23)" fg:x="157" fg:w="6186374"/><text x="0.2525%" y="191.50">fekan`fekan::train_model</text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (722 samples, 0.01%)</title><rect x="99.6254%" y="69" width="0.0116%" height="15" fill="rgb(242,79,21)" fg:x="6186712" fg:w="722"/><text x="99.8754%" y="79.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (958 samples, 0.02%)</title><rect x="99.6237%" y="85" width="0.0154%" height="15" fill="rgb(211,96,35)" fg:x="6186603" fg:w="958"/><text x="99.8737%" y="95.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (984 samples, 0.02%)</title><rect x="99.6237%" y="101" width="0.0158%" height="15" fill="rgb(253,215,40)" fg:x="6186603" fg:w="984"/><text x="99.8737%" y="111.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,054 samples, 0.02%)</title><rect x="99.6231%" y="117" width="0.0170%" height="15" fill="rgb(211,81,21)" fg:x="6186568" fg:w="1054"/><text x="99.8731%" y="127.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,088 samples, 0.02%)</title><rect x="99.6226%" y="149" width="0.0175%" height="15" fill="rgb(208,190,38)" fg:x="6186536" fg:w="1088"/><text x="99.8726%" y="159.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,088 samples, 0.02%)</title><rect x="99.6226%" y="133" width="0.0175%" height="15" fill="rgb(235,213,38)" fg:x="6186536" fg:w="1088"/><text x="99.8726%" y="143.50"></text></g><g><title>fekan`serde_pickle::de::Deserializer&lt;R&gt;::parse_value (958 samples, 0.02%)</title><rect x="99.6402%" y="149" width="0.0154%" height="15" fill="rgb(237,122,38)" fg:x="6187628" fg:w="958"/><text x="99.8902%" y="159.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2,237 samples, 0.04%)</title><rect x="99.6226%" y="165" width="0.0360%" height="15" fill="rgb(244,218,35)" fg:x="6186536" fg:w="2237"/><text x="99.8726%" y="175.50"></text></g><g><title>fekan`serde_pickle::de::from_reader (2,258 samples, 0.04%)</title><rect x="99.6226%" y="181" width="0.0364%" height="15" fill="rgb(240,68,47)" fg:x="6186536" fg:w="2258"/><text x="99.8726%" y="191.50"></text></g><g><title>fekan`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (20,686 samples, 0.33%)</title><rect x="99.6644%" y="133" width="0.3331%" height="15" fill="rgb(210,16,53)" fg:x="6189135" fg:w="20686"/><text x="99.9144%" y="143.50"></text></g><g><title>fekan`std::io::Write::write_all (20,674 samples, 0.33%)</title><rect x="99.6646%" y="117" width="0.3329%" height="15" fill="rgb(235,124,12)" fg:x="6189147" fg:w="20674"/><text x="99.9146%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`write (20,629 samples, 0.33%)</title><rect x="99.6653%" y="101" width="0.3322%" height="15" fill="rgb(224,169,11)" fg:x="6189192" fg:w="20629"/><text x="99.9153%" y="111.50"></text></g><g><title>fekan`serde_pickle::ser::wrap_write (21,041 samples, 0.34%)</title><rect x="99.6589%" y="181" width="0.3388%" height="15" fill="rgb(250,166,2)" fg:x="6188794" fg:w="21041"/><text x="99.9089%" y="191.50"></text></g><g><title>fekan`fekan::kan::_::_&lt;impl serde::ser::Serialize for fekan::kan::Kan&gt;::serialize (21,041 samples, 0.34%)</title><rect x="99.6589%" y="165" width="0.3388%" height="15" fill="rgb(242,216,29)" fg:x="6188794" fg:w="21041"/><text x="99.9089%" y="175.50"></text></g><g><title>fekan`serde::ser::Serializer::collect_seq (21,041 samples, 0.34%)</title><rect x="99.6589%" y="149" width="0.3388%" height="15" fill="rgb(230,116,27)" fg:x="6188794" fg:w="21041"/><text x="99.9089%" y="159.50"></text></g><g><title>fekan`fekan::main (6,209,965 samples, 100.00%)</title><rect x="0.0001%" y="197" width="99.9999%" height="15" fill="rgb(228,99,48)" fg:x="4" fg:w="6209965"/><text x="0.2501%" y="207.50">fekan`fekan::main</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (6,209,971 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="6209971"/><text x="0.2500%" y="239.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys_common::backtrace::__rust_begin_short_backtrace (6,209,971 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,143,39)" fg:x="0" fg:w="6209971"/><text x="0.2500%" y="223.50">fekan`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dyld`start (6,209,972 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="6209972"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>fekan`main (6,209,972 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="6209972"/><text x="0.2500%" y="271.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (6,209,972 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="6209972"/><text x="0.2500%" y="255.50">fekan`std::rt::lang_start_internal</text></g><g><title>all (6,209,974 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="6209974"/><text x="0.2500%" y="303.50"></text></g></svg></svg>