<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="2249010"><g><title>fekan`DYLD-STUB$$bzero (1,013 samples, 0.05%)</title><rect x="0.0130%" y="165" width="0.0450%" height="15" fill="rgb(227,0,7)" fg:x="292" fg:w="1013"/><text x="0.2630%" y="175.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (11,024 samples, 0.49%)</title><rect x="0.1228%" y="117" width="0.4902%" height="15" fill="rgb(217,0,24)" fg:x="2762" fg:w="11024"/><text x="0.3728%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (38,362 samples, 1.71%)</title><rect x="0.6130%" y="117" width="1.7057%" height="15" fill="rgb(221,193,54)" fg:x="13786" fg:w="38362"/><text x="0.8630%" y="127.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (119,292 samples, 5.30%)</title><rect x="4.2187%" y="101" width="5.3042%" height="15" fill="rgb(248,212,6)" fg:x="94880" fg:w="119292"/><text x="4.4687%" y="111.50">fekan`..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (37,729 samples, 1.68%)</title><rect x="9.5229%" y="101" width="1.6776%" height="15" fill="rgb(208,68,35)" fg:x="214172" fg:w="37729"/><text x="9.7729%" y="111.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (366,498 samples, 16.30%)</title><rect x="13.4785%" y="85" width="16.2960%" height="15" fill="rgb(232,128,0)" fg:x="303133" fg:w="366498"/><text x="13.7285%" y="95.50">fekan`&lt;std::hash::random:..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (653,673 samples, 29.06%)</title><rect x="2.3187%" y="117" width="29.0649%" height="15" fill="rgb(207,160,47)" fg:x="52148" fg:w="653673"/><text x="2.5687%" y="127.50">fekan`fekan::kan::kan_layer::spline::Spline::ba..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (453,920 samples, 20.18%)</title><rect x="11.2005%" y="101" width="20.1831%" height="15" fill="rgb(228,23,34)" fg:x="251901" fg:w="453920"/><text x="11.4505%" y="111.50">fekan`fekan::kan::kan_layer::spl..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (36,190 samples, 1.61%)</title><rect x="29.7745%" y="85" width="1.6092%" height="15" fill="rgb(218,30,26)" fg:x="669631" fg:w="36190"/><text x="30.0245%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (400 samples, 0.02%)</title><rect x="31.3836%" y="117" width="0.0178%" height="15" fill="rgb(220,122,19)" fg:x="705821" fg:w="400"/><text x="31.6336%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (350 samples, 0.02%)</title><rect x="31.3859%" y="101" width="0.0156%" height="15" fill="rgb(250,228,42)" fg:x="705871" fg:w="350"/><text x="31.6359%" y="111.50"></text></g><g><title>fekan`fekan::kan::kan_layer::node::Node::backward (704,484 samples, 31.32%)</title><rect x="0.0778%" y="133" width="31.3242%" height="15" fill="rgb(240,193,28)" fg:x="1750" fg:w="704484"/><text x="0.3278%" y="143.50">fekan`fekan::kan::kan_layer::node::Node::backward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (4,420 samples, 0.20%)</title><rect x="31.4020%" y="133" width="0.1965%" height="15" fill="rgb(216,20,37)" fg:x="706234" fg:w="4420"/><text x="31.6520%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (232 samples, 0.01%)</title><rect x="31.6025%" y="133" width="0.0103%" height="15" fill="rgb(206,188,39)" fg:x="710743" fg:w="232"/><text x="31.8525%" y="143.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::backward (709,654 samples, 31.55%)</title><rect x="0.0648%" y="149" width="31.5541%" height="15" fill="rgb(217,207,13)" fg:x="1458" fg:w="709654"/><text x="0.3148%" y="159.50">fekan`fekan::kan::kan_layer::KanLayer::backward</text></g><g><title>libsystem_malloc.dylib`free_tiny (282 samples, 0.01%)</title><rect x="31.6258%" y="149" width="0.0125%" height="15" fill="rgb(231,73,38)" fg:x="711268" fg:w="282"/><text x="31.8758%" y="159.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (710,136 samples, 31.58%)</title><rect x="0.0631%" y="165" width="31.5755%" height="15" fill="rgb(225,20,46)" fg:x="1420" fg:w="710136"/><text x="0.3131%" y="175.50">fekan`fekan::kan::Kan::backward</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (19,991 samples, 0.89%)</title><rect x="32.1456%" y="117" width="0.8889%" height="15" fill="rgb(210,31,41)" fg:x="722957" fg:w="19991"/><text x="32.3956%" y="127.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (202,025 samples, 8.98%)</title><rect x="37.1353%" y="101" width="8.9828%" height="15" fill="rgb(221,200,47)" fg:x="835176" fg:w="202025"/><text x="37.3853%" y="111.50">fekan`&lt;std::h..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (49,063 samples, 2.18%)</title><rect x="46.1181%" y="101" width="2.1815%" height="15" fill="rgb(226,26,5)" fg:x="1037201" fg:w="49063"/><text x="46.3681%" y="111.50">f..</text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (31,989 samples, 1.42%)</title><rect x="48.9578%" y="85" width="1.4224%" height="15" fill="rgb(249,33,26)" fg:x="1101066" fg:w="31989"/><text x="49.2078%" y="95.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (19,499 samples, 0.87%)</title><rect x="50.3802%" y="85" width="0.8670%" height="15" fill="rgb(235,183,28)" fg:x="1133055" fg:w="19499"/><text x="50.6302%" y="95.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (41,951 samples, 1.87%)</title><rect x="53.0006%" y="69" width="1.8653%" height="15" fill="rgb(221,5,38)" fg:x="1191989" fg:w="41951"/><text x="53.2506%" y="79.50">f..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (47,283 samples, 2.10%)</title><rect x="54.8659%" y="69" width="2.1024%" height="15" fill="rgb(247,18,42)" fg:x="1233940" fg:w="47283"/><text x="55.1159%" y="79.50">f..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (25,907 samples, 1.15%)</title><rect x="56.9683%" y="69" width="1.1519%" height="15" fill="rgb(241,131,45)" fg:x="1281223" fg:w="25907"/><text x="57.2183%" y="79.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14,905 samples, 0.66%)</title><rect x="60.3835%" y="53" width="0.6627%" height="15" fill="rgb(249,31,29)" fg:x="1358031" fg:w="14905"/><text x="60.6335%" y="63.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (225,644 samples, 10.03%)</title><rect x="51.2472%" y="85" width="10.0330%" height="15" fill="rgb(225,111,53)" fg:x="1152554" fg:w="225644"/><text x="51.4972%" y="95.50">fekan`fekan::ka..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (71,068 samples, 3.16%)</title><rect x="58.1202%" y="69" width="3.1600%" height="15" fill="rgb(238,160,17)" fg:x="1307130" fg:w="71068"/><text x="58.3702%" y="79.50">fek..</text></g><g><title>fekan`core::hash::BuildHasher::hash_one (5,262 samples, 0.23%)</title><rect x="61.0462%" y="53" width="0.2340%" height="15" fill="rgb(214,148,48)" fg:x="1372936" fg:w="5262"/><text x="61.2962%" y="63.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (16,101 samples, 0.72%)</title><rect x="65.7242%" y="69" width="0.7159%" height="15" fill="rgb(232,36,49)" fg:x="1478143" fg:w="16101"/><text x="65.9742%" y="79.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (4,315 samples, 0.19%)</title><rect x="66.4401%" y="69" width="0.1919%" height="15" fill="rgb(209,103,24)" fg:x="1494244" fg:w="4315"/><text x="66.6901%" y="79.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (412,318 samples, 18.33%)</title><rect x="48.2997%" y="101" width="18.3333%" height="15" fill="rgb(229,88,8)" fg:x="1086264" fg:w="412318"/><text x="48.5497%" y="111.50">fekan`fekan::kan::kan_layer::..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (120,384 samples, 5.35%)</title><rect x="61.2802%" y="85" width="5.3528%" height="15" fill="rgb(213,181,19)" fg:x="1378198" fg:w="120384"/><text x="61.5302%" y="95.50">fekan`h..</text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (11,330 samples, 0.50%)</title><rect x="68.3824%" y="85" width="0.5038%" height="15" fill="rgb(254,191,54)" fg:x="1537926" fg:w="11330"/><text x="68.6324%" y="95.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (3,947 samples, 0.18%)</title><rect x="68.8861%" y="85" width="0.1755%" height="15" fill="rgb(241,83,37)" fg:x="1549256" fg:w="3947"/><text x="69.1361%" y="95.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (810,268 samples, 36.03%)</title><rect x="33.0344%" y="117" width="36.0278%" height="15" fill="rgb(233,36,39)" fg:x="742948" fg:w="810268"/><text x="33.2844%" y="127.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (54,634 samples, 2.43%)</title><rect x="66.6330%" y="101" width="2.4292%" height="15" fill="rgb(226,3,54)" fg:x="1498582" fg:w="54634"/><text x="66.8830%" y="111.50">fe..</text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (843,541 samples, 37.51%)</title><rect x="31.6413%" y="133" width="37.5072%" height="15" fill="rgb(245,192,40)" fg:x="711617" fg:w="843541"/><text x="31.8913%" y="143.50">fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::Spec..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,942 samples, 0.09%)</title><rect x="69.0622%" y="117" width="0.0863%" height="15" fill="rgb(238,167,29)" fg:x="1553216" fg:w="1942"/><text x="69.3122%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (51,500 samples, 2.29%)</title><rect x="69.1487%" y="133" width="2.2899%" height="15" fill="rgb(232,182,51)" fg:x="1555161" fg:w="51500"/><text x="69.3987%" y="143.50">f..</text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::forward (895,124 samples, 39.80%)</title><rect x="31.6399%" y="149" width="39.8008%" height="15" fill="rgb(231,60,39)" fg:x="711584" fg:w="895124"/><text x="31.8899%" y="159.50">fekan`fekan::kan::kan_layer::KanLayer::forward</text></g><g><title>fekan`fekan::kan::Kan::forward (895,318 samples, 39.81%)</title><rect x="31.6394%" y="165" width="39.8094%" height="15" fill="rgb(208,69,12)" fg:x="711573" fg:w="895318"/><text x="31.8894%" y="175.50">fekan`fekan::kan::Kan::forward</text></g><g><title>fekan`fekan::kan::Kan::update (4,807 samples, 0.21%)</title><rect x="71.4488%" y="165" width="0.2137%" height="15" fill="rgb(235,93,37)" fg:x="1606891" fg:w="4807"/><text x="71.6988%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (259 samples, 0.01%)</title><rect x="71.7027%" y="101" width="0.0115%" height="15" fill="rgb(213,116,39)" fg:x="1612600" fg:w="259"/><text x="71.9527%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (233 samples, 0.01%)</title><rect x="71.7038%" y="85" width="0.0104%" height="15" fill="rgb(222,207,29)" fg:x="1612626" fg:w="233"/><text x="71.9538%" y="95.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,155 samples, 0.05%)</title><rect x="71.6633%" y="117" width="0.0514%" height="15" fill="rgb(206,96,30)" fg:x="1611714" fg:w="1155"/><text x="71.9133%" y="127.50"></text></g><g><title>fekan`core::slice::sort::insertion_sort_shift_left (7,585 samples, 0.34%)</title><rect x="72.9233%" y="85" width="0.3373%" height="15" fill="rgb(218,138,4)" fg:x="1640053" fg:w="7585"/><text x="73.1733%" y="95.50"></text></g><g><title>fekan`core::slice::sort::merge_sort (34,036 samples, 1.51%)</title><rect x="71.7515%" y="101" width="1.5134%" height="15" fill="rgb(250,191,14)" fg:x="1613699" fg:w="34036"/><text x="72.0015%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (388 samples, 0.02%)</title><rect x="73.2694%" y="101" width="0.0173%" height="15" fill="rgb(239,60,40)" fg:x="1647836" fg:w="388"/><text x="73.5194%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (254 samples, 0.01%)</title><rect x="73.2881%" y="101" width="0.0113%" height="15" fill="rgb(206,27,48)" fg:x="1648256" fg:w="254"/><text x="73.5381%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,988 samples, 0.09%)</title><rect x="73.3072%" y="101" width="0.0884%" height="15" fill="rgb(225,35,8)" fg:x="1648686" fg:w="1988"/><text x="73.5572%" y="111.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::update_knots_from_samples (37,772 samples, 1.68%)</title><rect x="71.7206%" y="117" width="1.6795%" height="15" fill="rgb(250,213,24)" fg:x="1613004" fg:w="37772"/><text x="71.9706%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::node::Node::update_knots_from_samples (42,037 samples, 1.87%)</title><rect x="71.6629%" y="133" width="1.8691%" height="15" fill="rgb(247,123,22)" fg:x="1611706" fg:w="42037"/><text x="71.9129%" y="143.50">f..</text></g><g><title>libsystem_platform.dylib`_platform_memset (2,477 samples, 0.11%)</title><rect x="73.4219%" y="117" width="0.1101%" height="15" fill="rgb(231,138,38)" fg:x="1651266" fg:w="2477"/><text x="73.6719%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::update_knots_from_samples (42,060 samples, 1.87%)</title><rect x="71.6626%" y="149" width="1.8702%" height="15" fill="rgb(231,145,46)" fg:x="1611698" fg:w="42060"/><text x="71.9126%" y="159.50">f..</text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (42,061 samples, 1.87%)</title><rect x="71.6626%" y="165" width="1.8702%" height="15" fill="rgb(251,118,11)" fg:x="1611698" fg:w="42061"/><text x="71.9126%" y="175.50">f..</text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (1,729 samples, 0.08%)</title><rect x="73.5328%" y="165" width="0.0769%" height="15" fill="rgb(217,147,25)" fg:x="1653759" fg:w="1729"/><text x="73.7828%" y="175.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (2,079 samples, 0.09%)</title><rect x="73.6661%" y="101" width="0.0924%" height="15" fill="rgb(247,81,37)" fg:x="1656757" fg:w="2079"/><text x="73.9161%" y="111.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (24,486 samples, 1.09%)</title><rect x="74.1813%" y="85" width="1.0887%" height="15" fill="rgb(209,12,38)" fg:x="1668344" fg:w="24486"/><text x="74.4313%" y="95.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (4,893 samples, 0.22%)</title><rect x="75.2700%" y="85" width="0.2176%" height="15" fill="rgb(227,1,9)" fg:x="1692830" fg:w="4893"/><text x="75.5200%" y="95.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1,449 samples, 0.06%)</title><rect x="75.5563%" y="69" width="0.0644%" height="15" fill="rgb(248,47,43)" fg:x="1699269" fg:w="1449"/><text x="75.8063%" y="79.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (849 samples, 0.04%)</title><rect x="75.6207%" y="69" width="0.0377%" height="15" fill="rgb(221,10,30)" fg:x="1700718" fg:w="849"/><text x="75.8707%" y="79.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2,309 samples, 0.10%)</title><rect x="75.8239%" y="53" width="0.1027%" height="15" fill="rgb(210,229,1)" fg:x="1705288" fg:w="2309"/><text x="76.0739%" y="63.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (3,564 samples, 0.16%)</title><rect x="75.9266%" y="53" width="0.1585%" height="15" fill="rgb(222,148,37)" fg:x="1707597" fg:w="3564"/><text x="76.1766%" y="63.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (1,787 samples, 0.08%)</title><rect x="76.0851%" y="53" width="0.0795%" height="15" fill="rgb(234,67,33)" fg:x="1711161" fg:w="1787"/><text x="76.3351%" y="63.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (672 samples, 0.03%)</title><rect x="76.3987%" y="37" width="0.0299%" height="15" fill="rgb(247,98,35)" fg:x="1718215" fg:w="672"/><text x="76.6487%" y="47.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (17,533 samples, 0.78%)</title><rect x="75.6585%" y="69" width="0.7796%" height="15" fill="rgb(247,138,52)" fg:x="1701567" fg:w="17533"/><text x="75.9085%" y="79.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6,152 samples, 0.27%)</title><rect x="76.1645%" y="53" width="0.2735%" height="15" fill="rgb(213,79,30)" fg:x="1712948" fg:w="6152"/><text x="76.4145%" y="63.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (840 samples, 0.04%)</title><rect x="76.8708%" y="53" width="0.0373%" height="15" fill="rgb(246,177,23)" fg:x="1728831" fg:w="840"/><text x="77.1208%" y="63.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (251 samples, 0.01%)</title><rect x="76.9081%" y="53" width="0.0112%" height="15" fill="rgb(230,62,27)" fg:x="1729671" fg:w="251"/><text x="77.1581%" y="63.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (32,399 samples, 1.44%)</title><rect x="75.4876%" y="85" width="1.4406%" height="15" fill="rgb(216,154,8)" fg:x="1697723" fg:w="32399"/><text x="75.7376%" y="95.50"></text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11,022 samples, 0.49%)</title><rect x="76.4381%" y="69" width="0.4901%" height="15" fill="rgb(244,35,45)" fg:x="1719100" fg:w="11022"/><text x="76.6881%" y="79.50"></text></g><g><title>fekan`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (436 samples, 0.02%)</title><rect x="77.0996%" y="69" width="0.0194%" height="15" fill="rgb(251,115,12)" fg:x="1733977" fg:w="436"/><text x="77.3496%" y="79.50"></text></g><g><title>fekan`core::hash::BuildHasher::hash_one (227 samples, 0.01%)</title><rect x="77.1190%" y="69" width="0.0101%" height="15" fill="rgb(240,54,50)" fg:x="1734413" fg:w="227"/><text x="77.3690%" y="79.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (354 samples, 0.02%)</title><rect x="77.1290%" y="69" width="0.0157%" height="15" fill="rgb(233,84,52)" fg:x="1734640" fg:w="354"/><text x="77.3790%" y="79.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (76,162 samples, 3.39%)</title><rect x="73.7585%" y="101" width="3.3865%" height="15" fill="rgb(207,117,47)" fg:x="1658836" fg:w="76162"/><text x="74.0085%" y="111.50">fek..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4,876 samples, 0.22%)</title><rect x="76.9282%" y="85" width="0.2168%" height="15" fill="rgb(249,43,39)" fg:x="1730122" fg:w="4876"/><text x="77.1782%" y="95.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (79,466 samples, 3.53%)</title><rect x="73.6151%" y="117" width="3.5334%" height="15" fill="rgb(209,38,44)" fg:x="1655610" fg:w="79466"/><text x="73.8651%" y="127.50">fek..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (5,961 samples, 0.27%)</title><rect x="77.1484%" y="117" width="0.2650%" height="15" fill="rgb(236,212,23)" fg:x="1735076" fg:w="5961"/><text x="77.3984%" y="127.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::forward (85,437 samples, 3.80%)</title><rect x="73.6149%" y="133" width="3.7989%" height="15" fill="rgb(242,79,21)" fg:x="1655606" fg:w="85437"/><text x="73.8649%" y="143.50">feka..</text></g><g><title>fekan`fekan::kan::Kan::forward (85,456 samples, 3.80%)</title><rect x="73.6149%" y="149" width="3.7997%" height="15" fill="rgb(211,96,35)" fg:x="1655606" fg:w="85456"/><text x="73.8649%" y="159.50">feka..</text></g><g><title>fekan`fekan::validate_model (85,585 samples, 3.81%)</title><rect x="73.6099%" y="165" width="3.8055%" height="15" fill="rgb(253,215,40)" fg:x="1655494" fg:w="85585"/><text x="73.8599%" y="175.50">feka..</text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (316 samples, 0.01%)</title><rect x="77.4186%" y="117" width="0.0141%" height="15" fill="rgb(211,81,21)" fg:x="1741152" fg:w="316"/><text x="77.6686%" y="127.50"></text></g><g><title>libsystem_c.dylib`isatty (280 samples, 0.01%)</title><rect x="77.4336%" y="85" width="0.0124%" height="15" fill="rgb(208,190,38)" fg:x="1741490" fg:w="280"/><text x="77.6836%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (280 samples, 0.01%)</title><rect x="77.4336%" y="69" width="0.0124%" height="15" fill="rgb(235,213,38)" fg:x="1741490" fg:w="280"/><text x="77.6836%" y="79.50"></text></g><g><title>fekan`console::unix_term::terminal_size (479 samples, 0.02%)</title><rect x="77.4335%" y="101" width="0.0213%" height="15" fill="rgb(237,122,38)" fg:x="1741487" fg:w="479"/><text x="77.6835%" y="111.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (486 samples, 0.02%)</title><rect x="77.4333%" y="117" width="0.0216%" height="15" fill="rgb(244,218,35)" fg:x="1741483" fg:w="486"/><text x="77.6833%" y="127.50"></text></g><g><title>fekan`indicatif::style::ProgressStyle::format_state (270 samples, 0.01%)</title><rect x="77.4552%" y="117" width="0.0120%" height="15" fill="rgb(240,68,47)" fg:x="1741976" fg:w="270"/><text x="77.7052%" y="127.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (1,115 samples, 0.05%)</title><rect x="77.4183%" y="133" width="0.0496%" height="15" fill="rgb(210,16,53)" fg:x="1741146" fg:w="1115"/><text x="77.6683%" y="143.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (1,131 samples, 0.05%)</title><rect x="77.4180%" y="149" width="0.0503%" height="15" fill="rgb(235,124,12)" fg:x="1741138" fg:w="1131"/><text x="77.6680%" y="159.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (1,145 samples, 0.05%)</title><rect x="77.4175%" y="165" width="0.0509%" height="15" fill="rgb(224,169,11)" fg:x="1741128" fg:w="1145"/><text x="77.6675%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (481 samples, 0.02%)</title><rect x="77.4748%" y="165" width="0.0214%" height="15" fill="rgb(250,166,2)" fg:x="1742415" fg:w="481"/><text x="77.7248%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4,718 samples, 0.21%)</title><rect x="77.4965%" y="165" width="0.2098%" height="15" fill="rgb(242,216,29)" fg:x="1742905" fg:w="4718"/><text x="77.7465%" y="175.50"></text></g><g><title>fekan`fekan::train_model (1,747,527 samples, 77.70%)</title><rect x="0.0044%" y="181" width="77.7021%" height="15" fill="rgb(230,116,27)" fg:x="99" fg:w="1747527"/><text x="0.2544%" y="191.50">fekan`fekan::train_model</text></g><g><title>fekan`&lt;serde_pickle::ser::Compound&lt;W&gt; as serde::ser::SerializeStruct&gt;::serialize_field (253 samples, 0.01%)</title><rect x="77.7533%" y="85" width="0.0112%" height="15" fill="rgb(228,99,48)" fg:x="1748680" fg:w="253"/><text x="78.0033%" y="95.50"></text></g><g><title>fekan`serde::ser::impls::_&lt;impl serde::ser::Serialize for usize&gt;::serialize (181,393 samples, 8.07%)</title><rect x="77.7648%" y="85" width="8.0655%" height="15" fill="rgb(253,11,6)" fg:x="1748939" fg:w="181393"/><text x="78.0148%" y="95.50">fekan`serde..</text></g><g><title>fekan`std::io::Write::write_all (181,366 samples, 8.06%)</title><rect x="77.7660%" y="69" width="8.0643%" height="15" fill="rgb(247,143,39)" fg:x="1748966" fg:w="181366"/><text x="78.0160%" y="79.50">fekan`std::..</text></g><g><title>libsystem_kernel.dylib`write (181,083 samples, 8.05%)</title><rect x="77.7786%" y="53" width="8.0517%" height="15" fill="rgb(236,97,10)" fg:x="1749249" fg:w="181083"/><text x="78.0286%" y="63.50">libsystem_k..</text></g><g><title>fekan`serde::ser::Serializer::collect_seq (499,053 samples, 22.19%)</title><rect x="77.7152%" y="101" width="22.1899%" height="15" fill="rgb(233,208,19)" fg:x="1747823" fg:w="499053"/><text x="77.9652%" y="111.50">fekan`serde::ser::Serializer::colle..</text></g><g><title>fekan`std::io::Write::write_all (316,544 samples, 14.07%)</title><rect x="85.8303%" y="85" width="14.0748%" height="15" fill="rgb(216,164,2)" fg:x="1930332" fg:w="316544"/><text x="86.0803%" y="95.50">fekan`std::io::Write:..</text></g><g><title>libsystem_kernel.dylib`write (315,943 samples, 14.05%)</title><rect x="85.8570%" y="69" width="14.0481%" height="15" fill="rgb(220,129,5)" fg:x="1930933" fg:w="315943"/><text x="86.1070%" y="79.50">libsystem_kernel.dyli..</text></g><g><title>fekan`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1,868 samples, 0.08%)</title><rect x="99.9051%" y="101" width="0.0831%" height="15" fill="rgb(242,17,10)" fg:x="2246876" fg:w="1868"/><text x="100.1551%" y="111.50"></text></g><g><title>fekan`std::io::Write::write_all (1,865 samples, 0.08%)</title><rect x="99.9052%" y="85" width="0.0829%" height="15" fill="rgb(242,107,0)" fg:x="2246879" fg:w="1865"/><text x="100.1552%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`write (1,863 samples, 0.08%)</title><rect x="99.9053%" y="69" width="0.0828%" height="15" fill="rgb(251,28,31)" fg:x="2246881" fg:w="1863"/><text x="100.1553%" y="79.50"></text></g><g><title>fekan`serde_pickle::ser::wrap_write (501,158 samples, 22.28%)</title><rect x="77.7152%" y="181" width="22.2835%" height="15" fill="rgb(233,223,10)" fg:x="1747822" fg:w="501158"/><text x="77.9652%" y="191.50">fekan`serde_pickle::ser::wrap_write</text></g><g><title>fekan`fekan::kan::_::_&lt;impl serde::ser::Serialize for fekan::kan::Kan&gt;::serialize (501,158 samples, 22.28%)</title><rect x="77.7152%" y="165" width="22.2835%" height="15" fill="rgb(215,21,27)" fg:x="1747822" fg:w="501158"/><text x="77.9652%" y="175.50">fekan`fekan::kan::_::_&lt;impl serde::..</text></g><g><title>fekan`serde::ser::Serializer::collect_seq (501,158 samples, 22.28%)</title><rect x="77.7152%" y="149" width="22.2835%" height="15" fill="rgb(232,23,21)" fg:x="1747822" fg:w="501158"/><text x="77.9652%" y="159.50">fekan`serde::ser::Serializer::colle..</text></g><g><title>fekan`fekan::kan::kan_layer::_::_&lt;impl serde::ser::Serialize for fekan::kan::kan_layer::KanLayer&gt;::serialize (501,158 samples, 22.28%)</title><rect x="77.7152%" y="133" width="22.2835%" height="15" fill="rgb(244,5,23)" fg:x="1747822" fg:w="501158"/><text x="77.9652%" y="143.50">fekan`fekan::kan::kan_layer::_::_&lt;i..</text></g><g><title>fekan`serde::ser::Serializer::collect_seq (501,158 samples, 22.28%)</title><rect x="77.7152%" y="117" width="22.2835%" height="15" fill="rgb(226,81,46)" fg:x="1747822" fg:w="501158"/><text x="77.9652%" y="127.50">fekan`serde::ser::Serializer::colle..</text></g><g><title>fekan`fekan::main (2,248,995 samples, 100.00%)</title><rect x="0.0000%" y="197" width="99.9993%" height="15" fill="rgb(247,70,30)" fg:x="1" fg:w="2248995"/><text x="0.2500%" y="207.50">fekan`fekan::main</text></g><g><title>fekan`main (2,248,998 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9995%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="2248998"/><text x="0.2500%" y="271.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (2,248,998 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9995%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="2248998"/><text x="0.2500%" y="255.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (2,248,998 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9995%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="2248998"/><text x="0.2500%" y="239.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys_common::backtrace::__rust_begin_short_backtrace (2,248,998 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9995%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="2248998"/><text x="0.2500%" y="223.50">fekan`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dyld`start (2,249,000 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9996%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="2249000"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>all (2,249,010 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="2249010"/><text x="0.2500%" y="303.50"></text></g></svg></svg>