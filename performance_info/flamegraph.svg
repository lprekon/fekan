<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="293.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="293.00"> </text><svg id="frames" x="10" width="1180" total_samples="499212"><g><title>libsystem_kernel.dylib`madvise (60 samples, 0.01%)</title><rect x="0.0010%" y="101" width="0.0120%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="60"/><text x="0.2510%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (70 samples, 0.01%)</title><rect x="0.0010%" y="117" width="0.0140%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="70"/><text x="0.2510%" y="127.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::kan_layer::spline::Spline&gt; (71 samples, 0.01%)</title><rect x="0.0010%" y="133" width="0.0142%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="71"/><text x="0.2510%" y="143.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::kan_layer::KanLayer&gt; (75 samples, 0.02%)</title><rect x="0.0010%" y="149" width="0.0150%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="75"/><text x="0.2510%" y="159.50"></text></g><g><title>fekan`DYLD-STUB$$bzero (199 samples, 0.04%)</title><rect x="0.0274%" y="133" width="0.0399%" height="15" fill="rgb(208,68,35)" fg:x="137" fg:w="199"/><text x="0.2774%" y="143.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (37,986 samples, 7.61%)</title><rect x="0.1206%" y="101" width="7.6092%" height="15" fill="rgb(232,128,0)" fg:x="602" fg:w="37986"/><text x="0.3706%" y="111.50">fekan`feka..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::b (8,801 samples, 1.76%)</title><rect x="5.9668%" y="85" width="1.7630%" height="15" fill="rgb(207,160,47)" fg:x="29787" fg:w="8801"/><text x="6.2168%" y="95.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::b (17,887 samples, 3.58%)</title><rect x="7.7298%" y="101" width="3.5830%" height="15" fill="rgb(228,23,34)" fg:x="38588" fg:w="17887"/><text x="7.9798%" y="111.50">feka..</text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::backward (56,116 samples, 11.24%)</title><rect x="0.0763%" y="117" width="11.2409%" height="15" fill="rgb(218,30,26)" fg:x="381" fg:w="56116"/><text x="0.3263%" y="127.50">fekan`fekan::kan:..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (369 samples, 0.07%)</title><rect x="11.3172%" y="117" width="0.0739%" height="15" fill="rgb(220,122,19)" fg:x="56497" fg:w="369"/><text x="11.5672%" y="127.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (56,495 samples, 11.32%)</title><rect x="0.0757%" y="133" width="11.3168%" height="15" fill="rgb(250,228,42)" fg:x="378" fg:w="56495"/><text x="0.3257%" y="143.50">fekan`fekan::kan:..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::b (2,836 samples, 0.57%)</title><rect x="17.9273%" y="53" width="0.5681%" height="15" fill="rgb(240,193,28)" fg:x="89495" fg:w="2836"/><text x="18.1773%" y="63.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::b (165,836 samples, 33.22%)</title><rect x="16.3315%" y="69" width="33.2196%" height="15" fill="rgb(216,20,37)" fg:x="81529" fg:w="165836"/><text x="16.5815%" y="79.50">fekan`fekan::kan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (155,034 samples, 31.06%)</title><rect x="18.4953%" y="53" width="31.0557%" height="15" fill="rgb(206,188,39)" fg:x="92331" fg:w="155034"/><text x="18.7453%" y="63.50">fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>libsystem_malloc.dylib`free_medium (55 samples, 0.01%)</title><rect x="75.4315%" y="37" width="0.0110%" height="15" fill="rgb(217,207,13)" fg:x="376563" fg:w="55"/><text x="75.6815%" y="47.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (575 samples, 0.12%)</title><rect x="75.3283%" y="53" width="0.1152%" height="15" fill="rgb(231,73,38)" fg:x="376048" fg:w="575"/><text x="75.5783%" y="63.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::b (302,042 samples, 60.50%)</title><rect x="14.9419%" y="85" width="60.5038%" height="15" fill="rgb(225,20,46)" fg:x="74592" fg:w="302042"/><text x="15.1919%" y="95.50">fekan`fekan::kan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (129,269 samples, 25.89%)</title><rect x="49.5511%" y="69" width="25.8946%" height="15" fill="rgb(210,31,41)" fg:x="247365" fg:w="129269"/><text x="49.8011%" y="79.50">fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::i..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (204 samples, 0.04%)</title><rect x="95.7475%" y="69" width="0.0409%" height="15" fill="rgb(221,200,47)" fg:x="477983" fg:w="204"/><text x="95.9975%" y="79.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::b (416,710 samples, 83.47%)</title><rect x="12.3158%" y="101" width="83.4736%" height="15" fill="rgb(226,26,5)" fg:x="61482" fg:w="416710"/><text x="12.5658%" y="111.50">fekan`fekan::kan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (101,558 samples, 20.34%)</title><rect x="75.4457%" y="85" width="20.3437%" height="15" fill="rgb(249,33,26)" fg:x="376634" fg:w="101558"/><text x="75.6957%" y="95.50">fekan`hashbrown::map::HashMap&lt;K,..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,192 samples, 0.24%)</title><rect x="95.7894%" y="101" width="0.2388%" height="15" fill="rgb(235,183,28)" fg:x="478192" fg:w="1192"/><text x="96.0394%" y="111.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::forward (422,520 samples, 84.64%)</title><rect x="11.3954%" y="117" width="84.6374%" height="15" fill="rgb(221,5,38)" fg:x="56887" fg:w="422520"/><text x="11.6454%" y="127.50">fekan`fekan::kan::kan_layer::KanLayer::forward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::b (15,692 samples, 3.14%)</title><rect x="96.0327%" y="117" width="3.1434%" height="15" fill="rgb(247,18,42)" fg:x="479407" fg:w="15692"/><text x="96.2827%" y="127.50">fek..</text></g><g><title>fekan`fekan::kan::Kan::forward (438,297 samples, 87.80%)</title><rect x="11.3944%" y="133" width="87.7978%" height="15" fill="rgb(241,131,45)" fg:x="56882" fg:w="438297"/><text x="11.6444%" y="143.50">fekan`fekan::kan::Kan::forward</text></g><g><title>fekan`fekan::kan::Kan::update (719 samples, 0.14%)</title><rect x="99.1921%" y="133" width="0.1440%" height="15" fill="rgb(249,31,29)" fg:x="495179" fg:w="719"/><text x="99.4421%" y="143.50"></text></g><g><title>fekan`core::slice::sort::insertion_sort_shift_left (102 samples, 0.02%)</title><rect x="99.4043%" y="85" width="0.0204%" height="15" fill="rgb(225,111,53)" fg:x="496238" fg:w="102"/><text x="99.6543%" y="95.50"></text></g><g><title>fekan`core::slice::sort::merge_sort (357 samples, 0.07%)</title><rect x="99.3534%" y="101" width="0.0715%" height="15" fill="rgb(238,160,17)" fg:x="495984" fg:w="357"/><text x="99.6034%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (65 samples, 0.01%)</title><rect x="99.4618%" y="85" width="0.0130%" height="15" fill="rgb(214,148,48)" fg:x="496525" fg:w="65"/><text x="99.7118%" y="95.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::update_knots_from_samples (271 samples, 0.05%)</title><rect x="99.4249%" y="101" width="0.0543%" height="15" fill="rgb(232,36,49)" fg:x="496341" fg:w="271"/><text x="99.6749%" y="111.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::update_knots_from_samples (1,735 samples, 0.35%)</title><rect x="99.3364%" y="117" width="0.3475%" height="15" fill="rgb(209,103,24)" fg:x="495899" fg:w="1735"/><text x="99.5864%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (944 samples, 0.19%)</title><rect x="99.4948%" y="101" width="0.1891%" height="15" fill="rgb(229,88,8)" fg:x="496690" fg:w="944"/><text x="99.7448%" y="111.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (1,742 samples, 0.35%)</title><rect x="99.3362%" y="133" width="0.3489%" height="15" fill="rgb(213,181,19)" fg:x="495898" fg:w="1742"/><text x="99.5862%" y="143.50"></text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (198 samples, 0.04%)</title><rect x="99.6851%" y="133" width="0.0397%" height="15" fill="rgb(254,191,54)" fg:x="497640" fg:w="198"/><text x="99.9351%" y="143.50"></text></g><g><title>fekan`console::term::Term::flush (52 samples, 0.01%)</title><rect x="99.7336%" y="69" width="0.0104%" height="15" fill="rgb(241,83,37)" fg:x="497882" fg:w="52"/><text x="99.9836%" y="79.50"></text></g><g><title>fekan`console::term::Term::write_through (52 samples, 0.01%)</title><rect x="99.7336%" y="53" width="0.0104%" height="15" fill="rgb(233,36,39)" fg:x="497882" fg:w="52"/><text x="99.9836%" y="63.50"></text></g><g><title>fekan`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (50 samples, 0.01%)</title><rect x="99.7340%" y="37" width="0.0100%" height="15" fill="rgb(226,3,54)" fg:x="497884" fg:w="50"/><text x="99.9840%" y="47.50"></text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (104 samples, 0.02%)</title><rect x="99.7332%" y="85" width="0.0208%" height="15" fill="rgb(245,192,40)" fg:x="497880" fg:w="104"/><text x="99.9832%" y="95.50"></text></g><g><title>libsystem_c.dylib`isatty (117 samples, 0.02%)</title><rect x="99.7570%" y="53" width="0.0234%" height="15" fill="rgb(238,167,29)" fg:x="497999" fg:w="117"/><text x="100.0070%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (117 samples, 0.02%)</title><rect x="99.7570%" y="37" width="0.0234%" height="15" fill="rgb(232,182,51)" fg:x="497999" fg:w="117"/><text x="100.0070%" y="47.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (57 samples, 0.01%)</title><rect x="99.7805%" y="53" width="0.0114%" height="15" fill="rgb(231,60,39)" fg:x="498116" fg:w="57"/><text x="100.0305%" y="63.50"></text></g><g><title>fekan`console::unix_term::terminal_size (178 samples, 0.04%)</title><rect x="99.7564%" y="69" width="0.0357%" height="15" fill="rgb(208,69,12)" fg:x="497996" fg:w="178"/><text x="100.0064%" y="79.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (185 samples, 0.04%)</title><rect x="99.7554%" y="85" width="0.0371%" height="15" fill="rgb(235,93,37)" fg:x="497991" fg:w="185"/><text x="100.0054%" y="95.50"></text></g><g><title>fekan`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (72 samples, 0.01%)</title><rect x="99.7989%" y="53" width="0.0144%" height="15" fill="rgb(213,116,39)" fg:x="498208" fg:w="72"/><text x="100.0489%" y="63.50"></text></g><g><title>fekan`core::fmt::write (139 samples, 0.03%)</title><rect x="99.7979%" y="69" width="0.0278%" height="15" fill="rgb(222,207,29)" fg:x="498203" fg:w="139"/><text x="100.0479%" y="79.50"></text></g><g><title>fekan`indicatif::style::ProgressStyle::format_state (173 samples, 0.03%)</title><rect x="99.7929%" y="85" width="0.0347%" height="15" fill="rgb(206,96,30)" fg:x="498178" fg:w="173"/><text x="100.0429%" y="95.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (484 samples, 0.10%)</title><rect x="99.7320%" y="101" width="0.0970%" height="15" fill="rgb(218,138,4)" fg:x="497874" fg:w="484"/><text x="99.9820%" y="111.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (496 samples, 0.10%)</title><rect x="99.7302%" y="133" width="0.0994%" height="15" fill="rgb(250,191,14)" fg:x="497865" fg:w="496"/><text x="99.9802%" y="143.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (493 samples, 0.10%)</title><rect x="99.7308%" y="117" width="0.0988%" height="15" fill="rgb(239,60,40)" fg:x="497868" fg:w="493"/><text x="99.9808%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (96 samples, 0.02%)</title><rect x="99.8454%" y="133" width="0.0192%" height="15" fill="rgb(206,27,48)" fg:x="498440" fg:w="96"/><text x="100.0954%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (456 samples, 0.09%)</title><rect x="99.8646%" y="133" width="0.0913%" height="15" fill="rgb(225,35,8)" fg:x="498536" fg:w="456"/><text x="100.1146%" y="143.50"></text></g><g><title>fekan`fekan::train_model (498,911 samples, 99.94%)</title><rect x="0.0166%" y="149" width="99.9397%" height="15" fill="rgb(250,213,24)" fg:x="83" fg:w="498911"/><text x="0.2666%" y="159.50">fekan`fekan::train_model</text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (50 samples, 0.01%)</title><rect x="99.9595%" y="37" width="0.0100%" height="15" fill="rgb(247,123,22)" fg:x="499010" fg:w="50"/><text x="100.2095%" y="47.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (67 samples, 0.01%)</title><rect x="99.9573%" y="53" width="0.0134%" height="15" fill="rgb(231,138,38)" fg:x="498999" fg:w="67"/><text x="100.2073%" y="63.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (71 samples, 0.01%)</title><rect x="99.9569%" y="69" width="0.0142%" height="15" fill="rgb(231,145,46)" fg:x="498997" fg:w="71"/><text x="100.2069%" y="79.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (81 samples, 0.02%)</title><rect x="99.9565%" y="117" width="0.0162%" height="15" fill="rgb(251,118,11)" fg:x="498995" fg:w="81"/><text x="100.2065%" y="127.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (81 samples, 0.02%)</title><rect x="99.9565%" y="101" width="0.0162%" height="15" fill="rgb(217,147,25)" fg:x="498995" fg:w="81"/><text x="100.2065%" y="111.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (80 samples, 0.02%)</title><rect x="99.9567%" y="85" width="0.0160%" height="15" fill="rgb(247,81,37)" fg:x="498996" fg:w="80"/><text x="100.2067%" y="95.50"></text></g><g><title>fekan`serde_pickle::de::Deserializer&lt;R&gt;::parse_value (95 samples, 0.02%)</title><rect x="99.9730%" y="117" width="0.0190%" height="15" fill="rgb(209,12,38)" fg:x="499077" fg:w="95"/><text x="100.2230%" y="127.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (192 samples, 0.04%)</title><rect x="99.9565%" y="133" width="0.0385%" height="15" fill="rgb(227,1,9)" fg:x="498995" fg:w="192"/><text x="100.2065%" y="143.50"></text></g><g><title>fekan`serde_pickle::de::from_reader (195 samples, 0.04%)</title><rect x="99.9565%" y="149" width="0.0391%" height="15" fill="rgb(248,47,43)" fg:x="498995" fg:w="195"/><text x="100.2065%" y="159.50"></text></g><g><title>fekan`fekan::main (499,196 samples, 100.00%)</title><rect x="0.0000%" y="165" width="99.9968%" height="15" fill="rgb(221,10,30)" fg:x="0" fg:w="499196"/><text x="0.2500%" y="175.50">fekan`fekan::main</text></g><g><title>dyld`start (499,197 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9970%" height="15" fill="rgb(210,229,1)" fg:x="0" fg:w="499197"/><text x="0.2500%" y="255.50">dyld`start</text></g><g><title>fekan`main (499,197 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9970%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="499197"/><text x="0.2500%" y="239.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (499,197 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9970%" height="15" fill="rgb(234,67,33)" fg:x="0" fg:w="499197"/><text x="0.2500%" y="223.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (499,197 samples, 100.00%)</title><rect x="0.0000%" y="197" width="99.9970%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="499197"/><text x="0.2500%" y="207.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys_common::backtrace::__rust_begin_short_backtrace (499,197 samples, 100.00%)</title><rect x="0.0000%" y="181" width="99.9970%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="499197"/><text x="0.2500%" y="191.50">fekan`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (499,212 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,79,30)" fg:x="0" fg:w="499212"/><text x="0.2500%" y="271.50"></text></g></svg></svg>