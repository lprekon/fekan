<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="115320"><g><title>fekan`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.02%)</title><rect x="0.0564%" y="229" width="0.0182%" height="15" fill="rgb(227,0,7)" fg:x="65" fg:w="21"/><text x="0.3064%" y="239.50"></text></g><g><title>fekan`DYLD-STUB$$bzero (191 samples, 0.17%)</title><rect x="0.0919%" y="213" width="0.1656%" height="15" fill="rgb(217,0,24)" fg:x="106" fg:w="191"/><text x="0.3419%" y="223.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (2,383 samples, 2.07%)</title><rect x="0.5038%" y="165" width="2.0664%" height="15" fill="rgb(221,193,54)" fg:x="581" fg:w="2383"/><text x="0.7538%" y="175.50">f..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (46,601 samples, 40.41%)</title><rect x="2.5702%" y="165" width="40.4102%" height="15" fill="rgb(248,212,6)" fg:x="2964" fg:w="46601"/><text x="2.8202%" y="175.50">fekan`fekan::kan::kan_layer::spline::Spline::backward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (42,193 samples, 36.59%)</title><rect x="6.3926%" y="149" width="36.5878%" height="15" fill="rgb(208,68,35)" fg:x="7372" fg:w="42193"/><text x="6.6426%" y="159.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (33,565 samples, 29.11%)</title><rect x="13.8744%" y="133" width="29.1060%" height="15" fill="rgb(232,128,0)" fg:x="16000" fg:w="33565"/><text x="14.1244%" y="143.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (17,756 samples, 15.40%)</title><rect x="27.5832%" y="117" width="15.3972%" height="15" fill="rgb(207,160,47)" fg:x="31809" fg:w="17756"/><text x="27.8332%" y="127.50">fekan`fekan::kan::kan_la..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.02%)</title><rect x="42.9804%" y="165" width="0.0191%" height="15" fill="rgb(228,23,34)" fg:x="49565" fg:w="22"/><text x="43.2304%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.01%)</title><rect x="42.9847%" y="149" width="0.0147%" height="15" fill="rgb(218,30,26)" fg:x="49570" fg:w="17"/><text x="43.2347%" y="159.50"></text></g><g><title>fekan`fekan::kan::kan_layer::node::Node::backward (49,228 samples, 42.69%)</title><rect x="0.3122%" y="181" width="42.6882%" height="15" fill="rgb(220,122,19)" fg:x="360" fg:w="49228"/><text x="0.5622%" y="191.50">fekan`fekan::kan::kan_layer::node::Node::backward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::backward (561 samples, 0.49%)</title><rect x="43.0003%" y="181" width="0.4865%" height="15" fill="rgb(250,228,42)" fg:x="49588" fg:w="561"/><text x="43.2503%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (37 samples, 0.03%)</title><rect x="43.5102%" y="181" width="0.0321%" height="15" fill="rgb(240,193,28)" fg:x="50176" fg:w="37"/><text x="43.7602%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (20 samples, 0.02%)</title><rect x="43.5250%" y="165" width="0.0173%" height="15" fill="rgb(216,20,37)" fg:x="50193" fg:w="20"/><text x="43.7750%" y="175.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::backward (49,926 samples, 43.29%)</title><rect x="0.2706%" y="197" width="43.2934%" height="15" fill="rgb(206,188,39)" fg:x="312" fg:w="49926"/><text x="0.5206%" y="207.50">fekan`fekan::kan::kan_layer::KanLayer::backward</text></g><g><title>fekan`fekan::kan::Kan::backward (49,946 samples, 43.31%)</title><rect x="0.2688%" y="213" width="43.3108%" height="15" fill="rgb(217,207,13)" fg:x="310" fg:w="49946"/><text x="0.5188%" y="223.50">fekan`fekan::kan::Kan::backward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (1,113 samples, 0.97%)</title><rect x="43.6984%" y="165" width="0.9651%" height="15" fill="rgb(231,73,38)" fg:x="50393" fg:w="1113"/><text x="43.9484%" y="175.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (51,930 samples, 45.03%)</title><rect x="43.5987%" y="181" width="45.0312%" height="15" fill="rgb(225,20,46)" fg:x="50278" fg:w="51930"/><text x="43.8487%" y="191.50">fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::forward (50,702 samples, 43.97%)</title><rect x="44.6635%" y="165" width="43.9664%" height="15" fill="rgb(210,31,41)" fg:x="51506" fg:w="50702"/><text x="44.9135%" y="175.50">fekan`fekan::kan::kan_layer::spline::Spline::forward</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (46,674 samples, 40.47%)</title><rect x="48.1564%" y="149" width="40.4735%" height="15" fill="rgb(221,200,47)" fg:x="55534" fg:w="46674"/><text x="48.4064%" y="159.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (42,554 samples, 36.90%)</title><rect x="51.7291%" y="133" width="36.9008%" height="15" fill="rgb(226,26,5)" fg:x="59654" fg:w="42554"/><text x="51.9791%" y="143.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (33,721 samples, 29.24%)</title><rect x="59.3887%" y="117" width="29.2412%" height="15" fill="rgb(249,33,26)" fg:x="68487" fg:w="33721"/><text x="59.6387%" y="127.50">fekan`fekan::kan::kan_layer::spline::Spline::b</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::b (17,354 samples, 15.05%)</title><rect x="73.5813%" y="101" width="15.0486%" height="15" fill="rgb(235,183,28)" fg:x="84854" fg:w="17354"/><text x="73.8313%" y="111.50">fekan`fekan::kan::kan_l..</text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::forward (271 samples, 0.23%)</title><rect x="88.6299%" y="181" width="0.2350%" height="15" fill="rgb(221,5,38)" fg:x="102208" fg:w="271"/><text x="88.8799%" y="191.50"></text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::forward (52,214 samples, 45.28%)</title><rect x="43.5900%" y="197" width="45.2775%" height="15" fill="rgb(247,18,42)" fg:x="50268" fg:w="52214"/><text x="43.8400%" y="207.50">fekan`fekan::kan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.01%)</title><rect x="88.8753%" y="197" width="0.0139%" height="15" fill="rgb(241,131,45)" fg:x="102491" fg:w="16"/><text x="89.1253%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.01%)</title><rect x="88.8753%" y="181" width="0.0139%" height="15" fill="rgb(249,31,29)" fg:x="102491" fg:w="16"/><text x="89.1253%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (14 samples, 0.01%)</title><rect x="88.8770%" y="165" width="0.0121%" height="15" fill="rgb(225,111,53)" fg:x="102493" fg:w="14"/><text x="89.1270%" y="175.50"></text></g><g><title>fekan`fekan::kan::Kan::forward (52,249 samples, 45.31%)</title><rect x="43.5822%" y="213" width="45.3078%" height="15" fill="rgb(238,160,17)" fg:x="50259" fg:w="52249"/><text x="43.8322%" y="223.50">fekan`fekan::kan::Kan::forward</text></g><g><title>fekan`fekan::kan::Kan::update (968 samples, 0.84%)</title><rect x="88.8900%" y="213" width="0.8394%" height="15" fill="rgb(214,148,48)" fg:x="102508" fg:w="968"/><text x="89.1400%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (49 samples, 0.04%)</title><rect x="89.8613%" y="149" width="0.0425%" height="15" fill="rgb(232,36,49)" fg:x="103628" fg:w="49"/><text x="90.1113%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (42 samples, 0.04%)</title><rect x="89.8673%" y="133" width="0.0364%" height="15" fill="rgb(209,103,24)" fg:x="103635" fg:w="42"/><text x="90.1173%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (23 samples, 0.02%)</title><rect x="89.8838%" y="117" width="0.0199%" height="15" fill="rgb(229,88,8)" fg:x="103654" fg:w="23"/><text x="90.1338%" y="127.50"></text></g><g><title>fekan`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (200 samples, 0.17%)</title><rect x="89.7320%" y="165" width="0.1734%" height="15" fill="rgb(213,181,19)" fg:x="103479" fg:w="200"/><text x="89.9820%" y="175.50"></text></g><g><title>fekan`DYLD-STUB$$free (12 samples, 0.01%)</title><rect x="89.9055%" y="165" width="0.0104%" height="15" fill="rgb(254,191,54)" fg:x="103679" fg:w="12"/><text x="90.1555%" y="175.50"></text></g><g><title>fekan`DYLD-STUB$$memcpy (33 samples, 0.03%)</title><rect x="89.9757%" y="149" width="0.0286%" height="15" fill="rgb(241,83,37)" fg:x="103760" fg:w="33"/><text x="90.2257%" y="159.50"></text></g><g><title>fekan`DYLD-STUB$$memmove (28 samples, 0.02%)</title><rect x="90.0043%" y="149" width="0.0243%" height="15" fill="rgb(233,36,39)" fg:x="103793" fg:w="28"/><text x="90.2543%" y="159.50"></text></g><g><title>fekan`core::slice::sort::insertion_sort_shift_left (26 samples, 0.02%)</title><rect x="90.0330%" y="149" width="0.0225%" height="15" fill="rgb(226,3,54)" fg:x="103826" fg:w="26"/><text x="90.2830%" y="159.50"></text></g><g><title>fekan`core::slice::sort::insertion_sort_shift_left (1,186 samples, 1.03%)</title><rect x="93.8025%" y="133" width="1.0284%" height="15" fill="rgb(245,192,40)" fg:x="108173" fg:w="1186"/><text x="94.0525%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.02%)</title><rect x="94.8318%" y="133" width="0.0173%" height="15" fill="rgb(238,167,29)" fg:x="109360" fg:w="20"/><text x="95.0818%" y="143.50"></text></g><g><title>fekan`core::slice::sort::merge_sort (5,533 samples, 4.80%)</title><rect x="90.0555%" y="149" width="4.7980%" height="15" fill="rgb(232,182,51)" fg:x="103852" fg:w="5533"/><text x="90.3055%" y="159.50">fekan`..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (101 samples, 0.09%)</title><rect x="94.8751%" y="149" width="0.0876%" height="15" fill="rgb(231,60,39)" fg:x="109410" fg:w="101"/><text x="95.1251%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (50 samples, 0.04%)</title><rect x="94.9670%" y="149" width="0.0434%" height="15" fill="rgb(208,69,12)" fg:x="109516" fg:w="50"/><text x="95.2170%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (34 samples, 0.03%)</title><rect x="94.9809%" y="133" width="0.0295%" height="15" fill="rgb(235,93,37)" fg:x="109532" fg:w="34"/><text x="95.2309%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.02%)</title><rect x="95.0173%" y="149" width="0.0199%" height="15" fill="rgb(213,116,39)" fg:x="109574" fg:w="23"/><text x="95.2673%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (400 samples, 0.35%)</title><rect x="95.0408%" y="149" width="0.3469%" height="15" fill="rgb(222,207,29)" fg:x="109601" fg:w="400"/><text x="95.2908%" y="159.50"></text></g><g><title>fekan`fekan::kan::kan_layer::spline::Spline::update_knots_from_samples (6,324 samples, 5.48%)</title><rect x="89.9254%" y="165" width="5.4839%" height="15" fill="rgb(206,96,30)" fg:x="103702" fg:w="6324"/><text x="90.1754%" y="175.50">fekan`f..</text></g><g><title>libsystem_platform.dylib`_platform_memset (25 samples, 0.02%)</title><rect x="95.3876%" y="149" width="0.0217%" height="15" fill="rgb(218,138,4)" fg:x="110001" fg:w="25"/><text x="95.6376%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (44 samples, 0.04%)</title><rect x="95.4093%" y="165" width="0.0382%" height="15" fill="rgb(250,191,14)" fg:x="110026" fg:w="44"/><text x="95.6593%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (26 samples, 0.02%)</title><rect x="95.4475%" y="165" width="0.0225%" height="15" fill="rgb(239,60,40)" fg:x="110070" fg:w="26"/><text x="95.6975%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (41 samples, 0.04%)</title><rect x="95.4821%" y="165" width="0.0356%" height="15" fill="rgb(206,27,48)" fg:x="110110" fg:w="41"/><text x="95.7321%" y="175.50"></text></g><g><title>fekan`fekan::kan::kan_layer::node::Node::update_knots_from_samples (6,673 samples, 5.79%)</title><rect x="89.7320%" y="181" width="5.7865%" height="15" fill="rgb(225,35,8)" fg:x="103479" fg:w="6673"/><text x="89.9820%" y="191.50">fekan`f..</text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (6,679 samples, 5.79%)</title><rect x="89.7294%" y="213" width="5.7917%" height="15" fill="rgb(250,213,24)" fg:x="103476" fg:w="6679"/><text x="89.9794%" y="223.50">fekan`f..</text></g><g><title>fekan`fekan::kan::kan_layer::KanLayer::update_knots_from_samples (6,679 samples, 5.79%)</title><rect x="89.7294%" y="197" width="5.7917%" height="15" fill="rgb(247,123,22)" fg:x="103476" fg:w="6679"/><text x="89.9794%" y="207.50">fekan`f..</text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (331 samples, 0.29%)</title><rect x="95.5212%" y="213" width="0.2870%" height="15" fill="rgb(231,138,38)" fg:x="110155" fg:w="331"/><text x="95.7712%" y="223.50"></text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (13 samples, 0.01%)</title><rect x="95.8186%" y="165" width="0.0113%" height="15" fill="rgb(231,145,46)" fg:x="110498" fg:w="13"/><text x="96.0686%" y="175.50"></text></g><g><title>libsystem_c.dylib`isatty (21 samples, 0.02%)</title><rect x="95.8316%" y="133" width="0.0182%" height="15" fill="rgb(251,118,11)" fg:x="110513" fg:w="21"/><text x="96.0816%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (21 samples, 0.02%)</title><rect x="95.8316%" y="117" width="0.0182%" height="15" fill="rgb(217,147,25)" fg:x="110513" fg:w="21"/><text x="96.0816%" y="127.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (47 samples, 0.04%)</title><rect x="95.8299%" y="165" width="0.0408%" height="15" fill="rgb(247,81,37)" fg:x="110511" fg:w="47"/><text x="96.0799%" y="175.50"></text></g><g><title>fekan`console::unix_term::terminal_size (46 samples, 0.04%)</title><rect x="95.8307%" y="149" width="0.0399%" height="15" fill="rgb(209,12,38)" fg:x="110512" fg:w="46"/><text x="96.0807%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (24 samples, 0.02%)</title><rect x="95.8498%" y="133" width="0.0208%" height="15" fill="rgb(227,1,9)" fg:x="110534" fg:w="24"/><text x="96.0998%" y="143.50"></text></g><g><title>fekan`core::fmt::write (18 samples, 0.02%)</title><rect x="95.8706%" y="149" width="0.0156%" height="15" fill="rgb(248,47,43)" fg:x="110558" fg:w="18"/><text x="96.1206%" y="159.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (80 samples, 0.07%)</title><rect x="95.8177%" y="181" width="0.0694%" height="15" fill="rgb(221,10,30)" fg:x="110497" fg:w="80"/><text x="96.0677%" y="191.50"></text></g><g><title>fekan`indicatif::style::ProgressStyle::format_state (19 samples, 0.02%)</title><rect x="95.8706%" y="165" width="0.0165%" height="15" fill="rgb(210,229,1)" fg:x="110558" fg:w="19"/><text x="96.1206%" y="175.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (86 samples, 0.07%)</title><rect x="95.8160%" y="213" width="0.0746%" height="15" fill="rgb(222,148,37)" fg:x="110495" fg:w="86"/><text x="96.0660%" y="223.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (85 samples, 0.07%)</title><rect x="95.8169%" y="197" width="0.0737%" height="15" fill="rgb(234,67,33)" fg:x="110496" fg:w="85"/><text x="96.0669%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.01%)</title><rect x="95.9079%" y="213" width="0.0130%" height="15" fill="rgb(247,98,35)" fg:x="110601" fg:w="15"/><text x="96.1579%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.01%)</title><rect x="95.9088%" y="197" width="0.0121%" height="15" fill="rgb(247,138,52)" fg:x="110602" fg:w="14"/><text x="96.1588%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (81 samples, 0.07%)</title><rect x="95.9209%" y="213" width="0.0702%" height="15" fill="rgb(213,79,30)" fg:x="110616" fg:w="81"/><text x="96.1709%" y="223.50"></text></g><g><title>fekan`fekan::train_model (111,535 samples, 96.72%)</title><rect x="0.0815%" y="229" width="96.7178%" height="15" fill="rgb(246,177,23)" fg:x="94" fg:w="111535"/><text x="0.3315%" y="239.50">fekan`fekan::train_model</text></g><g><title>libsystem_platform.dylib`_platform_memset (931 samples, 0.81%)</title><rect x="95.9920%" y="213" width="0.8073%" height="15" fill="rgb(230,62,27)" fg:x="110698" fg:w="931"/><text x="96.2420%" y="223.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (42 samples, 0.04%)</title><rect x="96.8106%" y="165" width="0.0364%" height="15" fill="rgb(216,154,8)" fg:x="111642" fg:w="42"/><text x="97.0606%" y="175.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (36 samples, 0.03%)</title><rect x="97.0205%" y="117" width="0.0312%" height="15" fill="rgb(244,35,45)" fg:x="111884" fg:w="36"/><text x="97.2705%" y="127.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (176 samples, 0.15%)</title><rect x="97.0534%" y="101" width="0.1526%" height="15" fill="rgb(251,115,12)" fg:x="111922" fg:w="176"/><text x="97.3034%" y="111.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (264 samples, 0.23%)</title><rect x="97.6786%" y="85" width="0.2289%" height="15" fill="rgb(240,54,50)" fg:x="112643" fg:w="264"/><text x="97.9286%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_scan_madvise_free (30 samples, 0.03%)</title><rect x="97.9275%" y="69" width="0.0260%" height="15" fill="rgb(233,84,52)" fg:x="112930" fg:w="30"/><text x="98.1775%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.03%)</title><rect x="97.9275%" y="53" width="0.0260%" height="15" fill="rgb(207,117,47)" fg:x="112930" fg:w="30"/><text x="98.1775%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`free_small (54 samples, 0.05%)</title><rect x="97.9093%" y="85" width="0.0468%" height="15" fill="rgb(249,43,39)" fg:x="112909" fg:w="54"/><text x="98.1593%" y="95.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (883 samples, 0.77%)</title><rect x="97.2060%" y="101" width="0.7657%" height="15" fill="rgb(209,38,44)" fg:x="112098" fg:w="883"/><text x="97.4560%" y="111.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,073 samples, 0.93%)</title><rect x="97.0534%" y="117" width="0.9305%" height="15" fill="rgb(236,212,23)" fg:x="111922" fg:w="1073"/><text x="97.3034%" y="127.50"></text></g><g><title>fekan`&lt;serde_pickle::de::Value as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="97.9865%" y="117" width="0.0199%" height="15" fill="rgb(242,79,21)" fg:x="112998" fg:w="23"/><text x="98.2365%" y="127.50"></text></g><g><title>fekan`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (19 samples, 0.02%)</title><rect x="98.0350%" y="101" width="0.0165%" height="15" fill="rgb(211,96,35)" fg:x="113054" fg:w="19"/><text x="98.2850%" y="111.50"></text></g><g><title>fekan`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (52 samples, 0.05%)</title><rect x="98.0073%" y="117" width="0.0451%" height="15" fill="rgb(253,215,40)" fg:x="113022" fg:w="52"/><text x="98.2573%" y="127.50"></text></g><g><title>fekan`alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::do_merge (16 samples, 0.01%)</title><rect x="98.1035%" y="69" width="0.0139%" height="15" fill="rgb(211,81,21)" fg:x="113133" fg:w="16"/><text x="98.3535%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.01%)</title><rect x="98.1053%" y="53" width="0.0121%" height="15" fill="rgb(208,190,38)" fg:x="113135" fg:w="14"/><text x="98.3553%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12 samples, 0.01%)</title><rect x="98.1070%" y="37" width="0.0104%" height="15" fill="rgb(235,213,38)" fg:x="113137" fg:w="12"/><text x="98.3570%" y="47.50"></text></g><g><title>fekan`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (73 samples, 0.06%)</title><rect x="98.0732%" y="85" width="0.0633%" height="15" fill="rgb(237,122,38)" fg:x="113098" fg:w="73"/><text x="98.3232%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.01%)</title><rect x="98.1226%" y="69" width="0.0139%" height="15" fill="rgb(244,218,35)" fg:x="113155" fg:w="16"/><text x="98.3726%" y="79.50"></text></g><g><title>fekan`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (111 samples, 0.10%)</title><rect x="98.0524%" y="117" width="0.0963%" height="15" fill="rgb(240,68,47)" fg:x="113074" fg:w="111"/><text x="98.3024%" y="127.50"></text></g><g><title>fekan`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (104 samples, 0.09%)</title><rect x="98.0584%" y="101" width="0.0902%" height="15" fill="rgb(210,16,53)" fg:x="113081" fg:w="104"/><text x="98.3084%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.01%)</title><rect x="98.1365%" y="85" width="0.0121%" height="15" fill="rgb(235,124,12)" fg:x="113171" fg:w="14"/><text x="98.3865%" y="95.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,469 samples, 1.27%)</title><rect x="96.8826%" y="133" width="1.2738%" height="15" fill="rgb(224,169,11)" fg:x="111725" fg:w="1469"/><text x="97.1326%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (12 samples, 0.01%)</title><rect x="98.1608%" y="133" width="0.0104%" height="15" fill="rgb(250,166,2)" fg:x="113199" fg:w="12"/><text x="98.4108%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,539 samples, 1.33%)</title><rect x="96.8479%" y="149" width="1.3345%" height="15" fill="rgb(242,216,29)" fg:x="111685" fg:w="1539"/><text x="97.0979%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (13 samples, 0.01%)</title><rect x="98.1712%" y="133" width="0.0113%" height="15" fill="rgb(230,116,27)" fg:x="113211" fg:w="13"/><text x="98.4212%" y="143.50"></text></g><g><title>fekan`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (27 samples, 0.02%)</title><rect x="98.1877%" y="117" width="0.0234%" height="15" fill="rgb(228,99,48)" fg:x="113230" fg:w="27"/><text x="98.4377%" y="127.50"></text></g><g><title>fekan`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (43 samples, 0.04%)</title><rect x="98.1824%" y="149" width="0.0373%" height="15" fill="rgb(253,11,6)" fg:x="113224" fg:w="43"/><text x="98.4324%" y="159.50"></text></g><g><title>fekan`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (42 samples, 0.04%)</title><rect x="98.1833%" y="133" width="0.0364%" height="15" fill="rgb(247,143,39)" fg:x="113225" fg:w="42"/><text x="98.4333%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,587 samples, 1.38%)</title><rect x="96.8479%" y="165" width="1.3762%" height="15" fill="rgb(236,97,10)" fg:x="111685" fg:w="1587"/><text x="97.0979%" y="175.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1,642 samples, 1.42%)</title><rect x="96.8019%" y="197" width="1.4239%" height="15" fill="rgb(233,208,19)" fg:x="111632" fg:w="1642"/><text x="97.0519%" y="207.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1,641 samples, 1.42%)</title><rect x="96.8028%" y="181" width="1.4230%" height="15" fill="rgb(216,164,2)" fg:x="111633" fg:w="1641"/><text x="97.0528%" y="191.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (12 samples, 0.01%)</title><rect x="99.2152%" y="165" width="0.0104%" height="15" fill="rgb(220,129,5)" fg:x="114415" fg:w="12"/><text x="99.4652%" y="175.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.02%)</title><rect x="99.2109%" y="181" width="0.0156%" height="15" fill="rgb(242,17,10)" fg:x="114410" fg:w="18"/><text x="99.4609%" y="191.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (30 samples, 0.03%)</title><rect x="99.2386%" y="149" width="0.0260%" height="15" fill="rgb(242,107,0)" fg:x="114442" fg:w="30"/><text x="99.4886%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (29 samples, 0.03%)</title><rect x="99.2395%" y="133" width="0.0251%" height="15" fill="rgb(251,28,31)" fg:x="114443" fg:w="29"/><text x="99.4895%" y="143.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (42 samples, 0.04%)</title><rect x="99.2369%" y="165" width="0.0364%" height="15" fill="rgb(233,223,10)" fg:x="114440" fg:w="42"/><text x="99.4869%" y="175.50"></text></g><g><title>fekan`serde_pickle::de::Deserializer&lt;R&gt;::extend_dict (64 samples, 0.06%)</title><rect x="99.2326%" y="181" width="0.0555%" height="15" fill="rgb(215,21,27)" fg:x="114435" fg:w="64"/><text x="99.4826%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (14 samples, 0.01%)</title><rect x="99.2759%" y="165" width="0.0121%" height="15" fill="rgb(232,23,21)" fg:x="114485" fg:w="14"/><text x="99.5259%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.01%)</title><rect x="99.4892%" y="117" width="0.0104%" height="15" fill="rgb(244,5,23)" fg:x="114731" fg:w="12"/><text x="99.7392%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.01%)</title><rect x="99.4892%" y="101" width="0.0104%" height="15" fill="rgb(226,81,46)" fg:x="114731" fg:w="12"/><text x="99.7392%" y="111.50"></text></g><g><title>fekan`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (30 samples, 0.03%)</title><rect x="99.4745%" y="133" width="0.0260%" height="15" fill="rgb(247,70,30)" fg:x="114714" fg:w="30"/><text x="99.7245%" y="143.50"></text></g><g><title>fekan`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (56 samples, 0.05%)</title><rect x="99.4528%" y="165" width="0.0486%" height="15" fill="rgb(212,68,19)" fg:x="114689" fg:w="56"/><text x="99.7028%" y="175.50"></text></g><g><title>fekan`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (50 samples, 0.04%)</title><rect x="99.4580%" y="149" width="0.0434%" height="15" fill="rgb(240,187,13)" fg:x="114695" fg:w="50"/><text x="99.7080%" y="159.50"></text></g><g><title>fekan`serde_pickle::de::Deserializer&lt;R&gt;::memoize (253 samples, 0.22%)</title><rect x="99.2881%" y="181" width="0.2194%" height="15" fill="rgb(223,113,26)" fg:x="114499" fg:w="253"/><text x="99.5381%" y="191.50"></text></g><g><title>fekan`std::io::default_read_to_end::small_probe_read (24 samples, 0.02%)</title><rect x="99.5153%" y="165" width="0.0208%" height="15" fill="rgb(206,192,2)" fg:x="114761" fg:w="24"/><text x="99.7653%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.01%)</title><rect x="99.5257%" y="149" width="0.0104%" height="15" fill="rgb(241,108,4)" fg:x="114773" fg:w="12"/><text x="99.7757%" y="159.50"></text></g><g><title>fekan`std::io::default_read_to_end (33 samples, 0.03%)</title><rect x="99.5109%" y="181" width="0.0286%" height="15" fill="rgb(247,173,49)" fg:x="114756" fg:w="33"/><text x="99.7609%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`read (88 samples, 0.08%)</title><rect x="99.5395%" y="181" width="0.0763%" height="15" fill="rgb(224,114,35)" fg:x="114789" fg:w="88"/><text x="99.7895%" y="191.50"></text></g><g><title>fekan`serde_pickle::de::Deserializer&lt;R&gt;::parse_value (1,624 samples, 1.41%)</title><rect x="98.2362%" y="197" width="1.4083%" height="15" fill="rgb(245,159,27)" fg:x="113286" fg:w="1624"/><text x="98.4862%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.01%)</title><rect x="99.6297%" y="181" width="0.0147%" height="15" fill="rgb(245,172,44)" fg:x="114893" fg:w="17"/><text x="99.8797%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.01%)</title><rect x="99.6341%" y="165" width="0.0104%" height="15" fill="rgb(236,23,11)" fg:x="114898" fg:w="12"/><text x="99.8841%" y="175.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3,614 samples, 3.13%)</title><rect x="96.8019%" y="213" width="3.1339%" height="15" fill="rgb(205,117,38)" fg:x="111632" fg:w="3614"/><text x="97.0519%" y="223.50">fek..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (320 samples, 0.28%)</title><rect x="99.6583%" y="197" width="0.2775%" height="15" fill="rgb(237,72,25)" fg:x="114926" fg:w="320"/><text x="99.9083%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.01%)</title><rect x="99.9410%" y="149" width="0.0147%" height="15" fill="rgb(244,70,9)" fg:x="115252" fg:w="17"/><text x="100.1910%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (13 samples, 0.01%)</title><rect x="99.9445%" y="133" width="0.0113%" height="15" fill="rgb(217,125,39)" fg:x="115256" fg:w="13"/><text x="100.1945%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (13 samples, 0.01%)</title><rect x="99.9445%" y="117" width="0.0113%" height="15" fill="rgb(235,36,10)" fg:x="115256" fg:w="13"/><text x="100.1945%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.02%)</title><rect x="99.9384%" y="165" width="0.0182%" height="15" fill="rgb(251,123,47)" fg:x="115249" fg:w="21"/><text x="100.1884%" y="175.50"></text></g><g><title>fekan`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (26 samples, 0.02%)</title><rect x="99.9358%" y="181" width="0.0225%" height="15" fill="rgb(221,13,13)" fg:x="115246" fg:w="26"/><text x="100.1858%" y="191.50"></text></g><g><title>fekan`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="99.9358%" y="197" width="0.0251%" height="15" fill="rgb(238,131,9)" fg:x="115246" fg:w="29"/><text x="100.1858%" y="207.50"></text></g><g><title>fekan`serde_pickle::de::from_reader (3,644 samples, 3.16%)</title><rect x="96.8019%" y="229" width="3.1599%" height="15" fill="rgb(211,50,8)" fg:x="111632" fg:w="3644"/><text x="97.0519%" y="239.50">fek..</text></g><g><title>fekan`core::ptr::drop_in_place&lt;serde_pickle::de::Deserializer&lt;std::fs::File&gt;&gt; (30 samples, 0.03%)</title><rect x="99.9358%" y="213" width="0.0260%" height="15" fill="rgb(245,182,24)" fg:x="115246" fg:w="30"/><text x="100.1858%" y="223.50"></text></g><g><title>fekan`fekan::main (115,305 samples, 99.99%)</title><rect x="0.0017%" y="245" width="99.9870%" height="15" fill="rgb(242,14,37)" fg:x="2" fg:w="115305"/><text x="0.2517%" y="255.50">fekan`fekan::main</text></g><g><title>all (115,320 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="115320"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld`start (115,320 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="115320"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>fekan`main (115,320 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="115320"/><text x="0.2500%" y="319.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (115,320 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="115320"/><text x="0.2500%" y="303.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (115,320 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="115320"/><text x="0.2500%" y="287.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys_common::backtrace::__rust_begin_short_backtrace (115,320 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="115320"/><text x="0.2500%" y="271.50">fekan`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>