<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="325.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="325.00"> </text><svg id="frames" x="10" width="1180" total_samples="548523"><g><title>libsystem_kernel.dylib`madvise (75 samples, 0.01%)</title><rect x="0.0018%" y="117" width="0.0137%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="75"/><text x="0.2518%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (77 samples, 0.01%)</title><rect x="0.0018%" y="133" width="0.0140%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="77"/><text x="0.2518%" y="143.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::spline::Spline&gt; (79 samples, 0.01%)</title><rect x="0.0018%" y="149" width="0.0144%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="79"/><text x="0.2518%" y="159.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan_layer::KanLayer&gt; (84 samples, 0.02%)</title><rect x="0.0018%" y="165" width="0.0153%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="84"/><text x="0.2518%" y="175.50"></text></g><g><title>fekan`core::ptr::drop_in_place&lt;fekan::kan::Kan&gt; (85 samples, 0.02%)</title><rect x="0.0018%" y="181" width="0.0155%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="85"/><text x="0.2518%" y="191.50"></text></g><g><title>fekan`DYLD-STUB$$bzero (183 samples, 0.03%)</title><rect x="0.0246%" y="165" width="0.0334%" height="15" fill="rgb(232,128,0)" fg:x="135" fg:w="183"/><text x="0.2746%" y="175.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (41,002 samples, 7.47%)</title><rect x="0.1081%" y="133" width="7.4750%" height="15" fill="rgb(207,160,47)" fg:x="593" fg:w="41002"/><text x="0.3581%" y="143.50">fekan`feka..</text></g><g><title>fekan`fekan::kan_layer::spline::b (9,289 samples, 1.69%)</title><rect x="5.8896%" y="117" width="1.6935%" height="15" fill="rgb(228,23,34)" fg:x="32306" fg:w="9289"/><text x="6.1396%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (19,106 samples, 3.48%)</title><rect x="7.5831%" y="133" width="3.4832%" height="15" fill="rgb(218,30,26)" fg:x="41595" fg:w="19106"/><text x="7.8331%" y="143.50">fek..</text></g><g><title>fekan`fekan::kan_layer::KanLayer::backward (60,350 samples, 11.00%)</title><rect x="0.0698%" y="149" width="11.0023%" height="15" fill="rgb(220,122,19)" fg:x="383" fg:w="60350"/><text x="0.3198%" y="159.50">fekan`fekan::kan..</text></g><g><title>fekan`fekan::kan_layer::spline::Spline::backward (387 samples, 0.07%)</title><rect x="11.0721%" y="149" width="0.0706%" height="15" fill="rgb(250,228,42)" fg:x="60733" fg:w="387"/><text x="11.3221%" y="159.50"></text></g><g><title>fekan`fekan::kan::Kan::backward (60,763 samples, 11.08%)</title><rect x="0.0689%" y="165" width="11.0776%" height="15" fill="rgb(240,193,28)" fg:x="378" fg:w="60763"/><text x="0.3189%" y="175.50">fekan`fekan::kan..</text></g><g><title>fekan`fekan::kan_layer::spline::b (2,976 samples, 0.54%)</title><rect x="17.9998%" y="85" width="0.5425%" height="15" fill="rgb(216,20,37)" fg:x="98733" fg:w="2976"/><text x="18.2498%" y="95.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (183,394 samples, 33.43%)</title><rect x="16.4489%" y="101" width="33.4341%" height="15" fill="rgb(206,188,39)" fg:x="90226" fg:w="183394"/><text x="16.6989%" y="111.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (171,911 samples, 31.34%)</title><rect x="18.5423%" y="85" width="31.3407%" height="15" fill="rgb(217,207,13)" fg:x="101709" fg:w="171911"/><text x="18.7923%" y="95.50">fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>libsystem_malloc.dylib`free_medium (58 samples, 0.01%)</title><rect x="75.9591%" y="69" width="0.0106%" height="15" fill="rgb(231,73,38)" fg:x="416653" fg:w="58"/><text x="76.2091%" y="79.50"></text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (550 samples, 0.10%)</title><rect x="75.8699%" y="85" width="0.1003%" height="15" fill="rgb(225,20,46)" fg:x="416164" fg:w="550"/><text x="76.1199%" y="95.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (334,040 samples, 60.90%)</title><rect x="15.0752%" y="117" width="60.8981%" height="15" fill="rgb(210,31,41)" fg:x="82691" fg:w="334040"/><text x="15.3252%" y="127.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (143,111 samples, 26.09%)</title><rect x="49.8830%" y="101" width="26.0902%" height="15" fill="rgb(221,200,47)" fg:x="273620" fg:w="143111"/><text x="50.1330%" y="111.50">fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::in..</text></g><g><title>fekan`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (214 samples, 0.04%)</title><rect x="96.3861%" y="101" width="0.0390%" height="15" fill="rgb(226,26,5)" fg:x="528700" fg:w="214"/><text x="96.6361%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (459,642 samples, 83.80%)</title><rect x="12.6301%" y="133" width="83.7963%" height="15" fill="rgb(249,33,26)" fg:x="69279" fg:w="459642"/><text x="12.8801%" y="143.50">fekan`fekan::kan_layer::spline::b</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (112,190 samples, 20.45%)</title><rect x="75.9733%" y="117" width="20.4531%" height="15" fill="rgb(235,183,28)" fg:x="416731" fg:w="112190"/><text x="76.2233%" y="127.50">fekan`hashbrown::map::HashMap&lt;K,..</text></g><g><title>fekan`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,163 samples, 0.21%)</title><rect x="96.4264%" y="133" width="0.2120%" height="15" fill="rgb(221,5,38)" fg:x="528921" fg:w="1163"/><text x="96.6764%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::forward (469,075 samples, 85.52%)</title><rect x="11.1510%" y="149" width="85.5160%" height="15" fill="rgb(247,18,42)" fg:x="61166" fg:w="469075"/><text x="11.4010%" y="159.50">fekan`fekan::kan_layer::KanLayer::forward</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (143 samples, 0.03%)</title><rect x="96.6410%" y="133" width="0.0261%" height="15" fill="rgb(241,131,45)" fg:x="530098" fg:w="143"/><text x="96.8910%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (143 samples, 0.03%)</title><rect x="96.6410%" y="117" width="0.0261%" height="15" fill="rgb(249,31,29)" fg:x="530098" fg:w="143"/><text x="96.8910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (141 samples, 0.03%)</title><rect x="96.6413%" y="101" width="0.0257%" height="15" fill="rgb(225,111,53)" fg:x="530100" fg:w="141"/><text x="96.8913%" y="111.50"></text></g><g><title>fekan`fekan::kan_layer::spline::b (14,182 samples, 2.59%)</title><rect x="96.6670%" y="149" width="2.5855%" height="15" fill="rgb(238,160,17)" fg:x="530241" fg:w="14182"/><text x="96.9170%" y="159.50">fe..</text></g><g><title>fekan`fekan::kan::Kan::forward (483,305 samples, 88.11%)</title><rect x="11.1507%" y="165" width="88.1103%" height="15" fill="rgb(214,148,48)" fg:x="61164" fg:w="483305"/><text x="11.4007%" y="175.50">fekan`fekan::kan::Kan::forward</text></g><g><title>fekan`fekan::kan::Kan::update (790 samples, 0.14%)</title><rect x="99.2609%" y="165" width="0.1440%" height="15" fill="rgb(232,36,49)" fg:x="544469" fg:w="790"/><text x="99.5109%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (62 samples, 0.01%)</title><rect x="99.4234%" y="69" width="0.0113%" height="15" fill="rgb(209,103,24)" fg:x="545360" fg:w="62"/><text x="99.6734%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (71 samples, 0.01%)</title><rect x="99.4223%" y="85" width="0.0129%" height="15" fill="rgb(229,88,8)" fg:x="545354" fg:w="71"/><text x="99.6723%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (73 samples, 0.01%)</title><rect x="99.4221%" y="101" width="0.0133%" height="15" fill="rgb(213,181,19)" fg:x="545353" fg:w="73"/><text x="99.6721%" y="111.50"></text></g><g><title>fekan`alloc::raw_vec::finish_grow (77 samples, 0.01%)</title><rect x="99.4215%" y="117" width="0.0140%" height="15" fill="rgb(254,191,54)" fg:x="545350" fg:w="77"/><text x="99.6715%" y="127.50"></text></g><g><title>fekan`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (82 samples, 0.01%)</title><rect x="99.4210%" y="133" width="0.0149%" height="15" fill="rgb(241,83,37)" fg:x="545347" fg:w="82"/><text x="99.6710%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (70 samples, 0.01%)</title><rect x="99.4487%" y="85" width="0.0128%" height="15" fill="rgb(233,36,39)" fg:x="545499" fg:w="70"/><text x="99.6987%" y="95.50"></text></g><g><title>fekan`core::slice::sort::stable::quicksort::quicksort (138 samples, 0.03%)</title><rect x="99.4369%" y="101" width="0.0252%" height="15" fill="rgb(226,3,54)" fg:x="545434" fg:w="138"/><text x="99.6869%" y="111.50"></text></g><g><title>fekan`core::slice::sort::stable::driftsort_main (146 samples, 0.03%)</title><rect x="99.4359%" y="133" width="0.0266%" height="15" fill="rgb(245,192,40)" fg:x="545429" fg:w="146"/><text x="99.6859%" y="143.50"></text></g><g><title>fekan`core::slice::sort::stable::drift::sort (146 samples, 0.03%)</title><rect x="99.4359%" y="117" width="0.0266%" height="15" fill="rgb(238,167,29)" fg:x="545429" fg:w="146"/><text x="99.6859%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (65 samples, 0.01%)</title><rect x="99.4985%" y="117" width="0.0119%" height="15" fill="rgb(232,182,51)" fg:x="545772" fg:w="65"/><text x="99.7485%" y="127.50"></text></g><g><title>fekan`fekan::kan_layer::spline::Spline::update_knots_from_samples (279 samples, 0.05%)</title><rect x="99.4626%" y="133" width="0.0509%" height="15" fill="rgb(231,60,39)" fg:x="545575" fg:w="279"/><text x="99.7126%" y="143.50"></text></g><g><title>fekan`fekan::kan_layer::KanLayer::update_knots_from_samples (1,581 samples, 0.29%)</title><rect x="99.4049%" y="149" width="0.2882%" height="15" fill="rgb(208,69,12)" fg:x="545259" fg:w="1581"/><text x="99.6549%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (923 samples, 0.17%)</title><rect x="99.5249%" y="133" width="0.1683%" height="15" fill="rgb(235,93,37)" fg:x="545917" fg:w="923"/><text x="99.7749%" y="143.50"></text></g><g><title>fekan`fekan::kan::Kan::update_knots_from_samples (1,585 samples, 0.29%)</title><rect x="99.4049%" y="165" width="0.2890%" height="15" fill="rgb(213,116,39)" fg:x="545259" fg:w="1585"/><text x="99.6549%" y="175.50"></text></g><g><title>fekan`fekan::kan::Kan::zero_gradients (180 samples, 0.03%)</title><rect x="99.6939%" y="165" width="0.0328%" height="15" fill="rgb(222,207,29)" fg:x="546844" fg:w="180"/><text x="99.9439%" y="175.50"></text></g><g><title>fekan`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (73 samples, 0.01%)</title><rect x="99.7371%" y="53" width="0.0133%" height="15" fill="rgb(206,96,30)" fg:x="547081" fg:w="73"/><text x="99.9871%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`write (72 samples, 0.01%)</title><rect x="99.7373%" y="37" width="0.0131%" height="15" fill="rgb(218,138,4)" fg:x="547082" fg:w="72"/><text x="99.9873%" y="47.50"></text></g><g><title>fekan`console::term::Term::flush (81 samples, 0.01%)</title><rect x="99.7360%" y="101" width="0.0148%" height="15" fill="rgb(250,191,14)" fg:x="547075" fg:w="81"/><text x="99.9860%" y="111.50"></text></g><g><title>fekan`console::term::Term::write_through (77 samples, 0.01%)</title><rect x="99.7367%" y="85" width="0.0140%" height="15" fill="rgb(239,60,40)" fg:x="547079" fg:w="77"/><text x="99.9867%" y="95.50"></text></g><g><title>fekan`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (75 samples, 0.01%)</title><rect x="99.7371%" y="69" width="0.0137%" height="15" fill="rgb(206,27,48)" fg:x="547081" fg:w="75"/><text x="99.9871%" y="79.50"></text></g><g><title>fekan`indicatif::draw_target::Drawable::draw (152 samples, 0.03%)</title><rect x="99.7346%" y="117" width="0.0277%" height="15" fill="rgb(225,35,8)" fg:x="547067" fg:w="152"/><text x="99.9846%" y="127.50"></text></g><g><title>libsystem_c.dylib`isatty (115 samples, 0.02%)</title><rect x="99.7648%" y="85" width="0.0210%" height="15" fill="rgb(250,213,24)" fg:x="547233" fg:w="115"/><text x="100.0148%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (115 samples, 0.02%)</title><rect x="99.7648%" y="69" width="0.0210%" height="15" fill="rgb(247,123,22)" fg:x="547233" fg:w="115"/><text x="100.0148%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (71 samples, 0.01%)</title><rect x="99.7858%" y="85" width="0.0129%" height="15" fill="rgb(231,138,38)" fg:x="547348" fg:w="71"/><text x="100.0358%" y="95.50"></text></g><g><title>fekan`console::unix_term::terminal_size (194 samples, 0.04%)</title><rect x="99.7639%" y="101" width="0.0354%" height="15" fill="rgb(231,145,46)" fg:x="547228" fg:w="194"/><text x="100.0139%" y="111.50"></text></g><g><title>fekan`indicatif::draw_target::ProgressDrawTarget::width (199 samples, 0.04%)</title><rect x="99.7632%" y="117" width="0.0363%" height="15" fill="rgb(251,118,11)" fg:x="547224" fg:w="199"/><text x="100.0132%" y="127.50"></text></g><g><title>fekan`&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (85 samples, 0.02%)</title><rect x="99.8077%" y="85" width="0.0155%" height="15" fill="rgb(217,147,25)" fg:x="547468" fg:w="85"/><text x="100.0577%" y="95.50"></text></g><g><title>fekan`core::fmt::write (169 samples, 0.03%)</title><rect x="99.8073%" y="101" width="0.0308%" height="15" fill="rgb(247,81,37)" fg:x="547466" fg:w="169"/><text x="100.0573%" y="111.50"></text></g><g><title>fekan`indicatif::style::ProgressStyle::format_state (216 samples, 0.04%)</title><rect x="99.8004%" y="117" width="0.0394%" height="15" fill="rgb(209,12,38)" fg:x="547428" fg:w="216"/><text x="100.0504%" y="127.50"></text></g><g><title>fekan`indicatif::state::BarState::draw (604 samples, 0.11%)</title><rect x="99.7333%" y="133" width="0.1101%" height="15" fill="rgb(227,1,9)" fg:x="547060" fg:w="604"/><text x="99.9833%" y="143.50"></text></g><g><title>fekan`indicatif::state::BarState::update_estimate_and_draw (611 samples, 0.11%)</title><rect x="99.7326%" y="149" width="0.1114%" height="15" fill="rgb(248,47,43)" fg:x="547056" fg:w="611"/><text x="99.9826%" y="159.50"></text></g><g><title>fekan`indicatif::progress_bar::ProgressBar::tick_inner (618 samples, 0.11%)</title><rect x="99.7315%" y="165" width="0.1127%" height="15" fill="rgb(221,10,30)" fg:x="547050" fg:w="618"/><text x="99.9815%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (87 samples, 0.02%)</title><rect x="99.8618%" y="165" width="0.0159%" height="15" fill="rgb(210,229,1)" fg:x="547765" fg:w="87"/><text x="100.1118%" y="175.50"></text></g><g><title>fekan`fekan::train_model (548,199 samples, 99.94%)</title><rect x="0.0186%" y="181" width="99.9409%" height="15" fill="rgb(222,148,37)" fg:x="102" fg:w="548199"/><text x="0.2686%" y="191.50">fekan`fekan::train_model</text></g><g><title>libsystem_platform.dylib`_platform_memset (449 samples, 0.08%)</title><rect x="99.8777%" y="165" width="0.0819%" height="15" fill="rgb(234,67,33)" fg:x="547852" fg:w="449"/><text x="100.1277%" y="175.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (67 samples, 0.01%)</title><rect x="99.9604%" y="85" width="0.0122%" height="15" fill="rgb(247,98,35)" fg:x="548306" fg:w="67"/><text x="100.2104%" y="95.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (71 samples, 0.01%)</title><rect x="99.9603%" y="101" width="0.0129%" height="15" fill="rgb(247,138,52)" fg:x="548305" fg:w="71"/><text x="100.2103%" y="111.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (75 samples, 0.01%)</title><rect x="99.9599%" y="149" width="0.0137%" height="15" fill="rgb(213,79,30)" fg:x="548303" fg:w="75"/><text x="100.2099%" y="159.50"></text></g><g><title>fekan`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (75 samples, 0.01%)</title><rect x="99.9599%" y="133" width="0.0137%" height="15" fill="rgb(246,177,23)" fg:x="548303" fg:w="75"/><text x="100.2099%" y="143.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (75 samples, 0.01%)</title><rect x="99.9599%" y="117" width="0.0137%" height="15" fill="rgb(230,62,27)" fg:x="548303" fg:w="75"/><text x="100.2099%" y="127.50"></text></g><g><title>fekan`serde_pickle::de::Deserializer&lt;R&gt;::parse_value (80 samples, 0.01%)</title><rect x="99.9737%" y="149" width="0.0146%" height="15" fill="rgb(216,154,8)" fg:x="548379" fg:w="80"/><text x="100.2237%" y="159.50"></text></g><g><title>fekan`&lt;&amp;mut serde_pickle::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (172 samples, 0.03%)</title><rect x="99.9599%" y="165" width="0.0314%" height="15" fill="rgb(244,35,45)" fg:x="548303" fg:w="172"/><text x="100.2099%" y="175.50"></text></g><g><title>fekan`serde_pickle::de::from_reader (173 samples, 0.03%)</title><rect x="99.9599%" y="181" width="0.0315%" height="15" fill="rgb(251,115,12)" fg:x="548303" fg:w="173"/><text x="100.2099%" y="191.50"></text></g><g><title>fekan`fekan::main (548,511 samples, 100.00%)</title><rect x="0.0000%" y="197" width="99.9978%" height="15" fill="rgb(240,54,50)" fg:x="0" fg:w="548511"/><text x="0.2500%" y="207.50">fekan`fekan::main</text></g><g><title>dyld`start (548,512 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9980%" height="15" fill="rgb(233,84,52)" fg:x="0" fg:w="548512"/><text x="0.2500%" y="287.50">dyld`start</text></g><g><title>fekan`main (548,512 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9980%" height="15" fill="rgb(207,117,47)" fg:x="0" fg:w="548512"/><text x="0.2500%" y="271.50">fekan`main</text></g><g><title>fekan`std::rt::lang_start_internal (548,512 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9980%" height="15" fill="rgb(249,43,39)" fg:x="0" fg:w="548512"/><text x="0.2500%" y="255.50">fekan`std::rt::lang_start_internal</text></g><g><title>fekan`std::rt::lang_start::_{{closure}} (548,512 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9980%" height="15" fill="rgb(209,38,44)" fg:x="0" fg:w="548512"/><text x="0.2500%" y="239.50">fekan`std::rt::lang_start::_{{closure}}</text></g><g><title>fekan`std::sys::backtrace::__rust_begin_short_backtrace (548,512 samples, 100.00%)</title><rect x="0.0000%" y="213" width="99.9980%" height="15" fill="rgb(236,212,23)" fg:x="0" fg:w="548512"/><text x="0.2500%" y="223.50">fekan`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (548,523 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(242,79,21)" fg:x="0" fg:w="548523"/><text x="0.2500%" y="303.50"></text></g></svg></svg>